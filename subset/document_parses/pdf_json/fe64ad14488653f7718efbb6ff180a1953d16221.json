{
    "paper_id": "fe64ad14488653f7718efbb6ff180a1953d16221",
    "metadata": {
        "title": "z-Tree unleashed: A novel client-integrating architecture for conducting z-Tree experiments over the Internet",
        "authors": [
            {
                "first": "Matthias",
                "middle": [
                    "L"
                ],
                "last": "Duch",
                "suffix": "",
                "affiliation": {
                    "laboratory": "",
                    "institution": "University of Cologne",
                    "location": {}
                },
                "email": ""
            },
            {
                "first": "Max",
                "middle": [
                    "R P"
                ],
                "last": "Grossmann",
                "suffix": "",
                "affiliation": {
                    "laboratory": "",
                    "institution": "University of Cologne",
                    "location": {}
                },
                "email": ""
            },
            {
                "first": "Thomas",
                "middle": [],
                "last": "Lauer",
                "suffix": "",
                "affiliation": {
                    "laboratory": "",
                    "institution": "University of Cologne",
                    "location": {}
                },
                "email": ""
            }
        ]
    },
    "abstract": [
        {
            "text": "publicly funded repositories, such as the WHO COVID database with rights for unrestricted research re-use and analyses in any form or by any means with acknowledgement of the original source. These permissions are granted for free by Elsevier for as long as the COVID-19 resource centre remains active.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Abstract"
        },
        {
            "text": "Journal Pre-proof z-Tree unleashed: A novel client-integrating architecture for conducting z-Tree experiments over the Internet Please cite this article as: M.L. Duch, M.R.P. Grossmann and T. Lauer, z-Tree unleashed: A novel client-integrating architecture for conducting z-Tree experiments over the Internet.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Abstract"
        },
        {
            "text": "We present z-Tree unleashed, a novel approach and set of scripts to aid the implementation of computerized behavioral experiments outside the laboratory. z-Tree unleashed enables subjects to join the experiment using a web portal that requires no software apart from a web browser. Experimenters are likewise enabled to administer their experiments from anywhere in the world. Except for z-Tree itself, z-Tree unleashed is entirely based on free and open-source software. In this paper we give a high-level overview of z-Tree unleashed's features and benefits and its design. We also show how to set up the server and demonstrate the steps required for conducting an entire experiment. We subsequently explain how to leverage the security and routing features of a virtual private network with z-Tree unleashed, enabling servers to securely run behind routers.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Abstract"
        },
        {
            "text": "Journal Pre-proof 1 The code for any oTree experiment is spread across several files, while zTree allows researchers to use a single file for programming and conducting the experiment. 2 There are several other software platforms in different stages of development, e.g. BreadBoard, ConG (Pettit et al. (2014)), MobLab, NodeGame (Balietti (2017)), Psynteract (Henninger et al. (2017)) and UbiquityLab. 2 J o u r n a l P r e -p r o o f Journal Pre-proof 3 Even if our web portal does not reconnect immediately, subjects can reload the portal without any loss of data. 4 We thank an anonymous referee for suggesting the inclusion of this portion. 3 J o u r n a l P r e -p r o o f Journal Pre-proof 5",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Abstract"
        },
        {
            "text": "Our GitLab repository can be found at https://gitlab.com/cler1/ ztree-unleashed. Our documentation as well as links to our virtual machine image are available on https://cler1.gitlab.io/ztree-unleashed-doc/.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Abstract"
        },
        {
            "text": "6 The uplink's bandwidth is mostly relevant for the subjects's initial loading of our web portal, which has approximately 470 kilobytes of data. Once the portal is initialized, the required uplink is tiny. 4 J o u r n a l P r e -p r o o f Journal Pre-proof J o u r n a l P r e -p r o o f Journal Pre-proof and run the z-Tree graphical user interface. 8 This eliminates all networking issues that could possibly arise and enables the experiment to run fluidly with the highest performance possible given the hardware layer. 8 J o u r n a l P r e -p r o o f Journal Pre-proof J o u r n a l P r e -p r o o f Journal Pre-proof 17 In our investigation, we found that \"Thin\" servers with sufficient functionality and bandwidth are available for less than \u20ac3/month. This includes one static IPv4 address, making the \"Thin\" server globally reachable. A \"Thin\" server is not just \"Thin\", it is also \"Cheap\". 13 J o u r n a l P r e -p r o o f Journal Pre-proof J o u r n a l P r e -p r o o f",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Abstract"
        }
    ],
    "body_text": [
        {
            "text": "Since its inception in 1998, many researchers have come to rely on the Zurich Toolbox for Readymade Economic Experiments (z-Tree), cf. Fischbacher (2007). Despite the fact that several new tools have become available in recent years, a majority of economic experiments are still conducted using z-Tree (see Figure 1 for an example). There are compelling reasons for this persistence: z-Tree is easy to set up and can be learned in short order. One of the most developed and widespread alternatives is oTree by Chen et al. (2016) . This Python-based platform provides a flexible and powerful programming environment for interactive experiments. This flexibility, however, comes at a cost. oTree also increases the complexity of the programming environment that researchers have to handle in order to prepare their experiments. 1 The productive use of oTree or similar platforms requires considerable programming skills, and involves substantial installation time. 2 z-Tree is based on a classic client-server architecture. The clients, i.e. the computers which are used by subjects during the experiment, are typically personal computers running Microsoft Windows. These PCs run z-Leaf, the client software. z-Leaf connects to z-Tree via ethernet and z-Tree streams the experiment over the network, while z-Leaf returns the subjects' input using a proprietary network protocol based on TCP/IP (see Figure 2 , panel a)). Given that z-Leaf is connected to z-Tree over the LAN, a question that has frequently arisen is whether z-Tree experiments could also be played over the Internet, allowing subjects to dial in from anywhere in the world. However, it is generally understood that one cannot expect participants to use a PC, use Microsoft Windows, install foreign software on their computer, not to use Wi-Fi or mobile Internet to connect to z-Tree to ensure network stability and to uninstall that software after the experiment has concluded.",
            "cite_spans": [
                {
                    "start": 510,
                    "end": 528,
                    "text": "Chen et al. (2016)",
                    "ref_id": "BIBREF3"
                },
                {
                    "start": 826,
                    "end": 827,
                    "text": "1",
                    "ref_id": null
                }
            ],
            "ref_spans": [
                {
                    "start": 307,
                    "end": 315,
                    "text": "Figure 1",
                    "ref_id": "FIGREF0"
                },
                {
                    "start": 1397,
                    "end": 1405,
                    "text": "Figure 2",
                    "ref_id": "FIGREF1"
                }
            ],
            "section": "Introduction"
        },
        {
            "text": "Hence, the answer to this question used to be a resounding \"no\". The global pandemic known as COVID-19 has renewed interest in the question. As scientists struggle to continue their research activities while many behavioral laboratories are closed, many researchers are looking for a method to allow subjects to participate in z-Tree experiments remotely. This desire has prompted us to develop z-Tree unleashed, which is a set of techniques and scripts to address several of the issues that arise in the discussion of conducting z-Tree experiments online.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Introduction"
        },
        {
            "text": "One of the most important features of z-Tree unleashed is that subjects are able to participate in the experiment using just a web browser. No installation of additional software is required and there is no difficulty when using Wi-Fi or mobile Internet instead of a wired network. Indeed, no difficulty arises even if subjects switch between networks during the experiment. 3 Subjects may use all operating systems and system architectures as long as they can access a graphical web browser with JavaScript enabled. Subjects can participate from anywhere in the world.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Introduction"
        },
        {
            "text": "Web-based experiments have several advantages, but they also impose certain requirements. Among them are 4 1. sufficient performance of the platform; 2. monitoring which subjects are \"online\" and ready to participate; 3. the possibility to send out sessionwide instead of individualized links; 4. that links are reachable even from behind firewalls.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Introduction"
        },
        {
            "text": "Regarding all of these requirements, z-Tree unleashed performs very well. Firstly, while the platform's performance depends on many variables, it is possible to achieve a setup with almost no latency. Since VNC is the underlying protocol to stream z-Leaf to subjects, we build on a methodology that has for decades been used to provide minimum-latency remote streaming for desktop applications. z-Tree unleashed can also be served from a standard laptop (see Section 7 for details). Secondly, the presence of subjects can be verified using the builtin \"Control Center\" as well as our ztu-preleaf addon (see Section 5, p. 11). Thirdly, sessionwide links can be generated by our open-sourced ztu-singlelink addon (see Section 5, p. 12). Finally, the links generated by recent versions of z-Tree unleashed use only standard ports that are not blocked by corporate firewalls (see Section 5, p. 11). The participation links generated by z-Tree unleashed appear just as regular web links.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Introduction"
        },
        {
            "text": "Our entire package is permissively licensed, based on free software and can be freely redistributed (except for z-Tree and z-Leaf itself). We provide a set of scripts as well as a user-friendly virtual machine image. 5 z-Tree unleashed can be run as a virtual machine, that is as a completely isolated system. It does not interfere with any existing installation of z-Tree. Subjects are likewise completely isolated from each other; they cannot interfere with other subjects or the overall administration of the experiment. z-Tree unleashed upholds the privacy of its users and encrypts all traffic using HTTPS or a VPN or sends the traffic over trusted internal interfaces (such as the loopback device). For small-scale experiments with up to 32 subjects, we found that a standard-issue laptop with 8 gigabytes of RAM as well as 4 cores with 8 threads provides sufficient performance. We recommend that the experimenter has an uplink of at least 10 megabit per second. The current maximum number of subjects is 95, for which we recommend 16 gigabytes of RAM and a superior uplink. 6",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Introduction"
        },
        {
            "text": "In this section we briefly describe the most important features of z-Tree unleashed and resulting benefits for experimenters and lab administrators. While the installation of z-Tree itself has always been as simple as possible, the setup of a productive laboratory environment requires some additional steps like providing a local network and a shared file storage.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Features of z-Tree unleashed"
        },
        {
            "text": "With z-Tree unleashed we simplify this setup to the absolute minimum (see Figure 2 , panel b)). Every modern desktop computer or laptop can be used to set up an entire laboratory. All z-Tree-related network communication and file transfers can be handled in a single machine and all necessary software is provided in a single virtual machine image file that can easily be mounted in a hypervisor.",
            "cite_spans": [],
            "ref_spans": [
                {
                    "start": 74,
                    "end": 82,
                    "text": "Figure 2",
                    "ref_id": "FIGREF1"
                }
            ],
            "section": "Features of z-Tree unleashed"
        },
        {
            "text": "Generations of experimental economists have been trained to use z-Tree and over time their experience and knowledge has become a valuable resource in many behavioral disciplines. Until now this expertise is only slowly spreading to other software tools and there is no easy way to implement existing z-Tree code in alternative software tools.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Features of z-Tree unleashed"
        },
        {
            "text": "With z-Tree unleashed it is possible to use existing z-Tree programs without any adjustments. Not only can experimenters use their already designed experiments in a remote environment, but new experiments can still be developed on the foundation of established code and procedures. Another advantage is that all media files, predefined tables or external programs that are embedded into a z-Tree file can be stored on one device. The integrated file server obviates the need for a shared network storage that is usually used to grant file access to the z-Leaf clients.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Features of z-Tree unleashed"
        },
        {
            "text": "The second group that eminently benefits from the simplified architecture of z-Tree unleashed are the administrators and managers of behavioral laboratories around the world. Not only does the compact architecture of our tool allow for low-performance, and therefore also low-cost, client computer hardware, it also minimizes maintenance and update efforts for lab administrators. Since participant devices only need to handle the z-Tree video stream in a web browser, more expensive office-type computers can be replaced by inexpensive and even single board computers. The same is true for the software that is needed for the client computers. With z-Tree unleashed it is possible to set up the clients without any licensing costs for operating systems or other software. These ultra compact devices only need a minimal setup to receive and display the video stream, and can easily be replaced if necessary. Moreover, these lean single board computers have about twice the service life of standard desktop computers and are therefore the more environmentally friendly choice (cf. Pattinson et al. (2015) ).",
            "cite_spans": [
                {
                    "start": 1081,
                    "end": 1104,
                    "text": "Pattinson et al. (2015)",
                    "ref_id": "BIBREF8"
                }
            ],
            "ref_spans": [],
            "section": "Features of z-Tree unleashed"
        },
        {
            "text": "An additional benefit for laboratory administrators comes from the fact that all upgrades, backups and other maintenance measures can be done on a single device. Different versions of z-Tree and z-Leaf can easily be managed in a single folder without the need to distribute the z-Leafs to dozens of client computers. Without the additional (external) file server used in classic z-Tree setups all components of an experiment (e.g. instructions, media files, data files and program files) can also be stored in a single folder. Hence, organizing a laboratory with a large number of independent experimenters becomes much easier.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Features of z-Tree unleashed"
        },
        {
            "text": "Our tool not only helps reduce the efforts and costs for setting up and maintaining a traditional computerized laboratory, but at the same time allows for a tremendous extension of z-Tree's field of application. In this section we outline four important use cases with different levels of mobility for organizing, conducting and participating in experimental sessions. We start with the most common case of a (i) local laboratory setup, followed by a (ii) mobile laboratory setup, a (iii) remote setup and a (iv) tremendously mobile setup.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Use cases"
        },
        {
            "text": "Up until now most economic laboratories rely on a closed network with a dedicated file server to simplify the implementation of z-Tree's classic client-server architecture. The virtualized architecture of z-Tree unleashed (see Figures 2 and 3) renders this closed setup redundant. That does not mean that existing hardware can no longer be used. The opposite is true; all pre-existing hardware components can still be used without major changes.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Local laboratory setup"
        },
        {
            "text": "The only step that is necessary to switch from the existing setup to our tool is the installation of the z-Tree unleashed server on a computer that can be used as an experimenter's device (e.g. an existing z-Tree server). On account of the virtualization it is not even necessary to choose between the existing setup and z-Tree unleashed. By using a virtual machine that hosts the z-Tree unleashed server on the existing computer, both setups can be used in parallel.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "J o u r n a l P r e -p r o o f"
        },
        {
            "text": "Since probably all client computers use an operating system that comes with a web browser, changes to the clients are not necessary. At the same time the pre-existing file server can still be used as a backup device for documentation, z-Tree files and raw data.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "J o u r n a l P r e -p r o o f"
        },
        {
            "text": "The benefits of virtualization become even clearer in a mobile laboratory setup. The use of a wired local network in a portable laboratory with 20 or more clients is logistically challenging to say the least. It also puts anachronistically high requirements on the used client hardware, e.g. RJ-45 jacks for ethernet cables.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Mobile laboratory setup"
        },
        {
            "text": "One alternative could be the use of a private Wi-Fi network; but even then additional hardware would be required. Moreover, many users report issues using a wireless connection to connect the z-Leaf clients to the server.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Mobile laboratory setup"
        },
        {
            "text": "In contrast to that z-Tree unleashed does not need a dedicated network, neither in a wired setup nor in a wireless one. It can be used in any public, private or university Wi-Fi. The only requirement is that the z-Tree unleashed server is reachable via its IP address. Just as for the local laboratory setup our architecture allows for minimal requirements on the part of the client devices. It is even possible that participants use their own devices, as long as these devices can connect to the Internet.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Mobile laboratory setup"
        },
        {
            "text": "Given that participants can use their own devices, z-Tree unleashed is also ready to be used remotely. That means the server can be set up in a local laboratory while participants are invited to join the experiment from wherever they are. This of course brings up different challenges for the timing of interactive experiments, that is all participants have to be connected to the experiment server at a particular time. That, of course, is not only true for our setup, but for all online experiments.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Remote setup"
        },
        {
            "text": "In contrast to other online experiment platforms our setup does not require an explicit routine to handle temporary dropouts. Lost connections are reestablished by refreshing the page in the browser. Even if participants accidentally close the browser window, they just have to click the link from 7 J o u r n a l P r e -p r o o f the invitation mail again in order to continue the experiment at the exact screen they stopped at.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Remote setup"
        },
        {
            "text": "The idea of a maximally mobile laboratory can be pushed even further, by also virtualizing the used network. This way the whole laboratory setup can be boxed and used on the go. Even a cellular network would be sufficient to conduct an experiment, and a computerized data collection with z-Tree can take place almost anywhere in the field.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Tremendously mobile setup"
        },
        {
            "text": "The tremendously mobile setup is especially useful for cross-cultural experiments, where the same z-Tree program is used in many different regions of the world. Instead of setting up an identical laboratory in every country, the researcher can simply bring her own lab with her in a briefcase. The detailed requirements and architecture of such a setup with a virtual private network (VPN) are described in Section 6.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Tremendously mobile setup"
        },
        {
            "text": "z-Tree unleashed integrates several z-Leaf clients into a single computer (the \"server\"). These z-Leaf clients can then be securely streamed over the network to subjects who participate in the experiment. The basic architecture is depicted in Figure 4 .",
            "cite_spans": [],
            "ref_spans": [
                {
                    "start": 243,
                    "end": 251,
                    "text": "Figure 4",
                    "ref_id": "FIGREF3"
                }
            ],
            "section": "Architecture"
        },
        {
            "text": "The z-Tree unleashed server runs on GNU/Linux. For each individual z-Leaf client, a separate Unix user account on that server is created. 7 This setup segregates different users from each other and makes any unintended interference impossible. Even if a subject were able to break out of the confines of the experiment, she would not be able to disturb the overall administration of the experiment. These individual Unix users are the analogue to separate computers in a stationary experimental economics laboratory.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Architecture"
        },
        {
            "text": "Upon commencement of an experiment, each Unix user executes a chain of commands. This is done automatically by the scripts that we provide. It is essential that z-Tree and each z-Leaf are emulated on GNU/Linux through Wine (cf. Amstadt and Johnson (1994) ), an open-source compatibility layer that allows running Microsoft Windows executables on Unix-like operating systems. Each z-Leaf automatically connects to z-Tree over the loopback interface. 8 For each user, we initialize a headless X Window System session (Scheifler et al. (1997) ) and emulate a physical screen. A VNC server is then used to continually photograph the emulated screen and allow the streaming thereof over the network. However, the VNC server accepts connections only on the loopback device to preclude unwanted access from outside. noVNC 9 is an open-sourced programming library and application that allows web browsers to connect to a VNC server. For each user, a separate instance of noVNC is run; the noVNC server listens for HTTP connections on a user-defined network address and port and serves a simple portal that allows dialing in to the VNC session. Ordinarily, interacting with a VNC session requires the installation of separate software, but noVNC obviates that requirement. Hence, z-Tree unleashed enables subjects to participate by using only a web browser.",
            "cite_spans": [
                {
                    "start": 228,
                    "end": 254,
                    "text": "Amstadt and Johnson (1994)",
                    "ref_id": "BIBREF0"
                },
                {
                    "start": 515,
                    "end": 539,
                    "text": "(Scheifler et al. (1997)",
                    "ref_id": "BIBREF11"
                }
            ],
            "ref_spans": [],
            "section": "Architecture"
        },
        {
            "text": "To ensure privacy and security, an additional layer of networking software is used that is not shown in Figure 4 . Firstly, noVNC's HTTP server only listens on the loopback interface. Secondly, we reverse proxy requests by subjects to noVNC's HTTP server. This is achieved through the use of a web server such as nginx that acts as the reverse proxy combined with a properly issued X.509 certificate for HTTPS (see Tanenbaum and Wetherall (2010) , section 8.9.3). 10 Simply put, subjects access a HTTPS protected 9 https://novnc.com/info.html 10 X.509 certificates can be procured commercially, but research institutes and services like Let's Encrypt frequently permit the issuance of universally recognized certificates free of charge. X.509 certificates can also be self-signed, but these certificates create a warning in modern web browsers as the identity of the site using the certificate cannot be verified. website using a web browser. On that website, they are logged in to the experiment and interact with z-Leaf. Upon receipt, their inputs are internally forwarded from the reverse proxy (nginx) to noVNC's built-in HTTP server, which is listening on the loopback device. 11 noVNC in turn converts and transmits the inputs to the VNC server, which performs the desired action over the X Window System. New frames that appear on the emulated screen (such as a dialog that appears in z-Leaf) are likewise transmitted from the X Window System to the VNC server. noVNC reads these inputs and converts and transmits them to the reverse proxy. The reverse proxy performs cryptographic primitives and sends out TCP/IP packets that are sent over the Internet stack to the subject's digital computer. The subject's digital computer ultimately displays the new frame, allowing the participant to react.",
            "cite_spans": [
                {
                    "start": 415,
                    "end": 445,
                    "text": "Tanenbaum and Wetherall (2010)",
                    "ref_id": null
                }
            ],
            "ref_spans": [
                {
                    "start": 104,
                    "end": 112,
                    "text": "Figure 4",
                    "ref_id": "FIGREF3"
                }
            ],
            "section": "Architecture"
        },
        {
            "text": "This setup requires that the server on which z-Tree unleashed is running is globally reachable via its IP address. In most cases, this will require a full-fledged setup in a datacenter, such as a Virtual Private Server (VPS) with sufficient bandwidth and computing power. However, many Internet providers offer residential customers an (ephemeral) public IPv4 address and port forwardings to devices within the LAN. In these cases, z-Tree unleashed can be installed and used from home networks. Additionally, it is possible to direct subjects to a user-friendly hostname by using Dynamic DNS. In instances where this is not feasible, we provide a method using a VPN and a globally reachable \"Thin\" server in Section 6.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Architecture"
        },
        {
            "text": "In both the model of Section 4 as well as that of Section 6, the basic steps are identical. A z-Tree unleashed server provides facilities to start, run, control and terminate an experiment. One instance of an experiment is known as a session. As soon as a session is initiated, URLs are generated that allow both the experimenter as well as participants to access the experiment. Internally, all the software described in Sections 4 and/or 6 is initialized. That is, the experimenter receives a set of + 1 URLs, the first of which streams the graphical user interface of z-Tree. All remaining URLs may be sent out to participants, who can subsequently access the z-Leaf interface and hence, the experiment. No password entry is required because passwords are included as part of the URL. In previous versions of z-Tree unleashed, Our virtual machine image comes with a self-signed X.509 certificate for testing purposes.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Conducting an experiment"
        },
        {
            "text": "11 Since sensitive data is only ever transferred over the (internal) loopback device or encrypted and transferred over authenticated channels, z-Tree unleashed reachest the highest standards of data safety. Indeed, z-Tree unleashed is more secure than z-Tree over switched Ethernet (the standard lab configuration) since the TCP/IP packets sent and received by z-Tree can be eavesdropped at any point between the z-Leafs and the z-Tree server. This is impossible in z-Tree unleashed, which does not require a secure network.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Conducting an experiment"
        },
        {
            "text": "J o u r n a l P r e -p r o o f each subject obtained one port which had to be globally reachable. This presented challenges in some corporate networks in which websites under non-standard ports cannot be opened. In the most recent version of z-Tree unleashed, a single port, such as the HTTPS standard port 443, can be used for all subjects. 12 The necessary z-Tree program files can be transferred into a shared directory (/share) using SFTP and the graphical interface of the virtual machine.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Conducting an experiment"
        },
        {
            "text": "Our scripts start a predefined number of virtual clients and sets the names with which they identify themselves to z-Tree (e.g. in the clients table) accordingly. At this stage, all passwords to VNC are changed in order to ensure that only intended subjects participate in this specific study. The resolution of the virtual client screens can be set during the initial setup or at a later point by editing the settings. As z-Leafs are sensitive to changes in screen resolution (e.g. overlapping boxes) the experimenter might define it to fit her needs. Furthermore it is possible to set the font size of the z-Leafs globally (i.e. for all radio button labels and OK buttons). This feature significantly improves the predictability of the screen output as it will not depend on the resolution of the client computer. After a short period all clients appear in the clients table of z-Tree. Alternatively, an add-on, ztupreleaf, allows to display a dialog with a button on the emulated screen instead of directly starting z-Leaf. 13 The invocation of that button executes that client's z-Leaf, making clients appear in the clients' table only as soon as subjects signal their readiness to participate. The \"Control Center\", an application to monitor more precisely which participants are online, has also been recently included in our software package. It allows the monitoring of subjects in real time.",
            "cite_spans": [
                {
                    "start": 1027,
                    "end": 1029,
                    "text": "13",
                    "ref_id": null
                }
            ],
            "ref_spans": [],
            "section": "Conducting an experiment"
        },
        {
            "text": "The next steps depend on the intended use case. It is crucial that the server can be accessed by participants and the server is reachable through one of the methods outlined in Sections (4) or (6). The first use case is the local setup in an existing lab. In this case the experimenter sends each stationary client computer an individual link which will be opened in a full screen browser window by using the lab's administration software like Labcontrol. 14 It is trivial to achieve that the shown usernames of z-Leafs match the number of each seat or cabin booth. In this sense the experimenter might give special attendance to a certain subject should they encounter an issue and the subjects' experience does not deviate from running z-Tree directly and without our scripts in the lab.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Conducting an experiment"
        },
        {
            "text": "In times where personal attendance to lab experiments is impossible the J o u r n a l P r e -p r o o f second use case is vital for conducting experiments with z-Tree. In this case subjects use their own computers to partake in the experiment. The unique and individual URL to access the z-Leaf is sent to the participants via e-mail. Participants only have to click the link provided in the e-mail. They will be automatically connected and logged in, and are ready to start the experiment. Sending these personalized links gives an opportunity to accurately track and support specific subjects in the case of questions or problems.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Conducting an experiment"
        },
        {
            "text": "For situations in which personalized links cannot be sent out, we have developed ztu-singlelink, an add-on which allows the creation of sessionwide links. 15 Among other things, this makes z-Tree unleashed fully \"classroom ready\".",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Conducting an experiment"
        },
        {
            "text": "Starting the experiment itself is straightforward as the experimenter just needs to click \"Start Treatment\" inside z-Tree in her administrator browser window. During the experiment she might use z-Tree in the same way as in the lab and view all available tables and submitted input. At this point z-Tree produces its output in a specified folder. 16 After the experiment is finished the experimenter might retrieve her resulting Excel file and other generated files via SFTP from inside the virtual machine.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Conducting an experiment"
        },
        {
            "text": "z-Tree unleashed is especially resilient when errors occur. Not only is it possible to restart individual z-Leafs, but it is also possible to reuse individual links from an earlier session, making emergency restarts almost painless. Finally, its resilience extends to subjects. Should subjects experience any kind of interruption, perhaps from an unreliable Internet connection or because their computer is disconnected from its power supply, it is sufficient that they reopen their individual link. Even if ztu-singlelink is used, this holds: Cookies are stored on each subject's device, ensuring that they will be redirected to their particular z-Leaf screen. Nevertheless, adjustments should be made to experiments to ensure that they can carry on even if a subject drops out completely.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Conducting an experiment"
        },
        {
            "text": "It is currently not possible to embed sounds or videos into experiments conducted using z-Tree unleashed. These issues are unlikely to be solved because the protocol that underpins the streaming of z-Leaf over the Internet, RFB, does not support audio and is ill-equipped for moving pictures.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Conducting an experiment"
        },
        {
            "text": "As stated earlier, the z-Tree unleashed server requires a globally reachable IP address to act as an endpoint for the interconnection with subjects. How-J o u r n a l P r e -p r o o f ever, with little additional overhead, z-Tree unleashed permits the use of ordinary hardware to achieve its ends. While the proliferation of IPv4 network address translation (NAT, cf. Tanenbaum and Wetherall (2010), pp. 452-455) in consumer-grade internetworking links has alleviated some of the challenges associated with the lack of sufficient IPv4 address space (which made giving each Internet-capable device its own IPv4 address impossible), it has also made it generally impossible to reach a z-Tree unleashed server that is within a residential network. Hence, in a normal setup as in Figure 4 , a server that is run from \"at home\" could not be accessed by subjects as it is usually behind a router that provides NAT. On the other hand, IPv6, where available, was designed such that each device receives a globally unique and globally reachable IPv6 address. But router firewalls frequently restrict IPv6 traffic and shield devices from ostensibly unwanted traffic. Even where \"port forwardings\" are possible, setting them up may expose the server to unwanted and dangerous traffic. Finally, setting up Dynamic DNS or relying on port forwardings at all may be infeasible in scenarios where the z-Tree unleashed server is used in a mobile configuration.",
            "cite_spans": [
                {
                    "start": 358,
                    "end": 412,
                    "text": "(NAT, cf. Tanenbaum and Wetherall (2010), pp. 452-455)",
                    "ref_id": null
                }
            ],
            "ref_spans": [
                {
                    "start": 776,
                    "end": 784,
                    "text": "Figure 4",
                    "ref_id": "FIGREF3"
                }
            ],
            "section": "The tremendously mobile laboratory"
        },
        {
            "text": "If consumer-grade hardware and network links are to be used with z-Tree unleashed, we must make the machine which subjects connect to and participate on globally reachable, although within parameters and perhaps only indirectly. We also must provide a secure and authenticated method to allow subjects to connect with the server. All of these ends are accomplished through the use of a virtual private network (VPN), see Figure 5 .",
            "cite_spans": [],
            "ref_spans": [
                {
                    "start": 421,
                    "end": 429,
                    "text": "Figure 5",
                    "ref_id": "FIGREF4"
                }
            ],
            "section": "The tremendously mobile laboratory"
        },
        {
            "text": "In this model, subjects do not establish a direct connection with the z-Tree unleashed server. Instead, they establish a connection with a dedicated \"Thin\" server, which in turn routes the traffic to the z-Tree unleashed server over the VPN. Conceptually, the \"Thin\" server has only three requirements: to be globally reachable by subjects; to provide an entry and exit point for the VPN; to route traffic between the subjects and the z-Tree unleashed server. 17 Essentially, we offer a private port forwarding that is independent of the z-Tree unleashed server's reachability and never exposes the server to insecure or unwanted traffic.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "The tremendously mobile laboratory"
        },
        {
            "text": "WireGuard (see Donenfeld (2017)) is a recent protocol and software tool for the establishment of virtual private networks. WireGuard enables users to establish secure connections between at least two peers even over insecure networks. The connection between two peers is always authenticated and end-to-end-encrypted using the well-known Elliptic Curve Diffie-Hellman key exchange and related cryptographic protocols (cf. Barker et al. (2017) ). We recommend the use of WireGuard because of its simplicity. In our set of scripts, we provide a facility to automatically generate WireGuard con- figuration files for both the \"Thin\" server as well as the z-Tree unleashed server. WireGuard assigns to each peer a private static IP address. Indeed, this setup allows experimenters to run a virtual machine that handles all details of z-Tree unleashed on their own digital computers at home. Since this virtual machine and the \"Thin\" server are interconnected through Wire-Guard, subjects only interact with the \"Thin\" server, which can have a user-friendly domain name that points to the \"Thin\" server's public static IP. WireGuard is seamlessly integrated into an existing networking infrastructure and it straightforwardly makes z-Tree unleashed available through NAT and similar complications. This setup does not require dynamic DNS. We offer example scripts to interact with the \"Thin\" server. The \"Thin\" server must be set up to minimally act as a router, a WireGuard peer and an nginx server. A tutorial sketch for setting up a FreeBSD \"Thin\" server is also available in our repository. The target audience for these scripts are experienced Unix system administrators. However, once a \"Thin\" server is set up, it can be easily shared between many researchers or access rented out on a commercial basis.",
            "cite_spans": [
                {
                    "start": 422,
                    "end": 442,
                    "text": "Barker et al. (2017)",
                    "ref_id": "BIBREF2"
                }
            ],
            "ref_spans": [],
            "section": "The tremendously mobile laboratory"
        },
        {
            "text": "As mentioned previously, the z-Tree unleashed server's noVNC instances create a HTTP server. We now configure each instance of noVNC such that the HTTP server binds to the z-Tree unleashed server's static private IP address instead of the loopback device. As soon as the \"Thin\" server and the z-Tree unleashed server are connected through WireGuard, internal traffic can flow between the two servers using these internally assigned IP addresses. Binding to the static private IP address ensures that only other devices in the VPN can access the service, such as the \"Thin\" server. 18 By reverse proxying requests to the \"Thin\" proxy over the WireGuard interface to the z-Tree unleashed server, we enable subjects to securely access the interface over HTTPS even as the actual traffic is redirected from the \"Thin\" server to the z-Tree unleashed server and vice versa. Subjects do not notice that the actual server is not the \"Thin\" server, and hence the forwarding is transparent. The strong encryption used by WireGuard makes reverse proxying HTTP over the VPN completely secure and even enables experimenters to roam between networks without interruptions, cf. Donenfeld (2017) . In other words, this mode of operation views the reverse proxy and the z-Tree unleashed server as distinct physical devices and conceptually moves the z-Tree unleashed server away from the subject.",
            "cite_spans": [
                {
                    "start": 1163,
                    "end": 1179,
                    "text": "Donenfeld (2017)",
                    "ref_id": "BIBREF4"
                }
            ],
            "ref_spans": [],
            "section": "The tremendously mobile laboratory"
        },
        {
            "text": "The WireGuard VPN enables any computer with sufficient hardware and uplink to act as a z-Tree unleashed server, not just globally reachable servers. This special derivative architecture makes the lab tremendously mobile. It only has one stationary component: The \"Thin\" server, which can simultaneously be used for many other purposes. However, in contrast to other use cases, neither the subjects' computers nor the experimenter's computer must meet demanding requirements such as global reachability. This laboratory can be put in a briefcase.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "The tremendously mobile laboratory"
        },
        {
            "text": "Running many clients on a single machine imposes significant strain on the hardware. We reduce each processor's load by allocating subsets of z-Leaf instances to different processor cores, but withhold one solely for the central z-Tree instance. 19 The resulting performance improvements facilitate the productive use of z-Tree unleashed. Using a minimal graphical interface to start the clients' graphical user interfaces we were able to reduce the memory load to a very low level. As can be seen in Figure 6 , a full setup of z-Tree unleashed using 32 connected clients running a resource demanding experiment did not use more than four gigabytes of RAM. Moreover, using our environment for conducting a regular experiment we found a steady memory consumption which is even available in most personal computers. But in order to provide participants a reasonably smooth user experience, we recommend, given these observations, the use of highly parallelizable hard-ware and at least 4 processor cores for running complex experiments. While this appears to make the use of dedicated hardware for the single purpose of running z-Tree unleashed more attractive, the cost of such hardware in datacenters may be substantial. In most cases, it will also not be strictly necessary to run the z-Tree unleashed server for 24 hours a day.",
            "cite_spans": [
                {
                    "start": 246,
                    "end": 248,
                    "text": "19",
                    "ref_id": null
                }
            ],
            "ref_spans": [
                {
                    "start": 501,
                    "end": 509,
                    "text": "Figure 6",
                    "ref_id": null
                }
            ],
            "section": "Performance, requirements and network usage"
        },
        {
            "text": "Another surprise was that the uplink bandwidth available in our tests was low and at the same time we experienced a latency when transmitting inputs of almost zero. We expected to need a very fast Internet connection, but we were surprised to find that z-Tree unleashed was highly responsive. During testing we used a consumer-grade Internet link and did not notice any latency or interruptions. As depicted in Figure 6 our test session created only a total traffic of a few dozen megabytes. Therefore it is well possible to use z-Tree unleashed over a cellular data link.",
            "cite_spans": [],
            "ref_spans": [
                {
                    "start": 411,
                    "end": 419,
                    "text": "Figure 6",
                    "ref_id": null
                }
            ],
            "section": "Performance, requirements and network usage"
        },
        {
            "text": "So far, z-Tree unleashed has been used in a number of online experiments in several countries, including Germany, Greece, Japan and the United States. These sessions varied widely in the number of participants, but all performance-related feedback we received was related to insufficient bandwidth or inefficient programming in z-Tree. Naturally, since z-Tree unleashed executes all programs on a single machine compared to a PC laboratory which acts as a pool of decentralized computing power, paying obeisance to efficient programming techniques is especially important. As an illustration, consider an hour-long experiment which Grossmann conducted using z-Tree unleashed: 72 subjects participated, and z-Tree unleashed was run on a cluster of two separate machines (so, 36 subjects per machine). Despite complicated matching rules and intricate interactions and a large number of stages, the experiment was entirely fluid and was lauded by subjects afterwards. Generally, performance-related issues do not relate to z-Tree unleashed directly, but instead to a lack of bandwidth or, more importantly, RAM and CPU availability. Additionally, we expect that recently introduced changes that enable the use of a X Window Manager will make the overall experience even smoother. We have also received feedback that this change improved support for non-Latin locales.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Performance, requirements and network usage"
        },
        {
            "text": "In this paper, we presented z-Tree unleashed, a novel tool with a set of scripts to enable the administration of economic laboratory experiments created with z-Tree over the Internet. z-Tree unleashed enables experimenters and lab administrators to \"put the lab in a briefcase\", and it grants participants the opportunity to rely on secure and resilient communication channels while participating from anywhere in the world.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Conclusion"
        },
        {
            "text": "The two main challenges involved with z-Tree unleashed are the hardware and the network bottleneck. But as outlined in the previous sections, Figure 6 : On the left: system utilization while running GIMS, a heavy load market simulation (see Palan (2015) ). On the right: a regular public goods game. Usage was recorded every half second.",
            "cite_spans": [
                {
                    "start": 241,
                    "end": 253,
                    "text": "Palan (2015)",
                    "ref_id": "BIBREF7"
                }
            ],
            "ref_spans": [
                {
                    "start": 142,
                    "end": 150,
                    "text": "Figure 6",
                    "ref_id": null
                }
            ],
            "section": "Conclusion"
        },
        {
            "text": "J o u r n a l P r e -p r o o f z-Tree unleashed has moderate processing power and bandwidth requirements. Other challenges that were traditionally salient with the implementation of online experiments, such as the global reachability of the server itself, have been overcome through the use of a VPN. We have also addressed data privacy concerns by only using authenticated and end-to-end-encrypted networking channels. Our tool cannot only be used to simplify existing laboratory setups and take them to the Internet, but also to build low-budget laboratories that can be used in every place with any network connection, cellular, Wi-Fi or LAN. z-Tree unleashed can also help to reduce downtime by allowing for a simple replacement of server and client hardware, and by being able to switch to another network easily. Finally our tool can also help to reduce the carbon footprint of experimental labs by encouraging the use of \"thin\" hardware with low power usage and longer service times.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "17"
        },
        {
            "text": "z-Tree unleashed has been released under a permissive free software license, allowing anyone to use, adapt and redistribute the software package. Our license is a derivative of the Mozilla Public License 2.0 with an additional clause requiring the citation of this paper in all academic publications that make use of the z-Tree unleashed scripts or derivatives thereof.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "17"
        },
        {
            "text": "In principle, the methodology outlined here applies to any stationary lab software. With little effort, our scripts could be adopted such that other software can be \"streamed\" over the Internet. We invite discussion and contributions to our scripts on the GitLab repository and the Google Group of z-Tree unleashed. 20 On our project website, we provide a royalty-free virtual machine image that can be used on dedicated hardware as well as for the occasional experiment. This virtual image contains all z-Tree unleashed scripts and allows lab managers and researchers the flexibility of risklessly experimenting with different setups. An additional advantage is that firstly, the virtual machine image is an isolated container that can be trivially transferred between digital computers; and that secondly, many adjustments can be made such as an increase of the number of processor cores that are available to the virtual machine. Our virtual machine has been created in and can be imported into Oracle VM VirtualBox, a free software hosted hypervisor. It is essentially \"plug and play\".",
            "cite_spans": [
                {
                    "start": 316,
                    "end": 318,
                    "text": "20",
                    "ref_id": null
                }
            ],
            "ref_spans": [],
            "section": "17"
        },
        {
            "text": "We acknowledge funding by the European Research Council (ERC) under the European Union's Horizon 2020 research and innovation program under",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Acknowledgments"
        }
    ],
    "bib_entries": {
        "BIBREF0": {
            "ref_id": "b0",
            "title": "Wine",
            "authors": [
                {
                    "first": "B",
                    "middle": [],
                    "last": "Amstadt",
                    "suffix": ""
                },
                {
                    "first": "M",
                    "middle": [
                        "K"
                    ],
                    "last": "Johnson",
                    "suffix": ""
                }
            ],
            "year": 1994,
            "venue": "Linux Journal",
            "volume": "",
            "issn": "4es",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF1": {
            "ref_id": "b1",
            "title": "nodeGame: Real-time, synchronous, online experiments in the browser",
            "authors": [
                {
                    "first": "S",
                    "middle": [],
                    "last": "Balietti",
                    "suffix": ""
                }
            ],
            "year": 2017,
            "venue": "Behavior research methods",
            "volume": "49",
            "issn": "",
            "pages": "1696--1715",
            "other_ids": {}
        },
        "BIBREF2": {
            "ref_id": "b2",
            "title": "Recommendation for pair-wise key-establishment schemes using discrete logarithm cryptography",
            "authors": [
                {
                    "first": "E",
                    "middle": [],
                    "last": "Barker",
                    "suffix": ""
                },
                {
                    "first": "L",
                    "middle": [],
                    "last": "Chen",
                    "suffix": ""
                },
                {
                    "first": "S",
                    "middle": [],
                    "last": "Keller",
                    "suffix": ""
                },
                {
                    "first": "A",
                    "middle": [],
                    "last": "Roginsky",
                    "suffix": ""
                },
                {
                    "first": "A",
                    "middle": [],
                    "last": "Vassilev",
                    "suffix": ""
                },
                {
                    "first": "Davis",
                    "middle": [],
                    "last": "",
                    "suffix": ""
                },
                {
                    "first": "R",
                    "middle": [],
                    "last": "",
                    "suffix": ""
                }
            ],
            "year": 2017,
            "venue": "National Institute of Standards and Technology",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF3": {
            "ref_id": "b3",
            "title": "oTree-An open-source platform for laboratory, online, and field experiments",
            "authors": [
                {
                    "first": "D",
                    "middle": [
                        "L"
                    ],
                    "last": "Chen",
                    "suffix": ""
                },
                {
                    "first": "M",
                    "middle": [],
                    "last": "Schonger",
                    "suffix": ""
                },
                {
                    "first": "C",
                    "middle": [],
                    "last": "Wickens",
                    "suffix": ""
                }
            ],
            "year": 2016,
            "venue": "Journal of Behavioral and Experimental Finance",
            "volume": "9",
            "issn": "2",
            "pages": "88--97",
            "other_ids": {}
        },
        "BIBREF4": {
            "ref_id": "b4",
            "title": "WireGuard: Next Generation Kernel Network Tunnel",
            "authors": [
                {
                    "first": "J",
                    "middle": [
                        "A"
                    ],
                    "last": "Donenfeld",
                    "suffix": ""
                }
            ],
            "year": 2017,
            "venue": "",
            "volume": "15",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF5": {
            "ref_id": "b5",
            "title": "z-Tree: Zurich toolbox for ready-made economic experiments",
            "authors": [
                {
                    "first": "U",
                    "middle": [],
                    "last": "Fischbacher",
                    "suffix": ""
                }
            ],
            "year": 2007,
            "venue": "Experimental economics",
            "volume": "10",
            "issn": "2",
            "pages": "171--178",
            "other_ids": {}
        },
        "BIBREF6": {
            "ref_id": "b6",
            "title": "Psynteract: A flexible, cross-platform, open framework for interactive experiments",
            "authors": [
                {
                    "first": "F",
                    "middle": [],
                    "last": "Henninger",
                    "suffix": ""
                },
                {
                    "first": "P",
                    "middle": [
                        "J"
                    ],
                    "last": "Kieslich",
                    "suffix": ""
                },
                {
                    "first": "B",
                    "middle": [
                        "E"
                    ],
                    "last": "Hilbig",
                    "suffix": ""
                }
            ],
            "year": 2017,
            "venue": "Behavior research methods",
            "volume": "49",
            "issn": "5",
            "pages": "1605--1614",
            "other_ids": {}
        },
        "BIBREF7": {
            "ref_id": "b7",
            "title": "GIMS-Software for asset market experiments",
            "authors": [
                {
                    "first": "S",
                    "middle": [],
                    "last": "Palan",
                    "suffix": ""
                }
            ],
            "year": 2015,
            "venue": "Journal of behavioral and experimental finance",
            "volume": "5",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF8": {
            "ref_id": "b8",
            "title": "Chapter 14 -Thin-Client and Energy Efficiency",
            "authors": [
                {
                    "first": "C",
                    "middle": [],
                    "last": "Pattinson",
                    "suffix": ""
                },
                {
                    "first": "R",
                    "middle": [],
                    "last": "Cross",
                    "suffix": ""
                },
                {
                    "first": "A.-L",
                    "middle": [],
                    "last": "Kor",
                    "suffix": ""
                }
            ],
            "year": 2015,
            "venue": "Green Information Technology",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF10": {
            "ref_id": "b10",
            "title": "Software for continuous game experiments",
            "authors": [
                {
                    "first": "J",
                    "middle": [],
                    "last": "Pettit",
                    "suffix": ""
                },
                {
                    "first": "D",
                    "middle": [],
                    "last": "Friedman",
                    "suffix": ""
                },
                {
                    "first": "C",
                    "middle": [],
                    "last": "Kephart",
                    "suffix": ""
                },
                {
                    "first": "R",
                    "middle": [],
                    "last": "Oprea",
                    "suffix": ""
                }
            ],
            "year": 2014,
            "venue": "Experimental Economics",
            "volume": "17",
            "issn": "4",
            "pages": "631--648",
            "other_ids": {}
        },
        "BIBREF11": {
            "ref_id": "b11",
            "title": "X Window System: Core and Extension Protocols",
            "authors": [
                {
                    "first": "R",
                    "middle": [
                        "W"
                    ],
                    "last": "Scheifler",
                    "suffix": ""
                },
                {
                    "first": "J",
                    "middle": [],
                    "last": "Gettys",
                    "suffix": ""
                },
                {
                    "first": "A",
                    "middle": [],
                    "last": "Mento",
                    "suffix": ""
                },
                {
                    "first": "D",
                    "middle": [],
                    "last": "Converse",
                    "suffix": ""
                }
            ],
            "year": 1997,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        }
    },
    "ref_entries": {
        "FIGREF0": {
            "text": ": z-Tree usage at the Cologne Laboratory for Economic Research (CLER).",
            "latex": null,
            "type": "figure"
        },
        "FIGREF1": {
            "text": ": a) The client-server architecture of z-Tree; b) the boxed and simplified architecture of z-Tree unleashed.",
            "latex": null,
            "type": "figure"
        },
        "FIGREF2": {
            "text": "A screenshot of a live session in z-Tree unleashed.",
            "latex": null,
            "type": "figure"
        },
        "FIGREF3": {
            "text": "The z-Tree unleashed architecture. The reverse proxy is not shown.",
            "latex": null,
            "type": "figure"
        },
        "FIGREF4": {
            "text": "The z-Tree unleashed architecture with tunneling. The reverse proxy is not shown.",
            "latex": null,
            "type": "figure"
        }
    },
    "back_matter": [
        {
            "text": "We thank Urs Fischbacher for supporting our idea and allowing us to use the name z-Tree.We thank two anonymous referees for helpful comments and suggestions.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "acknowledgement"
        }
    ]
}