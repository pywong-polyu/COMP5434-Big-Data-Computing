{
    "paper_id": "07247fdbaae6cbcb277c53e06bbec4f6572ad9fd",
    "metadata": {
        "title": "The predictive skill of convolutional neural networks models for disease forecasting",
        "authors": [
            {
                "first": "Kookjin",
                "middle": [],
                "last": "Leeid",
                "suffix": "",
                "affiliation": {
                    "laboratory": "",
                    "institution": "Arizona State University",
                    "location": {
                        "settlement": "Tempe",
                        "region": "AZ",
                        "country": "United States of America"
                    }
                },
                "email": "*kookjin.lee@asu.edu"
            },
            {
                "first": "Jaideep",
                "middle": [],
                "last": "Ray",
                "suffix": "",
                "affiliation": {
                    "laboratory": "",
                    "institution": "Sandia National Laboratories",
                    "location": {
                        "settlement": "Livermore",
                        "region": "CA",
                        "country": "United States of America"
                    }
                },
                "email": ""
            },
            {
                "first": "Cosmin",
                "middle": [],
                "last": "Safta",
                "suffix": "",
                "affiliation": {
                    "laboratory": "",
                    "institution": "Sandia National Laboratories",
                    "location": {
                        "settlement": "Livermore",
                        "region": "CA",
                        "country": "United States of America"
                    }
                },
                "email": ""
            }
        ]
    },
    "abstract": [
        {
            "text": "In this paper we investigate the utility of one-dimensional convolutional neural network (CNN) models in epidemiological forecasting. Deep learning models, in particular variants of recurrent neural networks (RNNs) have been studied for ILI (Influenza-Like Illness) forecasting, and have achieved a higher forecasting skill compared to conventional models such as ARIMA. In this study, we adapt two neural networks that employ one-dimensional temporal convolutional layers as a primary building block-temporal convolutional networks and simple neural attentive meta-learners-for epidemiological forecasting. We then test them with influenza data from the US collected over 2010-2019. We find that epidemiological forecasting with CNNs is feasible, and their forecasting skill is comparable to, and at times, superior to, plain RNNs. Thus CNNs and RNNs bring the power of nonlinear transformations to purely data-driven epidemiological models, a capability that heretofore has been limited to more elaborate mechanistic/compartmental disease models.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Abstract"
        },
        {
            "text": "Citation: Lee K, Ray J, Safta C (2021) The predictive skill of convolutional neural networks models for disease forecasting. PLoS ONE 16 (7): e0254319. https://doi.org/10.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Abstract"
        }
    ],
    "body_text": [
        {
            "text": "Seasonal influenza resulted in 9-45 million illnesses, between 140k-180k hospitalizations, and between 12k-61k deaths in the United States annually since 2010. It is the subject of intensive and continuous surveillance by the US Center for Disease Control (CDC) [1] . Forecasting influenza outbreaks is important as it allows us to plan for medical resource demands [2] . To address this problem, CDC has been focusing its efforts on Flu Forecasting [3] , of which the goal is to predict the disease dynamics, e.g. predicting the timing, peak, and intensity of flu season, so that its impact can be reduced. Since the competition, \"Predict the Influenza Season Challenge\" (see [4] ), hosted by CDC in 2013, CDC has encouraged researchers to develop models to accurately predict influenza activities for a number of weeks ahead. Along with traditional mechanistic modeling approaches, there have been many studies on developing statistical forecast models using historical flu activity data: auto-regressive modeling [5] , Google Flu Trend [6] , Google search data [7, 8] ), and refined models using structural spatio-temporal synchronicities [9, 10] , to name a few.",
            "cite_spans": [
                {
                    "start": 262,
                    "end": 265,
                    "text": "[1]",
                    "ref_id": "BIBREF0"
                },
                {
                    "start": 366,
                    "end": 369,
                    "text": "[2]",
                    "ref_id": "BIBREF1"
                },
                {
                    "start": 450,
                    "end": 453,
                    "text": "[3]",
                    "ref_id": null
                },
                {
                    "start": 677,
                    "end": 680,
                    "text": "[4]",
                    "ref_id": null
                },
                {
                    "start": 1016,
                    "end": 1019,
                    "text": "[5]",
                    "ref_id": "BIBREF4"
                },
                {
                    "start": 1039,
                    "end": 1042,
                    "text": "[6]",
                    "ref_id": "BIBREF5"
                },
                {
                    "start": 1064,
                    "end": 1067,
                    "text": "[7,",
                    "ref_id": "BIBREF6"
                },
                {
                    "start": 1068,
                    "end": 1070,
                    "text": "8]",
                    "ref_id": "BIBREF7"
                },
                {
                    "start": 1142,
                    "end": 1145,
                    "text": "[9,",
                    "ref_id": "BIBREF8"
                },
                {
                    "start": 1146,
                    "end": 1149,
                    "text": "10]",
                    "ref_id": "BIBREF9"
                }
            ],
            "ref_spans": [],
            "section": "Introduction"
        },
        {
            "text": "PLOS ONE | https://doi.org/10.1371/journal.pone.0254319 July 9, 2021 1 / 26 a1111111111 a1111111111 a1111111111 a1111111111 a1111111111",
            "cite_spans": [],
            "ref_spans": [],
            "section": "PLOS ONE"
        },
        {
            "text": "More recently, with advancements in deep learning and the availability of high-spatial-resolution data, i.e., ten US HHS-regions-level data (regions defined by the United States Department of Health & Human Services) and state-level data for all US states, there have been many studies on applying deep learning techniques for flu forecasting [11] [12] [13] [14] [15] [16] [17] . Among several artificial neural network architectures dedicated to handling time series, there are largely two types of architectures that have been extensively studied for time-series predictions: recurrent neural networks (RNNs), which consist of shared and recurring units, and convolutional neural networks (CNNs), which consist of layers of convolutional operations. RNNs are defined as a family of neural networks for processing \"sequential data\" [18] and have shown a significant impact in applications such as language modeling [19, 20] , machine translation [21] , and polyphonic music modeling [22] . RNNs and their variants also have been actively explored in flu prediction studies [11] [12] [13] [14] [15] [16] [17] .",
            "cite_spans": [
                {
                    "start": 343,
                    "end": 347,
                    "text": "[11]",
                    "ref_id": "BIBREF10"
                },
                {
                    "start": 348,
                    "end": 352,
                    "text": "[12]",
                    "ref_id": "BIBREF11"
                },
                {
                    "start": 353,
                    "end": 357,
                    "text": "[13]",
                    "ref_id": "BIBREF12"
                },
                {
                    "start": 358,
                    "end": 362,
                    "text": "[14]",
                    "ref_id": "BIBREF13"
                },
                {
                    "start": 363,
                    "end": 367,
                    "text": "[15]",
                    "ref_id": "BIBREF14"
                },
                {
                    "start": 368,
                    "end": 372,
                    "text": "[16]",
                    "ref_id": "BIBREF15"
                },
                {
                    "start": 373,
                    "end": 377,
                    "text": "[17]",
                    "ref_id": null
                },
                {
                    "start": 833,
                    "end": 837,
                    "text": "[18]",
                    "ref_id": null
                },
                {
                    "start": 916,
                    "end": 920,
                    "text": "[19,",
                    "ref_id": null
                },
                {
                    "start": 921,
                    "end": 924,
                    "text": "20]",
                    "ref_id": null
                },
                {
                    "start": 947,
                    "end": 951,
                    "text": "[21]",
                    "ref_id": null
                },
                {
                    "start": 984,
                    "end": 988,
                    "text": "[22]",
                    "ref_id": null
                },
                {
                    "start": 1074,
                    "end": 1078,
                    "text": "[11]",
                    "ref_id": "BIBREF10"
                },
                {
                    "start": 1079,
                    "end": 1083,
                    "text": "[12]",
                    "ref_id": "BIBREF11"
                },
                {
                    "start": 1084,
                    "end": 1088,
                    "text": "[13]",
                    "ref_id": "BIBREF12"
                },
                {
                    "start": 1089,
                    "end": 1093,
                    "text": "[14]",
                    "ref_id": "BIBREF13"
                },
                {
                    "start": 1094,
                    "end": 1098,
                    "text": "[15]",
                    "ref_id": "BIBREF14"
                },
                {
                    "start": 1099,
                    "end": 1103,
                    "text": "[16]",
                    "ref_id": "BIBREF15"
                },
                {
                    "start": 1104,
                    "end": 1108,
                    "text": "[17]",
                    "ref_id": null
                }
            ],
            "ref_spans": [],
            "section": "PLOS ONE"
        },
        {
            "text": "CNNs are often considered to be specialized neural networks for processing images, exploiting local correlations in space. CNNs, however, also have been applied to sequence modeling in many applications including speech recognition [23] and natural language processing [24] [25] [26] [27] [28] . More recently, variants of CNNs that are specially designed for sequence modeling using operations, \"temporal\" convolutions, have demonstrated an improved performance in audio synthesis [29] , machine translations [25, 30] , and other sequence modeling [31] applications compared to earlier neural network (NN) models. In particular, the extensive experiments in Ref.",
            "cite_spans": [
                {
                    "start": 232,
                    "end": 236,
                    "text": "[23]",
                    "ref_id": null
                },
                {
                    "start": 269,
                    "end": 273,
                    "text": "[24]",
                    "ref_id": null
                },
                {
                    "start": 274,
                    "end": 278,
                    "text": "[25]",
                    "ref_id": null
                },
                {
                    "start": 279,
                    "end": 283,
                    "text": "[26]",
                    "ref_id": null
                },
                {
                    "start": 284,
                    "end": 288,
                    "text": "[27]",
                    "ref_id": null
                },
                {
                    "start": 289,
                    "end": 293,
                    "text": "[28]",
                    "ref_id": null
                },
                {
                    "start": 482,
                    "end": 486,
                    "text": "[29]",
                    "ref_id": null
                },
                {
                    "start": 510,
                    "end": 514,
                    "text": "[25,",
                    "ref_id": null
                },
                {
                    "start": 515,
                    "end": 518,
                    "text": "30]",
                    "ref_id": null
                }
            ],
            "ref_spans": [],
            "section": "PLOS ONE"
        },
        {
            "text": "[31] demonstrated that relative simple temporal convolution architectures could exhibit substantially longer memory than RNNs. Despite these successes, temporal convolutions have rarely been explored in modeling infectious disease models and consequently, little is known about their effectiveness in forecasting disease evolution, vis-\u00e0-vis RNNs.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "PLOS ONE"
        },
        {
            "text": "In this study, we model flu forecasting as a sequence modeling task, explore different NN architectures, namely variants of RNNs and CNNs, and then compare the performance of all models with extensive experiments. Following [6, 7, 10] , we utilize CDC data, gathered over nine years, on the percentage of the number of influenza-like illness (ILI) patients over the total number of outpatient visits, which is denoted by %ILI; this information can be used as a proxy of the flu activity in the population and helps hospital officials allocate appropriate resources in preparation for increased patient visits to hospital facilities. This study considers only the state-level %ILI from CDC without any external data (e.g., external factors that might affect the flu activity or additional internet data that can be utilized for forecasting). We decided against using COVID-19 data in this study for two reasons: (1) There are only three waves' worth of data, which does not provide a sufficient sampling of the diversity of outbreak variation and (2) the waves are significantly affected by external forcings e.g., the different types of population mixing during the 2020 spring, summer and winter waves in the US, public health measures that changed with each wave etc., which would have to be modeled separately, as they are exogenous to the data. In contrast, the ILI data reflects the same seasonality and public health measures for each year, making them intrinsic properties of the data set and thus \"learnable\" by data-driven models.",
            "cite_spans": [
                {
                    "start": 224,
                    "end": 227,
                    "text": "[6,",
                    "ref_id": "BIBREF5"
                },
                {
                    "start": 228,
                    "end": 230,
                    "text": "7,",
                    "ref_id": "BIBREF6"
                },
                {
                    "start": 231,
                    "end": 234,
                    "text": "10]",
                    "ref_id": "BIBREF9"
                },
                {
                    "start": 911,
                    "end": 914,
                    "text": "(1)",
                    "ref_id": "BIBREF0"
                }
            ],
            "ref_spans": [],
            "section": "PLOS ONE"
        },
        {
            "text": "Both statistical time-series models [32] e.g., ARIMA, and mechanistic/compartmental models [33] are widely used in forecasting epidemics. Compartmental models require one to model population mixing and disease phenomenology (e.g., incubation, prodrome, existence and role of asymptomatic individuals etc.) which can be difficult in case of novel diseases. However, modern information technology allows the (very) quick and comprehensive collection of basic epidemiological data e.g., detected or diagnosed cases, at the country-, regionaland often, city-scale, as evidenced during the ongoing COVID-19 pandemic [34, 35] ; purely data-driven methods could be used for forecasting and practical resource planning scenarios even without fully understanding the disease dynamics. This raises the question whether more complex data-driven models, such as CNNs and RNNs, can be trained on big data to provide better forecasts than linear ARIMA models. RNNs, in fact, have been used for forecasting , and comparisons of RNN-based forecasting for influenza have shown that neural networks perform far better than ARIMA models [15, 17] , or other baseline machine learning methods such as support vector machine (SVM) and AdaBoost [11] . In this paper, thus, we focus only on deep-learning-based prediction models and we investigate whether CNNs, one-dimensional temporal convolutions, in particular, could be used for the same purpose.",
            "cite_spans": [
                {
                    "start": 91,
                    "end": 95,
                    "text": "[33]",
                    "ref_id": null
                },
                {
                    "start": 611,
                    "end": 615,
                    "text": "[34,",
                    "ref_id": null
                },
                {
                    "start": 616,
                    "end": 619,
                    "text": "35]",
                    "ref_id": null
                },
                {
                    "start": 1118,
                    "end": 1122,
                    "text": "[15,",
                    "ref_id": "BIBREF14"
                },
                {
                    "start": 1123,
                    "end": 1126,
                    "text": "17]",
                    "ref_id": null
                },
                {
                    "start": 1222,
                    "end": 1226,
                    "text": "[11]",
                    "ref_id": "BIBREF10"
                }
            ],
            "ref_spans": [],
            "section": "PLOS ONE"
        },
        {
            "text": "The paper is structured as follows. In Section \"Methods and materials\" we review modern recurrent neural networks and two other neural networks based on temporal convolutions and describe datasets in detail. In Section \"Results and discussion\" we describe training strategies for neural networks and we present results of experiments of one-week ahead predictions and multi-week ahead predictions. Finally, in Section \"Conclusion\", we present our conclusions.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "PLOS ONE"
        },
        {
            "text": "Assume that we have a sequence of input data {x 1 , . . ., x t } with the time index t, which can be obtained, for example, from measurements, and we wish to predict future sequence, {x t+1 , x t+2 , . . .} via sequence modeling. In general form, sequence modeling tries to learn a function f(\ufffd; \u0398) such that",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Methods-Sequence modeling via deep learning"
        },
        {
            "text": "where \u0398 is a set of parameters to be learned, and fo 1 ; . . . ; o n out g is a sequence of outputs. Here, n in and n out are not necessarily the same. In a supervised learning setting, there are target (or reference) variables fy 1 ; . . . ; y n out g, on which the model f(\ufffd;\u0398) can be trained to produce outputs fo 1 ; . . . ; o n out g to match target variables fy 1 ; . . . ; y n out g. In a forecasting scenario, where we attempt to predict future data, the target variables can be set as, for example, y 1 = x t+1 , y 2 = x t+2 for 2-weeks ahead prediction. Given input data and target variables, an optimal set of parameters can be learned by minimizing a loss function L\u00f0y 1 ; . . . ; y n out ; o 1 ; . . . ; o n out \u00de, which computes the discrepancy between the output fo 1 ; . . . ; o n out g and the target fy 1 ; . . . ; y n out g in a certain measure.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Methods-Sequence modeling via deep learning"
        },
        {
            "text": "The parameterized function f(\ufffd;\u0398) can take various forms such as statistical models or deeplearning-based models. In this study, we will model f(\ufffd;\u0398) using deep-learning-based models, such as recurrent neural networks (RNNs), sequence-to-sequence (or encoder-decoder type) RNN variants, and neural networks based on temporal-causal convolutions. Our goal is to perform a comprehensive empirical evaluation of the performance of various types of neural networks for near-term forecasting of influenza-like illness. Below, we briefly review each of the deep-learning-based models considered in this study.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Methods-Sequence modeling via deep learning"
        },
        {
            "text": "A recurrent neural network (RNN) [37] is a type of neural network designed to process a sequence of values and, thus, is well-suited for predicting time-sequences. At time index \u03c4, RNNs typically operate on a sequence of data x \u03c4 , update hidden states h \u00f01\u00de t ; h \u00f02\u00de t ; . . ., and produce an output o \u03c4 by applying the same function parameterized by a set of neural network weights:",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Standard recurrent neural networks (RNN)"
        },
        {
            "text": "where h (\u2113) denotes the \u2113-th hidden layer. Hidden layers and outputs of RNNs are computed in sequence. Assume a RNN architecture with one hidden layer. Then, starting from a given initial hidden state h \u00f01\u00de 0 , the forward pass of the RNN computes subsequent hidden layers by applying an affine transformation to a current input and the previous hidden states followed by a nonlinear activation, e.g., h \u00f01\u00de t \u00bc s\u00f0W xh x t \u00fe W hh h \u00f01\u00de t\u00c0 1 \u00fe b\u00de, where W xh , W hh , and b are the learnable parameters and \u03c3 is a nonlinear activation function.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Standard recurrent neural networks (RNN)"
        },
        {
            "text": "Standard RNNs typically suffer from vanishing/exploding gradient problems [38] [39] [40] . To cope with this difficulty, architectures using gating mechanisms including long short-term memory (LSTM) [39] and gated recurrent unit (GRU) [41] have been proposed and extensively used in several applications. The core idea is to create paths whose gradients do not vanish or explode as RNN cells become far apart.",
            "cite_spans": [
                {
                    "start": 74,
                    "end": 78,
                    "text": "[38]",
                    "ref_id": null
                },
                {
                    "start": 79,
                    "end": 83,
                    "text": "[39]",
                    "ref_id": null
                },
                {
                    "start": 84,
                    "end": 88,
                    "text": "[40]",
                    "ref_id": null
                },
                {
                    "start": 235,
                    "end": 239,
                    "text": "[41]",
                    "ref_id": null
                }
            ],
            "ref_spans": [],
            "section": "Modern RNNs"
        },
        {
            "text": "Long short-term memory (LSTM). In LSTM recurrent networks, the above issue is resolved by adding LSTM cells, which have an internal recurrence to update cell states, generating paths where the gradient can flow over longer durations [39] , as opposed to standard RNNs that only have recurrence over the hidden states. In addition, by introducing gating mechanisms which typically consists of input, output, and forget gates, the flow of information can be effectively controlled [39, 42] . As the name indicates, the input gate controls the amount of information gets transferred from input to the current LSTM cell, the output gate controls the amount of information gets transferred to output, and the forget gate controls the extent to which internal cell state remains unchanged. When the sigmoid function is used, each gate produces a value between [0, 1], where 0 and 1 are two extreme values indicating that no or all information will be passed, respectively. S1 Appendix contains a more detailed description of LSTMs.",
            "cite_spans": [
                {
                    "start": 233,
                    "end": 237,
                    "text": "[39]",
                    "ref_id": null
                },
                {
                    "start": 479,
                    "end": 483,
                    "text": "[39,",
                    "ref_id": null
                },
                {
                    "start": 484,
                    "end": 487,
                    "text": "42]",
                    "ref_id": "BIBREF16"
                }
            ],
            "ref_spans": [],
            "section": "Modern RNNs"
        },
        {
            "text": "Gated recurrent unit (GRU). GRU is another gating mechanism without internal cell states and with a small number of gates; GRU consists of reset and update gates [41]. The reset Compared to LSTM, GRU has a simpler architecture: it does not have a cell state and it operates only on two gates (as opposed to three gates in LSTM). In general, LSTM is known to be strictly more expressive and it has been demonstrated that LSTM outperforms GRU on many different applications [43, 44] . In certain tasks, however, GRU performs similar to LSTM [45] , or performs even better in small datasets [22] . We refer readers to S1 Appendix for details on LSTM, GRU, and their comparisons.",
            "cite_spans": [
                {
                    "start": 472,
                    "end": 476,
                    "text": "[43,",
                    "ref_id": "BIBREF17"
                },
                {
                    "start": 477,
                    "end": 480,
                    "text": "44]",
                    "ref_id": "BIBREF18"
                },
                {
                    "start": 539,
                    "end": 543,
                    "text": "[45]",
                    "ref_id": "BIBREF19"
                },
                {
                    "start": 588,
                    "end": 592,
                    "text": "[22]",
                    "ref_id": null
                }
            ],
            "ref_spans": [],
            "section": "Modern RNNs"
        },
        {
            "text": "Next, we consider a sequence-to-sequence (Seq2Seq) model (or, often called encoder-decoder model): the Seq2Seq architecture is designed to train a mapping from an input sequence to an output sequence, where the input and the output sequences do not necessarily have the same length [41, 46] . For handling variable-length sequences, the Seq2Seq architecture consists of an encoder and a decoder, which are typically RNN-type architectures (with LSTM cells or GRUs). Because the input and the output of ILI forecasting can be two variable-length sequences, the Seq2Seq architecture is a naturally good fit. The encoder processes an input sequence to produce a single vector called a context vector, which is typically a function of the last hidden layer of the encoder. Then the decoder generates an output sequence conditioned on the single context vector. Fig 2 depicts an illustration of a Seq2Seq architecture.",
            "cite_spans": [
                {
                    "start": 282,
                    "end": 286,
                    "text": "[41,",
                    "ref_id": null
                },
                {
                    "start": 287,
                    "end": 290,
                    "text": "46]",
                    "ref_id": "BIBREF20"
                }
            ],
            "ref_spans": [
                {
                    "start": 857,
                    "end": 870,
                    "text": "Fig 2 depicts",
                    "ref_id": "FIGREF2"
                }
            ],
            "section": "Sequence-to-sequence (Seq2Seq) model"
        },
        {
            "text": "As an alternative set of sequence modeling approaches, we present two neural networks: temporal convolutional networks and simple neural attentive meta-learners, of which the main component is a temporal convolution (TC) layer. The TC layer refers to a one-dimensional causal convolution layer; an input to this layer is the 1D time-sequenced data, which may consists of multi channels, same as in an input to a regular 1D convolutional layers, and as the term, \"causal\", indicates, an output of the TC layer at time t, o t , is produced by applying convolution kernel filters to the input data up to time t, {. . ., x t\u22121 , x t }. To utilize a longer history of the input data without making the depth of neural network too deep, a sequence of dilated convolutions with increasing dilation factors can be used as in Ref. [29, 47] . In a typical setting, the dilation factor starts with d = 1 and increases exponentially, i.e., d = O(2 \u2113 ) at level \u2113 of the network. Thus, the receptive field of the network can be controlled by the kernel size k and the Temporal convolutional networks (TCNs). Among several neural network models based on the temporal convolutions, we explore the temporal convolution networks (TCNs) [31] in this study since TCNs provide a relatively simple, but flexible architecture. Moreover, TCNs employ residual blocks [48] , which we denote by RESBLOCK, for stabilization of forward/ backward passes of deep neural network architectures. Each RESBLOCK consists of (1) two layers of dilated causal convolution, where each layer is followed by weight normalization, ReLU [49] , and dropout, and (2) the identity mapping from the input to the block (optionally, a 1 \u00d7 1 convolutional layer can be employed to match the input and the output shapes so that the element-wise summation can be performed). We refer readers to S1 Appendix for details of TCNs.",
            "cite_spans": [
                {
                    "start": 822,
                    "end": 826,
                    "text": "[29,",
                    "ref_id": null
                },
                {
                    "start": 827,
                    "end": 830,
                    "text": "47]",
                    "ref_id": "BIBREF21"
                },
                {
                    "start": 1219,
                    "end": 1223,
                    "text": "[31]",
                    "ref_id": null
                },
                {
                    "start": 1343,
                    "end": 1347,
                    "text": "[48]",
                    "ref_id": "BIBREF22"
                },
                {
                    "start": 1594,
                    "end": 1598,
                    "text": "[49]",
                    "ref_id": "BIBREF23"
                }
            ],
            "ref_spans": [],
            "section": "Convolutional networks"
        },
        {
            "text": "Simple neural attentive meta-learner (SNAIL). As described above, TCNs handle long sequences by employing exponentially increasing dilation factors. This may lead to coarser access to inputs and, consequently, bounded network capacity. To resolve this issue, a simple neural attentive meta-learner (SNAIL) [50] combines temporal (causal) convolutions with a soft attention mechanism that is similar to Ref. [51] . SNAIL interleaves TC layers with attention layers so that the model can learn to (1) extract features from the current and previous input features/data via the TC layers and (2) identify more important input features/data over other elements in long sequences via the attention layers.",
            "cite_spans": [
                {
                    "start": 306,
                    "end": 310,
                    "text": "[50]",
                    "ref_id": "BIBREF24"
                },
                {
                    "start": 407,
                    "end": 411,
                    "text": "[51]",
                    "ref_id": "BIBREF25"
                }
            ],
            "ref_spans": [],
            "section": "Convolutional networks"
        },
        {
            "text": "These two main ingredients of SNAIL can be summarized by two separate functions, TCBLOCK and ATTENTIONBLOCK. In TCBLOCK, a series of TC layers with exponentially increasing dilation factors is used; at each TC layer, an output is computed using the gated activation function [29, 52] (as opposed to the simple TCNs) and then is concatenated with an input. In ATTENTIONBLOCK, a causal attention mechanism is employed to point out at which points in the input sequence should be more emphasized. The term \"causal\" indicates that the attention mechanism only looks at the current time input data and its previous time input data. Fig 4 depicts a schematic view of SNAIL with one TCBLOCK and two ATTENTIONBLOCKs. We refer readers to S1 Appendix for details of TCBLOCK and ATTENTIONBLOCK.",
            "cite_spans": [
                {
                    "start": 275,
                    "end": 279,
                    "text": "[29,",
                    "ref_id": null
                },
                {
                    "start": 280,
                    "end": 283,
                    "text": "52]",
                    "ref_id": "BIBREF26"
                }
            ],
            "ref_spans": [],
            "section": "Convolutional networks"
        },
        {
            "text": "Datasets. The Influenza Division at the Center for Disease Control (CDC) reports a weekly U.S. influenza surveillance data (FluView); in particular, we are interested in information on outpatient visits to health care providers for influenza-like illness (ILI), which is collected through the U.S. Outpatient Influenza-like Illness Surveillance Network (ILINet). ILINet consists of outpatient healthcare provider in all 50 states and records the total number of patient visits and the number of those patients with ILI symptoms, which are defined as combinations of fever (temperature over 100\u02daF), a cough, and/or a sore throat without a known cause other than influenza.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Materials"
        },
        {
            "text": "Our particular interest lies in the percentage of the number of ILI patients over the total number of outpatient visits, which is denoted by %ILI (% unweighted ILI as opposed to % weighted ILI, where the percentage is weighted on the basis of state population). This information is available per state for each week and can be downloaded from the application, FluView Interactive [53] .",
            "cite_spans": [
                {
                    "start": 380,
                    "end": 384,
                    "text": "[53]",
                    "ref_id": null
                }
            ],
            "ref_spans": [],
            "section": "Materials"
        },
        {
            "text": "Preprocessing. We downloaded state-level %ILI from week 40 of 2010 to week 39 of 2019 (9 seasons), and preprocessed it to keep %ILI only in the influenza season (i.e., week 40 of a given year to week 20 of a subsequent year). Consequently, each influenza season consists of 33 weeks, except for 2014-2015 season, which has 34 weeks due to the 53rd week in 2014. Among the 50 states, Florida is excluded from the study because there is no data reported. We rescale the data to have values in range [0, 1] using min-max scaling. Note that predictions made by each neural network are then scaled back to the original range by applying the inverse of the min-max scaling operator in a post-processing step and the resuling quantities are used to compute performance metrics, which will be introduced in the next Section. Moreover, we generate binary mask, which has the same length as the % ILI data, to indicate missing, unreported, or zero-value recorded weekly report.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Materials"
        },
        {
            "text": "Following the preprocessing step shown in Ref.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Materials"
        },
        {
            "text": "[17], we concatenate 9 seasons of %ILI per each state and use a fixed-length sliding window to generate subsequences for supervisedlearning settings (see Fig 5) . The window consists of two subwindows of lengths, w hist and w pred (in weeks), and sequence models are expected to make predictions on w pred weeks of % ILI given w hist weeks of historical observations on %ILI.",
            "cite_spans": [],
            "ref_spans": [
                {
                    "start": 154,
                    "end": 160,
                    "text": "Fig 5)",
                    "ref_id": "FIGREF5"
                }
            ],
            "section": "Materials"
        },
        {
            "text": "We then split the data into training/validation/test sets. The training set, the validation set, and the test set consist of subsequences obtained from 2010 to 2017 (7 seasons), from the 2017-2018 season, from the 2018-2019 season, respectively. For w pred -weeks-ahead predictions, the validation set and the test set are designed to include subsequences of which the last data point belongs to the 2017-2018 season and the 2018-2019 season, respectively. ",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Materials"
        },
        {
            "text": "We now assess the performance for %ILI forecasting for the neural networks described in the previous section. We construct all neural network architectures using PYTORCH 1.12 [54] . Before presenting the experimental results, we describe neural network training strategies employed in this work and performance metrics used to evaluate the trained neural networks on the test dataset.",
            "cite_spans": [
                {
                    "start": 175,
                    "end": 179,
                    "text": "[54]",
                    "ref_id": "BIBREF28"
                }
            ],
            "ref_spans": [],
            "section": "Results and discussion"
        },
        {
            "text": "For training neural networks, we consider the mean squared error (MSE) as the loss function, and minimize the loss function by employing a gradient-based optimization method [55] . In particular, we employ a variant of stochastic gradient descent method called Adamax [56] with the initial learning rate 10 \u22122 and we set the mini-batch size to 50. The maximum number of epochs is set of 50. At each epoch, training is performed by computing gradients of the loss on the training set and the validation loss is computed on the validation set. After the maximum number of epochs, the best performing network weights on the validation set are chosen to try the model on the test data. Moreover, we use an early-stopping strategy; the training stops if there is a certain number of epochs where the optimizer fails to find improvements in validation loss. From our empirical findings, in general, the early-stopping strategy does not help to generalize the performance of the RNN variants within the pre-specified maximum number of epochs, whereas the strategy helps to generalize the performance of the TC variants. Thus, we use the early-stopping strategy only for TCNs and SNAILs, and set the number of consecutive epochs to 3 for early-stopping criterion.",
            "cite_spans": [
                {
                    "start": 174,
                    "end": 178,
                    "text": "[55]",
                    "ref_id": "BIBREF29"
                },
                {
                    "start": 268,
                    "end": 272,
                    "text": "[56]",
                    "ref_id": "BIBREF30"
                }
            ],
            "ref_spans": [],
            "section": "Training neural networks"
        },
        {
            "text": "We also employ a grid search for optimal hyperparameter values. Although there are more advanced hyperparameter search algorithms such as Bayesian hyperparameter optimization [57] , we use grid search to put more emphasis on the impact of these hyperparameters on the performances of each models and attempt to draw interpretations on impact of these changes on model improvements. ",
            "cite_spans": [
                {
                    "start": 175,
                    "end": 179,
                    "text": "[57]",
                    "ref_id": "BIBREF31"
                }
            ],
            "ref_spans": [],
            "section": "Training neural networks"
        },
        {
            "text": "For assessing performances of each neural networks, we consider four different metrics to measure the discrepancy between the predicted sequence and the target sequence: root meansquare error (RMSE), mean absolute percentage error (MAPE), relative error measured in the Euclidean norm (L2E), and Pearson Correlation (PCORR). These metrics are define as:",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Performance metrics"
        },
        {
            "text": "\u00de ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Performance metrics"
        },
        {
            "text": "where x i andx i , i = 1, . . ., N denote the ground truth %ILI and the approximate quantity produced by neural networks, respectively, and m x refers to the mean of x i , i = 1, . . ., N. RMSE and L2E compute the averaged and the relative sum of squared errors, respectively. MAPE computes the errors in L1-norm and then reports the error as a percentage. Following [15] , the denominator is smoothed by adding 1 to avoid zero values. Lastly, PCORR measures how correlated two sequences are and the resulting quantity lies between [-1, 1]. The closer PCORR is to 1, the more positively correlated the two sequences are. Note that L2E and MAPE are relative measures, whereas RMSE is not: RMSE measures the squared differences of x i 's where x i < 16 in test sets.",
            "cite_spans": [
                {
                    "start": 367,
                    "end": 371,
                    "text": "[15]",
                    "ref_id": "BIBREF14"
                }
            ],
            "ref_spans": [],
            "section": "Performance metrics"
        },
        {
            "text": "For this experiment, we use varying lengths of historical observations w hist = {16, 32, 64, 128} to make a one-week-ahead predictions, i.e., w pred = 1. We will explore the performance of models discussed above with the metric introduced in the previous section. Unless otherwise specified, we compute one of each error for 49 states separately and then average each error over 49 states. We begin by comparing RNN-LSTM and RNN-GRU.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "One-week-ahead predictions results"
        },
        {
            "text": "Long short-term memory and gated recurrent unit. For both RNN-LSTM and RNN-GRU, we consider the same supervised learning setting. As described in the preprocessing section, we consider the subsequences of length w hist +w pred . We denote the i-th input data sequence by x \u00f0i\u00de 1 ; . . . ; x \u00f0i\u00de w hist , where x \u00f0i\u00de t is used as the input to the \u03c4-th step of the RNNs. At the \u03c4th RNN step, the network produces output o \u00f0i\u00de t , which attempts to match y \u00f0i\u00de t \u00bc x \u00f0i\u00de t\u00fe1 so that, in the last RNN step, the quantity that the network tries to predict is produced. We train both RNN-LSTM and RNN-GRU by minimizing the MSE.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "One-week-ahead predictions results"
        },
        {
            "text": "In the first experiment, we consider RNN-LSTM and RNN-GRU with two hidden layers. For both RNNs, the first layer consists of 32-dimensional hidden units (and 32-dimensional cell state in LSTM) and the second layer consists of 16-dimensional hidden units (and 16-dimensional cell state in LSTM). For implementation, we use a series of LSTMCELL and GRUCELL, respectively. Then the output of the last layer is connected to a dense network with one hidden layer, which consists of 100 units, followed by a ReLU nonlinear activation. We have tested these two RNNs on the datasets obtained by varying the lengths of historical observations w hist = {16, 32, 64, 128}. Fig 6 reports the four performance metrics computed using the test set and, in most cases, RNN-GRU results in better performances.",
            "cite_spans": [],
            "ref_spans": [
                {
                    "start": 662,
                    "end": 675,
                    "text": "Fig 6 reports",
                    "ref_id": "FIGREF6"
                }
            ],
            "section": "One-week-ahead predictions results"
        },
        {
            "text": "Next we consider RNNs with varying number of LSTM layers and GRU layers as n h = {2, 3, 4, 5}. We fixed the size of hidden units in the last layer to be 16 and those of other layers to be 32. We tested the new networks for varying lengths of historical observations w hist = {16, 32, 64, 128} as described above. From these experiments, we observe that RNN-LSTM performs best with w hist = 64 and RNN-GRU performs best with w hist = 32. Fig 7 reports the performance metrics measured for the LSTM and the GRU in their best settings. For both RNNs, we can observe that all four errors decrease, except for MAPE of LSTM, as n h increases. Although other results are not reported, we also have observed that increasing w hist to 128 significantly decreases the performance of both LSTM and GRU. Overall, RNN-GRU outperforms RNN-LSTM in all error metrics and, thus, we consider only GRU in the following experiments.",
            "cite_spans": [],
            "ref_spans": [
                {
                    "start": 437,
                    "end": 450,
                    "text": "Fig 7 reports",
                    "ref_id": "FIGREF7"
                }
            ],
            "section": "One-week-ahead predictions results"
        },
        {
            "text": "Sequence-to-sequence models. Seq2Seq-type networks consist of an encoder and a decoder and both of them are modeled as RNN-GRU in this study. As for the previous settings used in the comparisons of RNN-LSTM and RNN-GRU, the i-th input sequence is denoted by x \u00f0i\u00de 1 ; . . . ; x \u00f0i\u00de w hist and the encoder RNN network operates on this input sequence to produce a context vector. Then the decoder receives the last element in the input sequence (i.e., x \u00f0i\u00de w hist ) as its input as well as the context vector to produce output o \u00f0i\u00de 1 , which attempts to match y \u00f0i\u00de 1 \u00bc x \u00f0i\u00de w hist \u00fe1 . The encoder and the decoder are designed to have a symmetric architecture in terms of the number of hidden layers. For instance, if the encoder consists of two hidden layers of unit sizes 32 and 16, the decoder consists of two hidden layers of unit sizes 16 and 32. As in the previous experiments with LSTM and GRU, we have tested the Seq2Seq architecture with varying number of GRU layers by setting n h = {2, 3, 4, 5}: the last hidden layer of the encoder and the first hidden layer of the decoder are of dimension 16, and the other hidden layers are of dimension 32. We again consider varying lengths of historical observations w hist = {16, 32, 64, 128}.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "One-week-ahead predictions results"
        },
        {
            "text": "In Fig 8, we present results obtained by using the Seq2Seq architecture with two best performing values of w hist = {64, 128}, and compare those results with the best results obtained by RNN-GRU (w hist = 32) presented in Fig 7. The experiments show that the Seq2Seq architecture performs better with longer sequences (i.e., w hist = {64, 128}) and, as shown in the experiments with RNN-GRU, performs better with the larger networks (i.e., n h \ufffd 3), in general; we note that there is a single exception n h = 4 and w hist = 128. By comparing the results of Seq2Seq with GRU in Fig 7, we observe that the Seq2Seq architectures outperform the standard RNN-GRU in many cases, and the Seq2Seq architecture with n h = 3 and w hist = 64 produces the best results.",
            "cite_spans": [],
            "ref_spans": [
                {
                    "start": 3,
                    "end": 9,
                    "text": "Fig 8,",
                    "ref_id": "FIGREF8"
                },
                {
                    "start": 222,
                    "end": 228,
                    "text": "Fig 7.",
                    "ref_id": "FIGREF7"
                },
                {
                    "start": 577,
                    "end": 583,
                    "text": "Fig 7,",
                    "ref_id": "FIGREF7"
                }
            ],
            "section": "One-week-ahead predictions results"
        },
        {
            "text": "As an alternative to the RNN-GRU decoder, we also have explored different choices of the network architecture for decoder including neural ordinary differential equations (NODEs [58] ) and augmented NODEs (ANODEs) [59] . NODEs have demonstrated their ability to learn latent dynamics of complex physical processes [58, 60] and have been successfully used for time-sequence modeling for various applications [61] [62] [63] [64] . Motivated by these successes, we design another Seq2Seq model, of which the encoder is RNN-GRU and the decoder is NODE or ANODE; the NDOE or the ANODE takes the context vector as an initial condition and computes hidden states at pre-specified time steps \u03c4 = {1, . . ., w hist , w hist + 1, . . ., w hist + w pred }. We again refer readers to S1 Appendix for the technical details of NODE and ANODE. Here, our intention is to train NODEs/ANODEs to learn the underlying dynamics of the evolution of %ILI and make prediction from the learned dynamics.",
            "cite_spans": [
                {
                    "start": 178,
                    "end": 182,
                    "text": "[58]",
                    "ref_id": "BIBREF32"
                },
                {
                    "start": 214,
                    "end": 218,
                    "text": "[59]",
                    "ref_id": "BIBREF33"
                },
                {
                    "start": 314,
                    "end": 318,
                    "text": "[58,",
                    "ref_id": "BIBREF32"
                },
                {
                    "start": 319,
                    "end": 322,
                    "text": "60]",
                    "ref_id": "BIBREF34"
                },
                {
                    "start": 407,
                    "end": 411,
                    "text": "[61]",
                    "ref_id": "BIBREF35"
                },
                {
                    "start": 412,
                    "end": 416,
                    "text": "[62]",
                    "ref_id": "BIBREF36"
                },
                {
                    "start": 417,
                    "end": 421,
                    "text": "[63]",
                    "ref_id": "BIBREF37"
                },
                {
                    "start": 422,
                    "end": 426,
                    "text": "[64]",
                    "ref_id": "BIBREF38"
                }
            ],
            "ref_spans": [],
            "section": "One-week-ahead predictions results"
        },
        {
            "text": "Seq2Seq with ANODE decoder, in general, performs better than Seq2Seq with NODE decoder. However, both Seq2Seq models with NODE and ANODE decoders perform worse than Seq2Seq with GRU in all four error metrics. Table 1 shows the four performance metrics for one-week-ahead predictions computed by using the Seq2Seq models with RNN-GRU decoder, NODE decoder and ANODE decoder: the best performing Seq2Seq model with ANODE decoder achieves about 3-6% worse performance in RMSE, MAPE, and L2E and about 1% worse performance in PCORR. The best performing network architecture for ANODE (NODE, resp) consists of a 6-layer (5-layer, resp) RNN-GRU encoder with hidden dimension sizes 32 (for internal layers) and 16 (for the outermost layer), and an ANODE decoder with hidden dimension 16, augmented by an extra 16 dimensional vector (no augmentation, resp) and the dynamics of the hidden dimension is described by a 6-layer (5-layer, resp) multi-layer perceptron (MLP) with width 32. We believe that both NODE and ANODE perform worse than RNN-GRU decoder because only the context vector (i.e., an initial state of ODEs) is given to the decoder to produce an output sequence including future predictions. This is opposed to RNNs, where the \u03c4-th data can be fed into the network as an input to the \u03c4-th RNN step and can be used to produce the (\u03c4 +1)-th prediction. Thus, to make accurate predictions with NODE and ANODE, underlying dynamics of %ILI describing the long-term dependency has to be learned very accurately, which is typically very difficult to achieve (due to e.g., noise in measurements, limited number of observations). Along with this reason, since RNN-LSTM or GRU is the dominant choice in many previous studies [11] [12] [13] [14] [15] [16] , we will consider only the Seq2Seq model with RNN-GRU as our baseline for comparison in the following experiments.",
            "cite_spans": [
                {
                    "start": 1719,
                    "end": 1723,
                    "text": "[11]",
                    "ref_id": "BIBREF10"
                },
                {
                    "start": 1724,
                    "end": 1728,
                    "text": "[12]",
                    "ref_id": "BIBREF11"
                },
                {
                    "start": 1729,
                    "end": 1733,
                    "text": "[13]",
                    "ref_id": "BIBREF12"
                },
                {
                    "start": 1734,
                    "end": 1738,
                    "text": "[14]",
                    "ref_id": "BIBREF13"
                },
                {
                    "start": 1739,
                    "end": 1743,
                    "text": "[15]",
                    "ref_id": "BIBREF14"
                },
                {
                    "start": 1744,
                    "end": 1748,
                    "text": "[16]",
                    "ref_id": "BIBREF15"
                }
            ],
            "ref_spans": [
                {
                    "start": 209,
                    "end": 216,
                    "text": "Table 1",
                    "ref_id": "TABREF1"
                }
            ],
            "section": "One-week-ahead predictions results"
        },
        {
            "text": "Temporal convolutional networks. Next we discuss results obtained by TCN. In this experiment, we consider the same supervised learning settings for the input and the target data, i.e., the i-th input data sequence is fx \u00f0i\u00de t g w hist t\u00bc1 and the i-th target data sequence is fy \u00f0i\u00de t g w hist t\u00bc1 , where y \u03c4 = x \u03c4+1 and consider the same loss function, the MSE.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "One-week-ahead predictions results"
        },
        {
            "text": "For TCN, there are three hyperparameters that we can tune for TC layers: the number of RESBLOCK n R , the number of kernel filters n k , and the size of kernels k. In the following experiments, we vary these hyperparameters as n R = {3, 4, 5, 6, 7, 8}, n k = {4}, and k = {2, 4, 8}. Note that we employ the same number of kernel filters for all RESBLOCKs (e.g., if n k = 4, all TC layers in all RESBLOCKs have 4 kernel filters) because we observe that changing this parameter has a negligible impact to the performances in the near-term %ILI prediction. Lastly, as in the previous experiments, we vary lengths of historical observations w hist = {16, 32, 64, 128}.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "One-week-ahead predictions results"
        },
        {
            "text": "For the choices of the number of residual blocks n R = {3, 4}, there seem be no clear trend or differences between the performances of TCNs for all considered hyperparameters, k = {2, 4, 8} and w hist = {16, 32, 64, 128}. For n R = {5, 6, 7, 8}, the TCNs perform better with longer subsequences w hist = {64, 128}. We believe this is caused by the fact that increasing the number of RESBLOCKs results in larger dilation factors d and, consequently, larger receptive fields, which does not have significant impacts on shorter subsequences (i.e., w hist = {16, 32}), but have significant impacts on longer subsequences (i.e., w hist = {64, 128}). Fig 9 shows the results obtained by using the TCNs for varying number of residual blocks n R = {5, 6, 7, 8} with the kernel size k = 4. The figures essentially show that RMSE, MAPE, and L2E tend to decrease and PCORR tend to increase as w hist becomes longer. From the experiments of the TCNs with the kernel size k = {2, 8} and n R = {5, 6, 7, 8}, we observe the same trend (i.e., improved performances with longer w hist ) in most cases.",
            "cite_spans": [],
            "ref_spans": [
                {
                    "start": 645,
                    "end": 656,
                    "text": "Fig 9 shows",
                    "ref_id": "FIGREF9"
                }
            ],
            "section": "One-week-ahead predictions results"
        },
        {
            "text": "Simple neural attentive meta-learner. Next, we present experimental results obtained by using SNAIL. Again, we consider the same supervised learning setting for the input and the target data, i.e., the i-th input data sequence is fx \u00f0i\u00de t g w hist t\u00bc1 and the i-th target data sequence is fy \u00f0i\u00de t g w hist t\u00bc1 , where y \u03c4 = x \u03c4+1 and we minimize the MSE. We follow the same network architecture considered in the original paper [50] ; there are three ATTENTIONBLOCKs interleaved with two TCBLOCKs followed by a 1 \u00d7 1 convolutional layers. For each TCBLOCK, there are three hyperparameters for TC layers, the number of TC layers n TC , the number of kernel filters n k , and the size of kernels k; we consider the same choices of the hyperparameters for the two TCBLOCKs. From the empirical experience that we obtained from the previous experiments with TCNs, we choose the values of the hyperparameters as follows: n TC = {6, 7, 8}, n k = {4, 8}, and k = {2, 4, 8}. For each ATTENTIONBLOCK, there are two hyperparameters, the size of the attention keys n key and the size of the attention values n value . We vary the value of the first parameter as n key = {16, 32} and fix the value of the second parameter as n value = 32.",
            "cite_spans": [
                {
                    "start": 429,
                    "end": 433,
                    "text": "[50]",
                    "ref_id": "BIBREF24"
                }
            ],
            "ref_spans": [],
            "section": "One-week-ahead predictions results"
        },
        {
            "text": "As shown in the experimental results of TCNs, the SNAIL architectures tend to perform better with longer sub-sequences (i.e., w hist = {64, 128}). Fig 10 depicts the results obtained by using the SNAIL architectures with the kernel size k = 4 for varying n TC and n key , and shows that the best performances are achieved with w hist = 128 in most cases (with the exception depicted in the yellow curve). We also observe that the SNAIL architectures with k = {2, 8} and n k = 8, of which experimental results are not shown, perform the best with w hist = 128 in most cases.",
            "cite_spans": [],
            "ref_spans": [
                {
                    "start": 147,
                    "end": 161,
                    "text": "Fig 10 depicts",
                    "ref_id": "FIGREF1"
                }
            ],
            "section": "One-week-ahead predictions results"
        },
        {
            "text": "Performance comparisons between Seq2Seq, TCN, and SNAIL. We now compare the three sequence models discussed above: Seq2Seq architecture with GRU cells, TCN, and SNAIL. For each performance metric, we pick the best performing neural network configurations (i.e., network architectures and their hyperparameters). Table 2 lists the neural network configurations of each considered neural networks that perform the best for each performance ",
            "cite_spans": [],
            "ref_spans": [
                {
                    "start": 312,
                    "end": 319,
                    "text": "Table 2",
                    "ref_id": null
                }
            ],
            "section": "One-week-ahead predictions results"
        },
        {
            "text": "metric. Note that for RMSE and L2E, the same neural network configurations are used to achieve the best performances. ). Thus, the relative performance of SNAIL against Seq2-Seq decreases going from left to right. For a more comprehensive comparison between all the states of the US, see Ref. [65] . Table 3 shows the four performance metrics computed using the best performing neural network configurations (Table 2) . Along with the results of neural networks, we also present the results of more traditional approaches: persistence model, autoregressive (AR) model and autoregressive integrated moving average (ARIMA) model. For AR, we have tested three different lag values 16, 32, and 64. We report only the results of the best performing setting (i.e., lag is 16, AR (16)). For ARIMA, following Refs. [14, 17] , we consider the choice of parameter values (p, d, q) = (3, 0, 3), where p and q refer to the orders of the autoregressive model and the moving-average model, and d refers to the degree of differencing. For the earlier works on epidemics modeling with ARIMA, we refer readers to Refs. [66, 67] . Each performance metric is measured for each state and then averaged over 49 states. For all four performance metrics, both TCN and SNAIL outperform Seq2Seq; SNAIL performs slightly better than TCN. Recall ARIMA(3,0,3) , Seq2Seq, TCN, and SNAIL for one-week-ahead forecasts. The performance metrics are averaged over 49 states. The symbols # and \" indicate that the lower and higher values correspond to the better performance.",
            "cite_spans": [
                {
                    "start": 293,
                    "end": 297,
                    "text": "[65]",
                    "ref_id": "BIBREF39"
                },
                {
                    "start": 807,
                    "end": 811,
                    "text": "[14,",
                    "ref_id": "BIBREF13"
                },
                {
                    "start": 812,
                    "end": 815,
                    "text": "17]",
                    "ref_id": null
                },
                {
                    "start": 1102,
                    "end": 1106,
                    "text": "[66,",
                    "ref_id": "BIBREF40"
                },
                {
                    "start": 1107,
                    "end": 1110,
                    "text": "67]",
                    "ref_id": "BIBREF41"
                }
            ],
            "ref_spans": [
                {
                    "start": 300,
                    "end": 307,
                    "text": "Table 3",
                    "ref_id": "TABREF2"
                },
                {
                    "start": 408,
                    "end": 417,
                    "text": "(Table 2)",
                    "ref_id": null
                },
                {
                    "start": 1319,
                    "end": 1331,
                    "text": "ARIMA(3,0,3)",
                    "ref_id": "FIGREF3"
                }
            ],
            "section": "PLOS ONE"
        },
        {
            "text": "AR ( 16] . Figs 12-14 provide more information on the bar plots for the results obtained with the three neural network models. Fig 12 depicts the boxplots of all four performance metrics measured by using Seq2Seq, TCN, and SNAIL. These boxplots essentially compute statistical quantities from the results shown in Fig 11: means, medians, and interquartiles ranges. Fig 14  reports the proportions of the states where TCN and SNAIL outperform Seq2Seq, respectively, and SNAIL outperforms TCN in 0, 1, 2, 3, or all 4 metrics (RMSE, MAPE, L2E, and PCORR). Both TCN and SNAIL outperform in 29 and 30 states for at least three (out of four) performance metrics than Seq2Seq. SNAIL performs slightly better than TCN; in 22 states, SNAIL performs better for at least three performance metrics, ties in 12 states, and in 15 states, TCN performs better for at least three performance metrics. These observations agree with the statistics reported in Table 3 and Fig 12. Further, we apply Friedman's test on the three neural network models considered above. For each error metric (i.e., RMSE, MAPE, L2E, and PCORR), we rank each models in 49 states and compute the test statistic and the p-value. Overall, SNAIL and TCN achieve higher ranks compared to Seq2Seq, and the test statistics for each error metric are as follows. For RMSE and L2E, the test statistic and the p-value are 4.204 and 0.122, respectively. For MAPE, the corresponding values are 3.959 and 0.138, respectively. As the models are trained with an objective function (and the validation as well) that measures the discrepancy between the ground truth and the predictions in mean-square error, the models are consistently ranked in RMSE and L2E. Since MAPE is a closely related error metric with MSE, the ranks of the models are also shown to be consistent over 49 states. As opposed to these three measures, for PCORR, the test statistic is 9.837 and the p-value is 0.007. This result suggests that the models are not consistently ranked on the error metric that the models are not directly minimized for. ",
            "cite_spans": [
                {
                    "start": 5,
                    "end": 8,
                    "text": "16]",
                    "ref_id": "BIBREF15"
                }
            ],
            "ref_spans": [
                {
                    "start": 127,
                    "end": 141,
                    "text": "Fig 12 depicts",
                    "ref_id": "FIGREF1"
                },
                {
                    "start": 314,
                    "end": 321,
                    "text": "Fig 11:",
                    "ref_id": "FIGREF1"
                },
                {
                    "start": 365,
                    "end": 380,
                    "text": "Fig 14  reports",
                    "ref_id": "FIGREF1"
                },
                {
                    "start": 941,
                    "end": 948,
                    "text": "Table 3",
                    "ref_id": "TABREF2"
                },
                {
                    "start": 953,
                    "end": 960,
                    "text": "Fig 12.",
                    "ref_id": "FIGREF1"
                }
            ],
            "section": "Persistence"
        },
        {
            "text": "Lastly, we perform experiments with varying prediction horizons w pred . We again consider Seq2Seq, TCN, and SNAIL models. For training Seq2Seq model, as in the previous Seq2Seq setting, the i-th input sequence is denoted by x \u00f0i\u00de 1 ; . . . ; x \u00f0i\u00de w hist . The encoder RNN network operates on this input sequence to produce a context vector, then the decoder receives the last element in the input sequence (i.e., x \u00f0i\u00de w hist ) and the context vector to produce output fo \u00f0i\u00de 1 ; . . . ; o \u00f0i\u00de w pred g, which attempts to match fy \u00f0i\u00de 1 ; . . . ; y \u00f0i\u00de w hist g \u00bc fx \u00f0i\u00de w hist \u00fe1 ; . . . ; x \u00f0i\u00de w hist \u00few pred g. For TCN and SNAIL, i-th input data sequence is fx \u00f0i\u00de t g w hist t\u00bc1 and the i-th target data sequence is f\u00f0y \u00f0i\u00de t ; . . . ; y \u00f0i\u00de t\u00few pred \u00c0 1 \u00deg",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Multi-weeks-ahead predictions"
        },
        {
            "text": ", where y \u03c4 = x \u03c4+1 .",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Multi-weeks-ahead predictions"
        },
        {
            "text": "We conduct experiments for varying prediction horizons {1, 2, 3, 4} because the weekly % ILI report often takes one to four weeks to be processed and present the results in Table 4 . In addition, these forecasts are used in predicting the demand for resources with long lead-times. and measure all four performance metrics with three network models. In most cases, both TCN and SNAIL outperform Seq2Seq in all error metrics for w pred = {1, 2, 3}. For w pred = 4, SNAIL outperforms Seq2Seq in three error metrics and TCN for all error metrics and Seq2Seq outperforms TCN in all four error metrics. The prediction accuracy measured via TCN and SNAIL in all four metrics are degraded as w pred increases from 3 to 4. Interestingly, as opposed to such degradation, there is virtually no degradation in the prediction accuracy computed using Seq2Seq as w pred increases from 3 to 4. Table 4 , the prediction accuracy becomes degraded as the longer prediction horizon is taken. Nonetheless, the prediction results yield moderately accurate predictions capturing different %ILI dynamics in each state (e.g., SNAIL predicts %ILI ranges from around 1.5 to 5 in AZ, NY and from 1.5 to 3 in AZ, SD) and also capturing the useful properties such as peaks and slopes in most cases.",
            "cite_spans": [],
            "ref_spans": [
                {
                    "start": 173,
                    "end": 180,
                    "text": "Table 4",
                    "ref_id": "TABREF5"
                },
                {
                    "start": 879,
                    "end": 886,
                    "text": "Table 4",
                    "ref_id": "TABREF5"
                }
            ],
            "section": "Multi-weeks-ahead predictions"
        },
        {
            "text": "The series of experiments above show the effect of the simple, uni-modal, if noisy, influenza curves. Table 5 summarizes all neural network models considered for this study. The first class of models are RNNs with LSTM or GRU cells, where the output of each RNN step is a oneweek ahead prediction. Fig 7 shows that adding multiple layers to the RNNs (irrespective of whether LSTM or GRU cells are used) only marginally improve predictive skill and training the model on a longer sequence of data (Fig 6) does not results in any improvement. That is, the RNN models achieve their predictive skill with modest data and modest architectural complexity, and training a higher capacity model results in a only a marginally better one-weekahead forecast.",
            "cite_spans": [],
            "ref_spans": [
                {
                    "start": 102,
                    "end": 109,
                    "text": "Table 5",
                    "ref_id": null
                },
                {
                    "start": 298,
                    "end": 309,
                    "text": "Fig 7 shows",
                    "ref_id": "FIGREF7"
                },
                {
                    "start": 496,
                    "end": 503,
                    "text": "(Fig 6)",
                    "ref_id": "FIGREF6"
                }
            ],
            "section": "Discussion"
        },
        {
            "text": "The next class of models considered in this study is sequence-to-sequence type (or encoderdecoder type) neural networks, where the encoder takes the input sequence (history), then generates the context vector, and the decoder utilizes the context vector to make predictions. Fig 8 and Table 1 show the impact of different architectural choices (i.e., either with Sequence-to-sequence-type neural networks Seq2Seq (GRU) Encoder-decoder type architecture: both the encoder and the decoder are modeled as RNN-GRU -the encoder produces a context vector, which is then fed into the decoder RNN; the decoder reconstructs the input sequence shifted by the N steps.",
            "cite_spans": [],
            "ref_spans": [
                {
                    "start": 275,
                    "end": 284,
                    "text": "Fig 8 and",
                    "ref_id": "FIGREF8"
                },
                {
                    "start": 285,
                    "end": 292,
                    "text": "Table 1",
                    "ref_id": "TABREF1"
                }
            ],
            "section": "Discussion"
        },
        {
            "text": "Encoder-decoder type architecture: the encoder is modeled as RNN-GRU and the decoder is modeled as neural ordinary differential equations-the encoder produces a context vector, which is then used as an initial condition for the NODE decoder RNN-GRU decoder or NODE decoder) and training data size for the Seq2Seq model. We see that the improvement in predictive skill is modest: the Seq2Seq model performs slightly better than the RNN models, implying that the complexity or model-form of Seq2Seq is of the wrong type and consequently does not contribute to predictive skill. We believe that introducing more advanced deep learning techniques such as attention mechanism to Seq2Seq architecture might be a key to make improvements in prediction accuracy as shown in [16, 17] . Furthermore, we have demonstrated that having NODE or ANODE decoder in Seq2Seq architecture does not help improving the prediction accuracy. We believe this is partly because enforcing short-term dependency in NODE or ANODE is difficult as opposed to RNN-GRU. We conclude with temporal-convolution-layers-based neural networks, where the temporal causal convolution provides a better means to incorporate distant history by using exponential increasing dilation. As opposed to RNN, which takes multiple RNN steps to convey the information contained in the distant input, TCN provides a provide more direct computational path to the distant input. The TC-layer-based models show the better outcomes in Figs 9 and 10-combinations of higher architectural complexity (i.e., n R > 6 and n TC > 7) and longer training sequence w hist > 32 result in a better model. Fig 11 and Table 3 show that, on the whole, TCN and SNAIL outperform Seq2Seq. Table 4 shows a more complex behavior where both TCN and SNAIL perform better than Seq2Seq although Seq2Seq demonstrated less degradation of accuracy as the prediction horizon increases from 3 to 4 weeks.",
            "cite_spans": [
                {
                    "start": 766,
                    "end": 770,
                    "text": "[16,",
                    "ref_id": "BIBREF15"
                },
                {
                    "start": 771,
                    "end": 774,
                    "text": "17]",
                    "ref_id": null
                }
            ],
            "ref_spans": [
                {
                    "start": 1636,
                    "end": 1646,
                    "text": "Fig 11 and",
                    "ref_id": "FIGREF1"
                },
                {
                    "start": 1647,
                    "end": 1654,
                    "text": "Table 3",
                    "ref_id": "TABREF2"
                },
                {
                    "start": 1714,
                    "end": 1721,
                    "text": "Table 4",
                    "ref_id": "TABREF5"
                }
            ],
            "section": "Seq2Seq (NODE)"
        },
        {
            "text": "Overall, we conclude that the TC-layer-based models achieve better performance due to their larger receptive field, which allows the models to take and process longer training sequences easily. We also note that, as shown in Ref.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Seq2Seq (NODE)"
        },
        {
            "text": "[17], the RNN-LSTM model, which had the least impressive performance in this study, is substantially better than ARIMA (3, 0, 3)-it has about half the RMSE, and the Pearson correlation with the data that is about 20% better. Thus, deep learning models, irrespective of RNNs or CNNs, could be profitably employed in epidemiological modeling.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Seq2Seq (NODE)"
        },
        {
            "text": "Various deep learning techniques for sequence modeling have been employed for ILI predictions. As we described in Introduction, nearly all deep-learning-based approaches heavily rely on RNNs with LSTM. We categorize these approaches into two classes: one class of approaches that utilizes only CDC data and another class of approaches that utilizes external factors affecting flu activity or external information that can be used as an indicator of flu activity.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Related work"
        },
        {
            "text": "In Ref. [13] , weekly influenza activity levels at week \u03c4 were used as an input to convolutional layers to extract features that capture spatial correlations across regions where the statistics are collected (e.g., the U.S. states) and then the extracted features were used as an input to an RNN with GRU to capture temporal correlations of the weekly influenza activity levels. Ref. [12] studied four variant constructions of LSTM networks with %ILI data: one instance is a single LSTM network, where a single application of the trained network gives multi-step-ahead predictions, and another instance is a set of multiple LSTM networks, where each LSTM is trained to predict %ILI at specific time index of multi-step-ahead predictions.",
            "cite_spans": [
                {
                    "start": 8,
                    "end": 12,
                    "text": "[13]",
                    "ref_id": "BIBREF12"
                },
                {
                    "start": 384,
                    "end": 388,
                    "text": "[12]",
                    "ref_id": "BIBREF11"
                }
            ],
            "ref_spans": [],
            "section": "CDC data only"
        },
        {
            "text": "Another line of deep-learning-based approaches is time-sequence models assisted by exogenous factors. Ref. [11] utilized features extracted from a Twitter dataset as input features to LSTM networks along with ILI information collected from military populations. Ref. [14] used climate information and geo-spatial factors as input features to LSTM networks, while Ref. [15] proposed a framework for high-resolution (e.g., county-level) ILI predictions, which generates a high-resolution synthetic dataset via an epidemic simulator and then use the dataset for training a neural network. The proposed neural network consists of two LSTM networks; one processes within-season sequences and the other processes between-season sequences. In Ref. [16] , a Seq2Seq model with LSTM is trained with %ILI and Google trends data.",
            "cite_spans": [
                {
                    "start": 107,
                    "end": 111,
                    "text": "[11]",
                    "ref_id": "BIBREF10"
                },
                {
                    "start": 267,
                    "end": 271,
                    "text": "[14]",
                    "ref_id": "BIBREF13"
                },
                {
                    "start": 368,
                    "end": 372,
                    "text": "[15]",
                    "ref_id": "BIBREF14"
                },
                {
                    "start": 741,
                    "end": 745,
                    "text": "[16]",
                    "ref_id": "BIBREF15"
                }
            ],
            "ref_spans": [],
            "section": "External factors"
        },
        {
            "text": "In this study, we have investigated the feasibility of modeling epidemiological data with variants of temporal convolutional network models, and demonstrated their performance gain over recurrent neural network models. We investigate whether deep-learning models provide any advantage in forecasting skill over linear methods and perform extensive experiments for comparing all considered neural network models including RNN-LSTM, RNN-GRU, Sequence-to-Sequence with RNN-GRU decoder and neural ordinary differential equation decoder, temporal convolution networks, and simple neural attentive meta-learner. We have observed that RNN-LSTM, which has been shown to be far better than conventional models including AR and ARIMA models in our own experiments and experimental results in Refs. [15, 17] or classical machine learning methods such as SVM in Ref. [11] , performs the worst among all considered neural network models and we find that neural networks based on temporal convolutional layers (TCN and SNAIL) tend to outperform RNN-LSTM/RNN-GRU and Seq2Seq models.",
            "cite_spans": [
                {
                    "start": 788,
                    "end": 792,
                    "text": "[15,",
                    "ref_id": "BIBREF14"
                },
                {
                    "start": 793,
                    "end": 796,
                    "text": "17]",
                    "ref_id": null
                },
                {
                    "start": 855,
                    "end": 859,
                    "text": "[11]",
                    "ref_id": "BIBREF10"
                }
            ],
            "ref_spans": [],
            "section": "Conclusion"
        },
        {
            "text": "However, considering the significant increase in neural network complexity, the performance improvements made by TCN and SNAIL over RNN-GRU can be seen as modest, which suggests that modeling the simple, uni-modal, if noisy, form of influenza curves may not require a tremendous degree of complexity in the neural network architectures. This bottleneck may be due to an intrinsic limitation of purely data-driven approach and could be overcome by using external data or indicators of influenza-like illness or building a model that combines data-driven approach with mechanistic or compartmental models. Nonetheless, we observe from our extensive experiments that complex deep learning models can be fitted to relatively modest epidemiological data without suffering from over-fitting, thanks to our minibatching stochastic gradient optimizer with the early-stopping strategy, and can provide better forecasts than conventional data-driven ARIMA models and simple RNN-GRU models.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Conclusion"
        },
        {
            "text": "Supporting information S1 Appendix. Detailed technical descriptions of neural network architectures. (PDF)",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Conclusion"
        }
    ],
    "bib_entries": {
        "BIBREF0": {
            "ref_id": "b0",
            "title": "The annual impact of seasonal influenza in the US: measuring disease burden and costs",
            "authors": [
                {
                    "first": "Nam",
                    "middle": [],
                    "last": "Molinari",
                    "suffix": ""
                },
                {
                    "first": "I",
                    "middle": [
                        "R"
                    ],
                    "last": "Ortega-Sanchez",
                    "suffix": ""
                },
                {
                    "first": "M",
                    "middle": [
                        "L"
                    ],
                    "last": "Messonnier",
                    "suffix": ""
                },
                {
                    "first": "W",
                    "middle": [
                        "W"
                    ],
                    "last": "Thompson",
                    "suffix": ""
                },
                {
                    "first": "P",
                    "middle": [
                        "M"
                    ],
                    "last": "Wortley",
                    "suffix": ""
                },
                {
                    "first": "E",
                    "middle": [],
                    "last": "Weintraub",
                    "suffix": ""
                }
            ],
            "year": 2007,
            "venue": "Vaccine",
            "volume": "25",
            "issn": "27",
            "pages": "5086--5096",
            "other_ids": {
                "DOI": [
                    "10.1016/j.vaccine.2007.03.046"
                ],
                "PMID": [
                    "17544181"
                ]
            }
        },
        "BIBREF1": {
            "ref_id": "b1",
            "title": "Google Flu Trends: Correlation With Emergency Department Influenza Rates and Crowding Metrics",
            "authors": [
                {
                    "first": "A",
                    "middle": [
                        "F"
                    ],
                    "last": "Dugas",
                    "suffix": ""
                },
                {
                    "first": "Y",
                    "middle": [
                        "H"
                    ],
                    "last": "Hsieh",
                    "suffix": ""
                },
                {
                    "first": "S",
                    "middle": [
                        "R"
                    ],
                    "last": "Levin",
                    "suffix": ""
                },
                {
                    "first": "J",
                    "middle": [
                        "M"
                    ],
                    "last": "Pines",
                    "suffix": ""
                },
                {
                    "first": "D",
                    "middle": [
                        "P"
                    ],
                    "last": "Mareiniss",
                    "suffix": ""
                },
                {
                    "first": "A",
                    "middle": [],
                    "last": "Mohareb",
                    "suffix": ""
                }
            ],
            "year": 2012,
            "venue": "Clinical Infectious Diseases",
            "volume": "54",
            "issn": "4",
            "pages": "463--469",
            "other_ids": {
                "DOI": [
                    "10.1093/cid/cir883"
                ],
                "PMID": [
                    "22230244"
                ]
            }
        },
        "BIBREF4": {
            "ref_id": "b4",
            "title": "Nonmechanistic forecasts of seasonal influenza with iterative one-week-ahead distributions",
            "authors": [
                {
                    "first": "L",
                    "middle": [
                        "C"
                    ],
                    "last": "Brooks",
                    "suffix": ""
                },
                {
                    "first": "D",
                    "middle": [
                        "C"
                    ],
                    "last": "Farrow",
                    "suffix": ""
                },
                {
                    "first": "S",
                    "middle": [],
                    "last": "Hyun",
                    "suffix": ""
                },
                {
                    "first": "R",
                    "middle": [
                        "J"
                    ],
                    "last": "Tibshirani",
                    "suffix": ""
                },
                {
                    "first": "R",
                    "middle": [],
                    "last": "Rosenfeld",
                    "suffix": ""
                }
            ],
            "year": 2018,
            "venue": "PLoS computational biology",
            "volume": "14",
            "issn": "6",
            "pages": "",
            "other_ids": {
                "DOI": [
                    "10.1371/journal.pcbi.1006134"
                ]
            }
        },
        "BIBREF5": {
            "ref_id": "b5",
            "title": "Influenza forecasting with Google flu trends",
            "authors": [
                {
                    "first": "A",
                    "middle": [
                        "F"
                    ],
                    "last": "Dugas",
                    "suffix": ""
                },
                {
                    "first": "M",
                    "middle": [],
                    "last": "Jalalpour",
                    "suffix": ""
                },
                {
                    "first": "Y",
                    "middle": [],
                    "last": "Gel",
                    "suffix": ""
                },
                {
                    "first": "S",
                    "middle": [],
                    "last": "Levin",
                    "suffix": ""
                },
                {
                    "first": "F",
                    "middle": [],
                    "last": "Torcaso",
                    "suffix": ""
                },
                {
                    "first": "T",
                    "middle": [],
                    "last": "Igusa",
                    "suffix": ""
                }
            ],
            "year": 2013,
            "venue": "PloS one",
            "volume": "8",
            "issn": "2",
            "pages": "",
            "other_ids": {
                "DOI": [
                    "10.1371/journal.pone.0056176"
                ],
                "PMID": [
                    "23457520"
                ]
            }
        },
        "BIBREF6": {
            "ref_id": "b6",
            "title": "Accurate estimation of influenza epidemics using Google search data via ARGO",
            "authors": [
                {
                    "first": "S",
                    "middle": [],
                    "last": "Yang",
                    "suffix": ""
                },
                {
                    "first": "M",
                    "middle": [],
                    "last": "Santillana",
                    "suffix": ""
                },
                {
                    "first": "S",
                    "middle": [
                        "C"
                    ],
                    "last": "Kou",
                    "suffix": ""
                }
            ],
            "year": 2015,
            "venue": "Proceedings of the National Academy of Sciences",
            "volume": "112",
            "issn": "47",
            "pages": "14473--14478",
            "other_ids": {
                "DOI": [
                    "10.1073/pnas.1515373112"
                ]
            }
        },
        "BIBREF7": {
            "ref_id": "b7",
            "title": "Using electronic health records and Internet search information for accurate influenza forecasting",
            "authors": [
                {
                    "first": "S",
                    "middle": [],
                    "last": "Yang",
                    "suffix": ""
                },
                {
                    "first": "M",
                    "middle": [],
                    "last": "Santillana",
                    "suffix": ""
                },
                {
                    "first": "J",
                    "middle": [
                        "S"
                    ],
                    "last": "Brownstein",
                    "suffix": ""
                },
                {
                    "first": "J",
                    "middle": [],
                    "last": "Gray",
                    "suffix": ""
                },
                {
                    "first": "S",
                    "middle": [],
                    "last": "Richardson",
                    "suffix": ""
                },
                {
                    "first": "S",
                    "middle": [],
                    "last": "Kou",
                    "suffix": ""
                }
            ],
            "year": 2017,
            "venue": "BMC infectious diseases",
            "volume": "17",
            "issn": "1",
            "pages": "",
            "other_ids": {
                "DOI": [
                    "10.1186/s12879-017-2424-7"
                ]
            }
        },
        "BIBREF8": {
            "ref_id": "b8",
            "title": "Using networks to combine \"big data\" and traditional surveillance to improve influenza predictions",
            "authors": [
                {
                    "first": "M",
                    "middle": [
                        "W"
                    ],
                    "last": "Davidson",
                    "suffix": ""
                },
                {
                    "first": "D",
                    "middle": [
                        "A"
                    ],
                    "last": "Haim",
                    "suffix": ""
                },
                {
                    "first": "J",
                    "middle": [
                        "M"
                    ],
                    "last": "Radin",
                    "suffix": ""
                }
            ],
            "year": 2015,
            "venue": "Scientific reports",
            "volume": "5",
            "issn": "",
            "pages": "",
            "other_ids": {
                "DOI": [
                    "10.1038/srep08154"
                ]
            }
        },
        "BIBREF9": {
            "ref_id": "b9",
            "title": "Improved state-level influenza nowcasting in the United States leveraging Internet-based data and network approaches",
            "authors": [
                {
                    "first": "F",
                    "middle": [
                        "S"
                    ],
                    "last": "Lu",
                    "suffix": ""
                },
                {
                    "first": "M",
                    "middle": [
                        "W"
                    ],
                    "last": "Hattab",
                    "suffix": ""
                },
                {
                    "first": "C",
                    "middle": [
                        "L"
                    ],
                    "last": "Clemente",
                    "suffix": ""
                },
                {
                    "first": "M",
                    "middle": [],
                    "last": "Biggerstaff",
                    "suffix": ""
                },
                {
                    "first": "M",
                    "middle": [],
                    "last": "Santillana",
                    "suffix": ""
                }
            ],
            "year": 2019,
            "venue": "Nature communications",
            "volume": "10",
            "issn": "1",
            "pages": "1--10",
            "other_ids": {}
        },
        "BIBREF10": {
            "ref_id": "b10",
            "title": "Forecasting influenza-like illness dynamics for military populations using neural networks and social media",
            "authors": [
                {
                    "first": "S",
                    "middle": [],
                    "last": "Volkova",
                    "suffix": ""
                },
                {
                    "first": "E",
                    "middle": [],
                    "last": "Ayton",
                    "suffix": ""
                },
                {
                    "first": "K",
                    "middle": [],
                    "last": "Porterfield",
                    "suffix": ""
                },
                {
                    "first": "C",
                    "middle": [
                        "D"
                    ],
                    "last": "Corley",
                    "suffix": ""
                }
            ],
            "year": 2017,
            "venue": "PloS one",
            "volume": "12",
            "issn": "12",
            "pages": "",
            "other_ids": {
                "DOI": [
                    "10.1371/journal.pone.0188941"
                ],
                "PMID": [
                    "29244814"
                ]
            }
        },
        "BIBREF11": {
            "ref_id": "b11",
            "title": "Multi-step prediction for influenza outbreak by an adjusted long short-term memory",
            "authors": [
                {
                    "first": "J",
                    "middle": [],
                    "last": "Zhang",
                    "suffix": ""
                },
                {
                    "first": "K",
                    "middle": [],
                    "last": "Nawata",
                    "suffix": ""
                }
            ],
            "year": 2018,
            "venue": "Epidemiology & Infection",
            "volume": "146",
            "issn": "7",
            "pages": "809--816",
            "other_ids": {
                "DOI": [
                    "10.1017/S0950268818000705"
                ]
            }
        },
        "BIBREF12": {
            "ref_id": "b12",
            "title": "Deep learning for epidemiological predictions",
            "authors": [
                {
                    "first": "Y",
                    "middle": [],
                    "last": "Wu",
                    "suffix": ""
                },
                {
                    "first": "Y",
                    "middle": [],
                    "last": "Yang",
                    "suffix": ""
                },
                {
                    "first": "H",
                    "middle": [],
                    "last": "Nishiura",
                    "suffix": ""
                },
                {
                    "first": "M",
                    "middle": [],
                    "last": "Saitoh",
                    "suffix": ""
                }
            ],
            "year": 2018,
            "venue": "The 41st International ACM SIGIR Conference on Research & Development",
            "volume": "",
            "issn": "",
            "pages": "1085--1088",
            "other_ids": {}
        },
        "BIBREF13": {
            "ref_id": "b13",
            "title": "A novel data-driven model for real-time influenza forecasting",
            "authors": [
                {
                    "first": "S",
                    "middle": [
                        "R"
                    ],
                    "last": "Venna",
                    "suffix": ""
                },
                {
                    "first": "A",
                    "middle": [],
                    "last": "Tavanaei",
                    "suffix": ""
                },
                {
                    "first": "R",
                    "middle": [
                        "N"
                    ],
                    "last": "Gottumukkala",
                    "suffix": ""
                },
                {
                    "first": "V",
                    "middle": [
                        "V"
                    ],
                    "last": "Raghavan",
                    "suffix": ""
                },
                {
                    "first": "A",
                    "middle": [
                        "S"
                    ],
                    "last": "Maida",
                    "suffix": ""
                },
                {
                    "first": "S",
                    "middle": [],
                    "last": "Nichols",
                    "suffix": ""
                }
            ],
            "year": 2018,
            "venue": "IEEE Access",
            "volume": "7",
            "issn": "",
            "pages": "7691--7701",
            "other_ids": {
                "DOI": [
                    "10.1109/ACCESS.2018.2888585"
                ]
            }
        },
        "BIBREF14": {
            "ref_id": "b14",
            "title": "DEFSI: Deep learning based epidemic forecasting with synthetic information",
            "authors": [
                {
                    "first": "L",
                    "middle": [],
                    "last": "Wang",
                    "suffix": ""
                },
                {
                    "first": "J",
                    "middle": [],
                    "last": "Chen",
                    "suffix": ""
                },
                {
                    "first": "M",
                    "middle": [],
                    "last": "Marathe",
                    "suffix": ""
                }
            ],
            "year": 2019,
            "venue": "Proceedings of the AAAI Conference on Artificial Intelligence",
            "volume": "33",
            "issn": "",
            "pages": "9607--9612",
            "other_ids": {}
        },
        "BIBREF15": {
            "ref_id": "b15",
            "title": "Sequence to Sequence with Attention for Influenza Prevalence Prediction using Google Trends",
            "authors": [
                {
                    "first": "K",
                    "middle": [],
                    "last": "Kondo",
                    "suffix": ""
                },
                {
                    "first": "A",
                    "middle": [],
                    "last": "Ishikawa",
                    "suffix": ""
                },
                {
                    "first": "M",
                    "middle": [],
                    "last": "Kimura",
                    "suffix": ""
                }
            ],
            "year": 2019,
            "venue": "Proceedings of the 2019 3rd International Conference on Computational Biology and Bioinformatics",
            "volume": "",
            "issn": "",
            "pages": "1--7",
            "other_ids": {}
        },
        "BIBREF16": {
            "ref_id": "b16",
            "title": "Learning to forget: Continual prediction with LSTM. Neural computation",
            "authors": [
                {
                    "first": "F",
                    "middle": [
                        "A"
                    ],
                    "last": "Gers",
                    "suffix": ""
                },
                {
                    "first": "J",
                    "middle": [],
                    "last": "Schmidhuber",
                    "suffix": ""
                },
                {
                    "first": "F",
                    "middle": [],
                    "last": "Cummins",
                    "suffix": ""
                }
            ],
            "year": 2000,
            "venue": "",
            "volume": "12",
            "issn": "",
            "pages": "2451--2471",
            "other_ids": {
                "DOI": [
                    "10.1162/089976600300015015"
                ]
            }
        },
        "BIBREF17": {
            "ref_id": "b17",
            "title": "Massive exploration of neural machine translation architectures",
            "authors": [
                {
                    "first": "D",
                    "middle": [],
                    "last": "Britz",
                    "suffix": ""
                },
                {
                    "first": "Goldie",
                    "middle": [
                        "A"
                    ],
                    "last": "Luong",
                    "suffix": ""
                },
                {
                    "first": "M",
                    "middle": [
                        "T"
                    ],
                    "last": "Le",
                    "suffix": ""
                },
                {
                    "first": "Q",
                    "middle": [],
                    "last": "",
                    "suffix": ""
                }
            ],
            "year": null,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF18": {
            "ref_id": "b18",
            "title": "On the practical computational power of finite precision RNNs for language recognition",
            "authors": [
                {
                    "first": "G",
                    "middle": [],
                    "last": "Weiss",
                    "suffix": ""
                },
                {
                    "first": "Y",
                    "middle": [],
                    "last": "Goldberg",
                    "suffix": ""
                },
                {
                    "first": "E",
                    "middle": [],
                    "last": "Yahav",
                    "suffix": ""
                }
            ],
            "year": 2018,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF19": {
            "ref_id": "b19",
            "title": "Light gated recurrent units for speech recognition",
            "authors": [
                {
                    "first": "M",
                    "middle": [],
                    "last": "Ravanelli",
                    "suffix": ""
                },
                {
                    "first": "P",
                    "middle": [],
                    "last": "Brakel",
                    "suffix": ""
                },
                {
                    "first": "M",
                    "middle": [],
                    "last": "Omologo",
                    "suffix": ""
                },
                {
                    "first": "Y",
                    "middle": [],
                    "last": "Bengio",
                    "suffix": ""
                }
            ],
            "year": 2018,
            "venue": "IEEE Transactions on Emerging Topics in Computational Intelligence",
            "volume": "2",
            "issn": "2",
            "pages": "92--102",
            "other_ids": {
                "DOI": [
                    "10.1109/TETCI.2017.2762739"
                ]
            }
        },
        "BIBREF20": {
            "ref_id": "b20",
            "title": "Sequence to sequence learning with neural networks. In: Advances in neural information processing systems",
            "authors": [
                {
                    "first": "I",
                    "middle": [],
                    "last": "Sutskever",
                    "suffix": ""
                },
                {
                    "first": "O",
                    "middle": [],
                    "last": "Vinyals",
                    "suffix": ""
                },
                {
                    "first": "Q",
                    "middle": [
                        "V"
                    ],
                    "last": "Le",
                    "suffix": ""
                }
            ],
            "year": 2014,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "3104--3112",
            "other_ids": {}
        },
        "BIBREF21": {
            "ref_id": "b21",
            "title": "Multi-scale context aggregation by dilated convolutions",
            "authors": [
                {
                    "first": "F",
                    "middle": [],
                    "last": "Yu",
                    "suffix": ""
                },
                {
                    "first": "V",
                    "middle": [],
                    "last": "Koltun",
                    "suffix": ""
                }
            ],
            "year": 2016,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF22": {
            "ref_id": "b22",
            "title": "Identity mappings in deep residual networks",
            "authors": [
                {
                    "first": "K",
                    "middle": [],
                    "last": "He",
                    "suffix": ""
                },
                {
                    "first": "X",
                    "middle": [],
                    "last": "Zhang",
                    "suffix": ""
                },
                {
                    "first": "S",
                    "middle": [],
                    "last": "Ren",
                    "suffix": ""
                },
                {
                    "first": "J",
                    "middle": [],
                    "last": "Sun",
                    "suffix": ""
                }
            ],
            "year": 2016,
            "venue": "European conference on computer vision",
            "volume": "",
            "issn": "",
            "pages": "630--645",
            "other_ids": {}
        },
        "BIBREF23": {
            "ref_id": "b23",
            "title": "Rectified linear units improve restricted boltzmann machines",
            "authors": [
                {
                    "first": "V",
                    "middle": [],
                    "last": "Nair",
                    "suffix": ""
                },
                {
                    "first": "G",
                    "middle": [
                        "E"
                    ],
                    "last": "Hinton",
                    "suffix": ""
                }
            ],
            "year": 2010,
            "venue": "Proceedings of the 27th international conference on machine learning (ICML-10)",
            "volume": "",
            "issn": "",
            "pages": "807--814",
            "other_ids": {}
        },
        "BIBREF24": {
            "ref_id": "b24",
            "title": "A simple neural attentive meta-learner",
            "authors": [
                {
                    "first": "N",
                    "middle": [],
                    "last": "Mishra",
                    "suffix": ""
                },
                {
                    "first": "M",
                    "middle": [],
                    "last": "Rohaninejad",
                    "suffix": ""
                },
                {
                    "first": "X",
                    "middle": [],
                    "last": "Chen",
                    "suffix": ""
                },
                {
                    "first": "P",
                    "middle": [],
                    "last": "Abbeel",
                    "suffix": ""
                }
            ],
            "year": 2017,
            "venue": "In: ICLR",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF25": {
            "ref_id": "b25",
            "title": "Attention is all you need",
            "authors": [
                {
                    "first": "A",
                    "middle": [],
                    "last": "Vaswani",
                    "suffix": ""
                },
                {
                    "first": "N",
                    "middle": [],
                    "last": "Shazeer",
                    "suffix": ""
                },
                {
                    "first": "N",
                    "middle": [],
                    "last": "Parmar",
                    "suffix": ""
                },
                {
                    "first": "J",
                    "middle": [],
                    "last": "Uszkoreit",
                    "suffix": ""
                },
                {
                    "first": "L",
                    "middle": [],
                    "last": "Jones",
                    "suffix": ""
                },
                {
                    "first": "A",
                    "middle": [
                        "N"
                    ],
                    "last": "Gomez",
                    "suffix": ""
                }
            ],
            "year": 2017,
            "venue": "Advances in neural information processing systems",
            "volume": "",
            "issn": "",
            "pages": "5998--6008",
            "other_ids": {}
        },
        "BIBREF26": {
            "ref_id": "b26",
            "title": "Conditional image generation with pixelcnn decoders",
            "authors": [
                {
                    "first": "A",
                    "middle": [],
                    "last": "Van Den Oord",
                    "suffix": ""
                },
                {
                    "first": "N",
                    "middle": [],
                    "last": "Kalchbrenner",
                    "suffix": ""
                },
                {
                    "first": "L",
                    "middle": [],
                    "last": "Espeholt",
                    "suffix": ""
                },
                {
                    "first": "O",
                    "middle": [],
                    "last": "Vinyals",
                    "suffix": ""
                },
                {
                    "first": "A",
                    "middle": [],
                    "last": "Graves",
                    "suffix": ""
                }
            ],
            "year": 2016,
            "venue": "Advances in neural information processing systems",
            "volume": "",
            "issn": "",
            "pages": "4790--4798",
            "other_ids": {}
        },
        "BIBREF28": {
            "ref_id": "b28",
            "title": "PyTorch: An Imperative Style, High-Performance Deep Learning Library",
            "authors": [
                {
                    "first": "A",
                    "middle": [],
                    "last": "Paszke",
                    "suffix": ""
                },
                {
                    "first": "S",
                    "middle": [],
                    "last": "Gross",
                    "suffix": ""
                },
                {
                    "first": "F",
                    "middle": [],
                    "last": "Massa",
                    "suffix": ""
                },
                {
                    "first": "A",
                    "middle": [],
                    "last": "Lerer",
                    "suffix": ""
                },
                {
                    "first": "J",
                    "middle": [],
                    "last": "Bradbury",
                    "suffix": ""
                },
                {
                    "first": "G",
                    "middle": [],
                    "last": "Chanan",
                    "suffix": ""
                }
            ],
            "year": 2019,
            "venue": "Advances in Neural Information Processing Systems",
            "volume": "32",
            "issn": "",
            "pages": "8024--8035",
            "other_ids": {}
        },
        "BIBREF29": {
            "ref_id": "b29",
            "title": "Optimization methods for large-scale machine learning",
            "authors": [
                {
                    "first": "L",
                    "middle": [],
                    "last": "Bottou",
                    "suffix": ""
                },
                {
                    "first": "F",
                    "middle": [
                        "E"
                    ],
                    "last": "Curtis",
                    "suffix": ""
                },
                {
                    "first": "J",
                    "middle": [],
                    "last": "Nocedal",
                    "suffix": ""
                }
            ],
            "year": 2018,
            "venue": "Siam Review",
            "volume": "60",
            "issn": "2",
            "pages": "223--311",
            "other_ids": {
                "DOI": [
                    "10.1137/16M1080173"
                ]
            }
        },
        "BIBREF30": {
            "ref_id": "b30",
            "title": "A method for stochastic optimization",
            "authors": [
                {
                    "first": "D",
                    "middle": [
                        "P"
                    ],
                    "last": "Kingma",
                    "suffix": ""
                },
                {
                    "first": "J",
                    "middle": [],
                    "last": "Ba",
                    "suffix": ""
                },
                {
                    "first": "",
                    "middle": [],
                    "last": "Adam",
                    "suffix": ""
                }
            ],
            "year": 2014,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF31": {
            "ref_id": "b31",
            "title": "Practical Bayesian optimization of machine learning algorithms",
            "authors": [
                {
                    "first": "J",
                    "middle": [],
                    "last": "Snoek",
                    "suffix": ""
                },
                {
                    "first": "H",
                    "middle": [],
                    "last": "Larochelle",
                    "suffix": ""
                },
                {
                    "first": "R",
                    "middle": [
                        "P"
                    ],
                    "last": "Adams",
                    "suffix": ""
                }
            ],
            "year": 2012,
            "venue": "Advances in neural information processing systems",
            "volume": "",
            "issn": "",
            "pages": "2951--2959",
            "other_ids": {}
        },
        "BIBREF32": {
            "ref_id": "b32",
            "title": "Neural ordinary differential equations",
            "authors": [
                {
                    "first": "T",
                    "middle": [
                        "Q"
                    ],
                    "last": "Chen",
                    "suffix": ""
                },
                {
                    "first": "Y",
                    "middle": [],
                    "last": "Rubanova",
                    "suffix": ""
                },
                {
                    "first": "J",
                    "middle": [],
                    "last": "Bettencourt",
                    "suffix": ""
                },
                {
                    "first": "D",
                    "middle": [
                        "K"
                    ],
                    "last": "Duvenaud",
                    "suffix": ""
                }
            ],
            "year": 2018,
            "venue": "Advances in Neural Information Processing Systems",
            "volume": "",
            "issn": "",
            "pages": "6571--6583",
            "other_ids": {}
        },
        "BIBREF33": {
            "ref_id": "b33",
            "title": "Augmented neural ODEs",
            "authors": [
                {
                    "first": "E",
                    "middle": [],
                    "last": "Dupont",
                    "suffix": ""
                },
                {
                    "first": "A",
                    "middle": [],
                    "last": "Doucet",
                    "suffix": ""
                },
                {
                    "first": "Y",
                    "middle": [
                        "W"
                    ],
                    "last": "Teh",
                    "suffix": ""
                }
            ],
            "year": 2019,
            "venue": "Advances in Neural Information Processing Systems",
            "volume": "",
            "issn": "",
            "pages": "3134--3144",
            "other_ids": {}
        },
        "BIBREF34": {
            "ref_id": "b34",
            "title": "Latent ordinary differential equations for irregularly-sampled time series",
            "authors": [
                {
                    "first": "Y",
                    "middle": [],
                    "last": "Rubanova",
                    "suffix": ""
                },
                {
                    "first": "R",
                    "middle": [
                        "T"
                    ],
                    "last": "Chen",
                    "suffix": ""
                },
                {
                    "first": "D",
                    "middle": [
                        "K"
                    ],
                    "last": "Duvenaud",
                    "suffix": ""
                }
            ],
            "year": 2019,
            "venue": "Advances in Neural Information Processing Systems",
            "volume": "",
            "issn": "",
            "pages": "5320--5330",
            "other_ids": {}
        },
        "BIBREF35": {
            "ref_id": "b35",
            "title": "Turbulence forecasting via Neural ODE",
            "authors": [
                {
                    "first": "G",
                    "middle": [
                        "D"
                    ],
                    "last": "Portwood",
                    "suffix": ""
                },
                {
                    "first": "P",
                    "middle": [
                        "P"
                    ],
                    "last": "Mitra",
                    "suffix": ""
                },
                {
                    "first": "M",
                    "middle": [
                        "D"
                    ],
                    "last": "Ribeiro",
                    "suffix": ""
                },
                {
                    "first": "T",
                    "middle": [
                        "M"
                    ],
                    "last": "Nguyen",
                    "suffix": ""
                },
                {
                    "first": "B",
                    "middle": [
                        "T"
                    ],
                    "last": "Nadiga",
                    "suffix": ""
                },
                {
                    "first": "J",
                    "middle": [
                        "A"
                    ],
                    "last": "Saenz",
                    "suffix": ""
                }
            ],
            "year": null,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF36": {
            "ref_id": "b36",
            "title": "Continuous modeling of sporadicallyobserved time series",
            "authors": [
                {
                    "first": "De",
                    "middle": [],
                    "last": "Brouwer",
                    "suffix": ""
                },
                {
                    "first": "E",
                    "middle": [],
                    "last": "Simm",
                    "suffix": ""
                },
                {
                    "first": "J",
                    "middle": [],
                    "last": "Arany",
                    "suffix": ""
                },
                {
                    "first": "A",
                    "middle": [],
                    "last": "Moreau",
                    "suffix": ""
                },
                {
                    "first": "Y",
                    "middle": [],
                    "last": "Gru-Ode-Bayes",
                    "suffix": ""
                }
            ],
            "year": 2019,
            "venue": "Advances in Neural Information Processing Systems",
            "volume": "",
            "issn": "",
            "pages": "7379--7390",
            "other_ids": {}
        },
        "BIBREF37": {
            "ref_id": "b37",
            "title": "ODE2VAE: Deep generative second order ODEs with Bayesian neural networks",
            "authors": [
                {
                    "first": "C",
                    "middle": [],
                    "last": "Yildiz",
                    "suffix": ""
                },
                {
                    "first": "M",
                    "middle": [],
                    "last": "Heinonen",
                    "suffix": ""
                },
                {
                    "first": "H",
                    "middle": [],
                    "last": "Lahdesmaki",
                    "suffix": ""
                }
            ],
            "year": 2019,
            "venue": "Advances in Neural Information Processing Systems",
            "volume": "",
            "issn": "",
            "pages": "13412--13421",
            "other_ids": {}
        },
        "BIBREF38": {
            "ref_id": "b38",
            "title": "Parameterized Neural Ordinary Differential Equations: Applications to Computational Physics Problems",
            "authors": [
                {
                    "first": "K",
                    "middle": [],
                    "last": "Lee",
                    "suffix": ""
                },
                {
                    "first": "E",
                    "middle": [
                        "J"
                    ],
                    "last": "Parish",
                    "suffix": ""
                }
            ],
            "year": null,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF39": {
            "ref_id": "b39",
            "title": "Predictive Skill of Deep Learning Models Trained on Limited Sequence Data",
            "authors": [
                {
                    "first": "K",
                    "middle": [],
                    "last": "Lee",
                    "suffix": ""
                },
                {
                    "first": "J",
                    "middle": [],
                    "last": "Ray",
                    "suffix": ""
                },
                {
                    "first": "C",
                    "middle": [],
                    "last": "Safta",
                    "suffix": ""
                }
            ],
            "year": null,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF40": {
            "ref_id": "b40",
            "title": "Influenza A and B epidemic criteria based on time-series analysis of health services surveillance data",
            "authors": [
                {
                    "first": "P",
                    "middle": [],
                    "last": "Qu\u00e9nel",
                    "suffix": ""
                },
                {
                    "first": "William",
                    "middle": [],
                    "last": "Dab",
                    "suffix": ""
                }
            ],
            "year": 1998,
            "venue": "European Journal of Epidemiology",
            "volume": "14",
            "issn": "3",
            "pages": "275--285",
            "other_ids": {
                "DOI": [
                    "10.1023/A:1007467814485"
                ]
            }
        },
        "BIBREF41": {
            "ref_id": "b41",
            "title": "Modeling and predicting seasonal influenza transmission in warm regions using climatological parameters",
            "authors": [
                {
                    "first": "R",
                    "middle": [
                        "P"
                    ],
                    "last": "Soebiyanto",
                    "suffix": ""
                },
                {
                    "first": "F",
                    "middle": [],
                    "last": "Adimi",
                    "suffix": ""
                },
                {
                    "first": "R",
                    "middle": [
                        "K"
                    ],
                    "last": "Kiang",
                    "suffix": ""
                }
            ],
            "year": null,
            "venue": "PLoS One",
            "volume": "2010",
            "issn": "5",
            "pages": "",
            "other_ids": {
                "DOI": [
                    "10.1371/journal.pone.0009450"
                ]
            }
        }
    },
    "ref_entries": {
        "FIGREF0": {
            "text": "Fig 1 depicts an example RNN architecture with two hidden layers and Eq (1) describes a folded representation of RNN, shown in the left frame of Fig 1.",
            "latex": null,
            "type": "figure"
        },
        "FIGREF1": {
            "text": "RNN architecture. An example RNN architecture with two hidden layers: A. a folded representation and B. an unfolded representation. The blue circles correspond to an input layer, the red circles correspond to hidden layers, and the yellow circles correspond to an output layer.",
            "latex": null,
            "type": "figure"
        },
        "FIGREF2": {
            "text": "Seq2Seq architecture. An example Seq2Seq architecture with one hidden layer in the encoder and the decoder. The blue circles correspond to an input layer, the red circles correspond to hidden layers, the yellow circles correspond to an output layer, and the light green circle in the middle correspond to a context vector.https://doi.org/10.1371/journal.pone.0254319.g002 dilation factor d. As for RNNs, TC layers can handle arbitrary-length input sequence. Fig 3 illustrates an example of TC layers with several dilation factors.",
            "latex": null,
            "type": "figure"
        },
        "FIGREF3": {
            "text": "TCN architecture. A temporal convolutional network with layers corresponding to exponentially increasing dilation factors d = 1, 2, 4. The blue circles correspond to an input layer, the red circles correspond to hidden layers, and the yellow circles correspond to an output layer.https://doi.org/10.1371/journal.pone.0254319.g003",
            "latex": null,
            "type": "figure"
        },
        "FIGREF4": {
            "text": "SNAIL architecture. A schematic view of SNAIL with one TCBLOCK and two ATTENTIONBLOCKs. The blue circles correspond to an input layer, the red circles correspond to hidden layers, the yellow circles correspond to an output layer, and the green circles correspond to attention layers.https://doi.org/10.1371/journal.pone.0254319.g004",
            "latex": null,
            "type": "figure"
        },
        "FIGREF5": {
            "text": "CA %ILI curve. An example illustration of applying a sliding window to a %ILI curve of California from the 2013-2014 season to the 2014-2015 season. https://doi.org/10.1371/journal.pone.0254319.g005",
            "latex": null,
            "type": "figure"
        },
        "FIGREF6": {
            "text": "Four performance metrics for one-week-ahead predictions obtained by using RNN-LSTM and RNN-GRU. A. RMSE, B. MAPE, C. L2E, and D. PCORR. Smaller values are preferable for RMSE, MAPE, L2E, and larger values are preferable for PCORR. https://doi.org/10.1371/journal.pone.0254319.g006",
            "latex": null,
            "type": "figure"
        },
        "FIGREF7": {
            "text": "Four performance metrics for one-week-ahead predictions obtained by using RNN-LSTM and RNN-GRU for varying number of layers n h = {2, 3, 4, 5}. A. RMSE, B. MAPE, C. L2E, and D. PCORR. Smaller values are preferable for RMSE, MAPE, L2E, and larger values are preferable for PCORR. https://doi.org/10.1371/journal.pone.0254319.g007",
            "latex": null,
            "type": "figure"
        },
        "FIGREF8": {
            "text": "Four performance metrics for one-week-ahead predictions obtained by using RNN-GRU and the Seq2Seq model for varying number of layers n h = {2, 3, 4, 5}. A. RMSE, B. MAPE, C. L2E, and D. PCORR. Smaller values are preferable for RMSE, MAPE, L2E, and larger values are preferable for PCORR. Only the best performing values of w hist are presented. https://doi.org/10.1371/journal.pone.0254319.g008",
            "latex": null,
            "type": "figure"
        },
        "FIGREF9": {
            "text": "Four performance metrics for one-week-ahead predictions obtained by using the TCNs for varying number of residual blocks n R = {5, 6, 7, 8} with the kernel size k = 4. A. RMSE, B. MAPE, C. L2E, and D. PCORR. Smaller values are preferable for RMSE, MAPE, L2E, and larger values are preferable for PCORR. https://doi.org/10.1371/journal.pone.0254319.g009",
            "latex": null,
            "type": "figure"
        },
        "FIGREF10": {
            "text": "Fig 11 reports the four performance metrics measured in each state using Seq2Seq, TCN, and SNAIL; for better presentation, only nine states are selected for visualization, (Arizona, AZ; California, CA; Delaware, DE;, Iowa, IA; Massachusetts, MA; Montana, MT; New York, NY; Pennsylvania, PA; South Dakota, SD; henceforth, {AZ, CA, DE, IA, MA, MT, NY, PA, SD}). The states were chosen as they span the full range of performance metrics. The states in Fig 11A-11C are presented in a decreasing order w.r.t. the relative performance of SNAIL Fig 10. Four performance metrics for one-week-ahead predictions obtained by using the SNAILs for varying number of TC layers n TC = {6, 7, 8} with the kernel size n key = {16, 32}. A. RMSE, B. MAPE, C. L2E, and D. PCORR. Smaller values are preferable for RMSE, MAPE, L2E, and larger values are preferable for PCORR. https://doi.org/10.1371/journal.pone.0254319.g010Table 2. Neural network configurations: The number of GRU layers n h , the number of RESBLOCKs n R , the number of TCBLOCKs n TC , the kernel size k, the number of kernel filters n k , and the size of key n key in SNAIL. For TCN and SNAIL, the value of w hist is omitted as setting w hist = 128 yields the best results. For TCN, n k = 4.",
            "latex": null,
            "type": "figure"
        },
        "FIGREF11": {
            "text": "h , w hist ) = (3, 128) (n R , k) = (8, 4) (n TC , k, n k , n key ) = (7, 4, 4, 32) MAPE (n h , w hist ) = (4, 64) (n R , k) = (8, 2) (n TC , k, n k , n key ) = (6, 2, 8, 32) L2E (n h , w hist ) = (3, 128) (n R , k) = (8, 4) (n TC , k, n k , n key ) = (7, 4, 4, 32) PCORR (n h , w hist ) = (5, 128) (n R , k) = (7, 4) (n TC , k, n k , n key ) = (7, 4, 4, 32) https://doi.org/10.1371/journal.pone.0254319.t002against Seq2Seq (i.e., Performance of SNAIL Performance of Seq2Seq",
            "latex": null,
            "type": "figure"
        },
        "FIGREF12": {
            "text": "The best performances achieved by Seq2Seq, TCN, and SNAIL for one-week-ahead forecasts. A. RMSE, B. MAPE, C. L2E, and D. PCORR. Four performance metrics, RMSE, MAPE, L2E, and PCORR, are measured for each state. In the horizontal axis, the states are placed in a decreasing order w.r.t. the relative performance of SNAIL against Seq2Seq. Results of the nine selected states, {AZ, CA, DE, IA, MA, MT, NY, PA, SD} are depicted. https://doi.org/10.1371/journal.pone.0254319.g011",
            "latex": null,
            "type": "figure"
        },
        "FIGREF13": {
            "text": "The boxplots of all four performance metrics measured by using Seq2Seq, TCN, and SNAIL. A. RMSE, B. MAPE, C. L2E, and D. PCORR. The boxplots summarize statistics of the predictions made for every 49 states. The middle black and yellow lines indicate medians and means, respectively, and the boxes indicates the interquartile ranges. https://doi.org/10.1371/journal.pone.0254319.g012",
            "latex": null,
            "type": "figure"
        },
        "FIGREF14": {
            "text": "The number of the states where the former network outperforms the latter network in 0, 1, 2, 3, or all 4 metrics (RMSE, MAPE, L2E, and PCORR). A. TCN against Seq2Seq, B. SNAIL against Seq2Seq, and C. SNAIL against TCN. The numbers shown in this figure are collected from all 49 states. https://doi.org/10.1371/journal.pone.0254319.g014",
            "latex": null,
            "type": "figure"
        },
        "FIGREF15": {
            "text": "The boxplots of all four performance metrics measured by using Seq2Seq, TCN, and SNAIL. A. RMSE, B. MAPE, C. L2E, and D. PCORR. The IQRs of the boxplots are excerpted from Fig 12.",
            "latex": null,
            "type": "figure"
        },
        "FIGREF16": {
            "text": "https://doi.org/10.1371/journal.pone.0254319.g013 PLOS ONE Finally, Fig 15 illustrates the original %ILI and the predictions made by Seq2Seq and SNAIL for two seasons, 2017-2018 (validation) and 2018-2019 (test), and for the nine states selected for visualization, {AZ, CA, DE, IA, MA, MT, NY, PA, SD}, which are the same states shown in Fig 15. To increase the legibility of the plots, %ILI predictions made by TCN are not reported. We note that the %ILI curves of TCN are very similar to the ones of SNAIL. A more comprehensive version of Fig 15 representing data from all 49 states, can be found in Ref.[65].",
            "latex": null,
            "type": "figure"
        },
        "FIGREF17": {
            "text": "Example plots of %ILI in 9 states {AZ, CA, DE, IA, MA, MT, NY, PA, SD} and predictions made by SNAIL and Seq2Seq for two seasons 2017-2018 (validation) and 2018-2019 (test). A. Arizona, B. California, C. Delaware, D. Iowa, E. Massachusetts, F. Montana, G. New York, H. Pennsylvania, and I. South Dakota. The original %ILI is depicted in solid black lines and the prediction results of SNAIL and Seq2Seq are depicted in dashed green lines and solid red lines.",
            "latex": null,
            "type": "figure"
        },
        "FIGREF18": {
            "text": "Fig 16 illustrates the original %ILI and the multi-weeks ahead predictions made by SNAIL and Seq2Seq for 2018-2019 season (test). Among the nine states, we select four states for visualization {AZ, DE, NY, SD}. As shown in",
            "latex": null,
            "type": "figure"
        },
        "TABREF0": {
            "text": "https://doi.org/10.1371/journal.pone.0254319.g001 gate controls information flow choosing which parts of the previous state to pass to generate a new target state. Then the update gate controls the extent to which the previous state remains and the new target state replaces the previous state to generate a new state.",
            "latex": null,
            "type": "table"
        },
        "TABREF1": {
            "text": "Four performance metrics for one-week-ahead predictions obtained by using the Seq2Seq models with RNN-GRU decoder, NODE decoder, and ANODE decoder. The results of the best performing hyperparameters are shown.",
            "latex": null,
            "type": "table"
        },
        "TABREF2": {
            "text": "The best performances achieved by Persistence, AR(16),",
            "latex": null,
            "type": "table"
        },
        "TABREF4": {
            "text": "https://doi.org/10.1371/journal.pone.0254319.g015",
            "latex": null,
            "type": "table"
        },
        "TABREF5": {
            "text": "The performance metrics computed using Seq2Seq, TCN, and SNAIL for varying prediction horizons {1, 2, 3, 4}. The same sets of network hyperparameters for each model are used for varying horizons. The downward/upward arrows in parentheses indicate smaller/larger values are preferred. https://doi.org/10.1371/journal.pone.0254319.t004Fig 16. Example plots of %ILI in 4 states {AZ, DE, NY, SD} and predictions made by SNAIL and Seq2Seq for 2018-2019 (test). A. Arizona-SNAIL, B. Delaware-SNAIL, C. New York-SNAIL, D. South Dakota-SNAIL, E. Arizona-Seq2Seq, F. Delaware-Seq2Seq, G. New York-Seq2Seq, H. South Dakota-Seq2Seq. The original %ILI is depicted in solid black lines and the {1, 2, 3, 4}-weeks ahead prediction results are depicted in dotted yellow-green lines, dash-dot light green lines, dashed blue lines, and solid red lines, respectively. https://doi.org/10.1371/journal.pone.0254319.g016Table 5. Model summary table.RNN-LSTMStacked recurrent neural network with LSTM cells-RNN-LSTM operates on an input sequence and make the N-step ahead prediction at each RNN step RNN-GRU Stacked recurrent neural network with GRU units-RNN-GRU operates on an input sequence and make the N-step ahead prediction at each RNN step",
            "latex": null,
            "type": "table"
        },
        "TABREF6": {
            "text": "Temporal-convolution-layers-based neural networks TCNTemporal convolutional neural networks with residual blocks: each residual block consists of a sequence of temporal convolutional layers with an increasing dilation rate; the final output is the N-step ahead prediction.SNAILTemporal convolutional neural networks with a temporal-convolution (TC) block and attention layers: 1) the TC block consists of a series of dense blocks, with each using two parallel dilated TCs and 2) attention layers point out at which points in the input sequence should be more emphasized. The final output is the N-step ahead prediction.https://doi.org/10.1371/journal.pone.0254319.t005",
            "latex": null,
            "type": "table"
        }
    },
    "back_matter": [
        {
            "text": "The authors thank Khachik Sargsyan and Thomas Catanach for providing useful feedback. This paper describes objective technical results and analysis. Any subjective views or opinions that might be expressed in the paper do not necessarily represent the views of the U.S. Department of Energy or the United States Government. ",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Acknowledgments"
        }
    ]
}