{
    "paper_id": "7f8391cf9f3b3b41c131611e5f7709c84cbfd581",
    "metadata": {
        "title": "Research on the Fastest Detection Method for Weak Trends under Noise Interference",
        "authors": [
            {
                "first": "Guang",
                "middle": [],
                "last": "Li",
                "suffix": "",
                "affiliation": {
                    "laboratory": "",
                    "institution": "Henan Institute of Technology",
                    "location": {
                        "postCode": "453003",
                        "settlement": "Xinxiang",
                        "country": "China"
                    }
                },
                "email": ""
            },
            {
                "first": "Jing",
                "middle": [],
                "last": "Liang",
                "suffix": "",
                "affiliation": {
                    "laboratory": "",
                    "institution": "Zhengzhou University",
                    "location": {
                        "postCode": "450001",
                        "settlement": "Zhengzhou",
                        "country": "China"
                    }
                },
                "email": ""
            },
            {
                "first": "Caitong",
                "middle": [],
                "last": "Yue",
                "suffix": "",
                "affiliation": {
                    "laboratory": "",
                    "institution": "Zhengzhou University",
                    "location": {
                        "postCode": "450001",
                        "settlement": "Zhengzhou",
                        "country": "China"
                    }
                },
                "email": ""
            }
        ]
    },
    "abstract": [],
    "body_text": [
        {
            "text": "Data stream trend anomaly detection, a branch of data-flow research, has been used in online real-time data in the following fields: intelligent engineering [1] and systems using automated detection [2] , oil drilling [3] , smart meters [4] , e-commerce [5] , and household energy consumption monitoring [6] . The above data flow trend has the following characteristics: one scan, concept drift, data time series, unpredictability, high-speed data updates, and unlimited data. However, industrial data is often accompanied by noise caused by the working environment or the sensor, which impairs trend anomaly detection and can lead to misjudgments.",
            "cite_spans": [
                {
                    "start": 157,
                    "end": 160,
                    "text": "[1]",
                    "ref_id": "BIBREF0"
                },
                {
                    "start": 199,
                    "end": 202,
                    "text": "[2]",
                    "ref_id": "BIBREF1"
                },
                {
                    "start": 218,
                    "end": 221,
                    "text": "[3]",
                    "ref_id": "BIBREF2"
                },
                {
                    "start": 237,
                    "end": 240,
                    "text": "[4]",
                    "ref_id": "BIBREF3"
                },
                {
                    "start": 254,
                    "end": 257,
                    "text": "[5]",
                    "ref_id": "BIBREF4"
                },
                {
                    "start": 304,
                    "end": 307,
                    "text": "[6]",
                    "ref_id": "BIBREF5"
                }
            ],
            "ref_spans": [],
            "section": "Introduction"
        },
        {
            "text": "Many scholars have carried out studies on the difficulty of detecting trend anomalies under noise interference. For example, Li [3] adopted the sliding nested window technique, which weakened the weight of data, reduced the influence of noise, and significantly improved the identification of abnormal trends in a noisy environment; Cavaglia [7] used a random forest and genetic algorithm to analyze noisy gravitational waves. This method successfully identified non-astrophysical data and helped eliminate noise. Hasan [8] used reverse indexing and incremental clustering to mine noisy Twitter data streams using the smallest amount of calculation data and classified them into major and minor events. The recall rate and accuracy of this method are both significant improvements. Heitor [9] proposed classifying data streams using an adaptive random forest (ARF) algorithm, which improved on traditional data stream trend anomaly detection methods.",
            "cite_spans": [
                {
                    "start": 128,
                    "end": 131,
                    "text": "[3]",
                    "ref_id": "BIBREF2"
                },
                {
                    "start": 342,
                    "end": 345,
                    "text": "[7]",
                    "ref_id": "BIBREF6"
                },
                {
                    "start": 520,
                    "end": 523,
                    "text": "[8]",
                    "ref_id": "BIBREF7"
                },
                {
                    "start": 789,
                    "end": 792,
                    "text": "[9]",
                    "ref_id": "BIBREF8"
                }
            ],
            "ref_spans": [],
            "section": "Introduction"
        },
        {
            "text": "The online data stream is incremental and based on endless data, so it is necessary to intercept the current moment and a small piece of historical data to be the object of analysis. Many real-time processing models have often used a sliding window length of 1, in which only the data of all parameters at the current moment is used, not historical data. For example, Tang [10] used deep CNNS to control wireless network traffic. The application of deep learning to control the data at the current moment slowed the packet loss rate. This method also has no application to historical data and only controls multiple parameters at the moment. Athanasios [11] used a new real-time, deep-learning method to train a model using multiple sensors to improve a robot's generalizability, adaptability, and convergence. The data used was still the current time data of multiple parameters; historical data was not used. Mao [12] used deep-learning to control the adaptive resource ability of the software-defined networking communication system. Through online training, the amount of calculation by the central processing unit was reduced. Meyer [13] also used deeplearning methods (circulating neural networks) to predict serious real-time complications after cardiac surgery (mortality, renal failure, postoperative bleeding), using multiple sensors to detect the organ data in real time. The machine-learning indicator area under the curve (AUC) was significantly better than the clinical indicators; however, this method used multiple parameters but not all of them applied in this case. The historical data of the parameters were used effectively. Xu [14] used offline data to learn classification rules and trained random forest models using machine-learning methods. This method presented the real-time realization of a dynamic programming algorithm for power optimization in an organic Rankine cycle waste heat recovery system. It used multiple parameters but not historical data.",
            "cite_spans": [
                {
                    "start": 373,
                    "end": 377,
                    "text": "[10]",
                    "ref_id": "BIBREF9"
                },
                {
                    "start": 653,
                    "end": 657,
                    "text": "[11]",
                    "ref_id": "BIBREF10"
                },
                {
                    "start": 915,
                    "end": 919,
                    "text": "[12]",
                    "ref_id": "BIBREF11"
                },
                {
                    "start": 1138,
                    "end": 1142,
                    "text": "[13]",
                    "ref_id": "BIBREF12"
                },
                {
                    "start": 1648,
                    "end": 1652,
                    "text": "[14]",
                    "ref_id": "BIBREF13"
                }
            ],
            "ref_spans": [],
            "section": "Introduction"
        },
        {
            "text": "Noise, though, makes the detection of trend anomalies difficult. For example, Thomson [15] has four 100 Hz power spectral density sensors installed at the bottom of the ocean, as well as an automatic identification system (AIS), and shipping and trade statistics to describe the effect of a new coronary pneumonia on global trade. The article described a trend analysis, but it was based on noisy sensor data. The research is still the current data, and no historical data was intercepted and analyzed.",
            "cite_spans": [
                {
                    "start": 86,
                    "end": 90,
                    "text": "[15]",
                    "ref_id": "BIBREF14"
                }
            ],
            "ref_spans": [],
            "section": "Introduction"
        },
        {
            "text": "The above literature shows that the detection of data-flow trend anomaly in noisy environments is widely used in industry, aerospace, and other fields. Based on the sliding nesting algorithm, this paper adopted the forgetting strategy to build a trend anomaly detection algorithm under the influence of incremental data-stream noise and improved the timeliness of algorithm detection without affecting the accuracy of trend anomaly detection. The flow trend was abnormal to ensure the accuracy and timeliness of the real-time online data-flow analysis.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Introduction"
        },
        {
            "text": "This article first introduces the research background and the problems to be solved. Then it proceeds to discuss the trend anomaly detection algorithm and the problems to be solved, followed by the verification of the algorithm using a real industrial data stream and conclusions.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Introduction"
        },
        {
            "text": "The sliding window is commonly used to process data streams. It is a window of a pre-established length that moves as new (current) data enters from one end and pushes old (historical) data out the other. In this way, current and historical data are always changing, and this affects the data being analyzed. For example, Wang [16] proposed a Gaussian restricted Boltzmann machine (GRBM) model that supported decimal input using a sliding window and trained it through iterations. At the same time, he proposed a method based on the Kullbeck-Leibler divergence (KL distance). A data-flow adaptive block algorithm compared the probability distribution differences of sliding windows. Finally, the predicted value was obtained according to the distribution of the previous data and determined if the KL distance was within the confidence interval to realize the adaptive adjustment of the sliding window and the division of the data stream.",
            "cite_spans": [
                {
                    "start": 327,
                    "end": 331,
                    "text": "[16]",
                    "ref_id": "BIBREF15"
                }
            ],
            "ref_spans": [],
            "section": "Sliding Window"
        },
        {
            "text": "In addition to the sliding window, there are two other commonly used methods to processing data streams. One is the landmark model. It uses the memory of important moments and uses each moment as a calibration point to analyze the data that comes after it, as proposed by Leung [17] . A landmark model mines frequent patterns from uncertain data streams. Because it needs to mark important moments from which to start calculating future data, it also needs to identify important marks when the subsequent data ends. Therefore, the mark data becomes a very important factor in determining the effect of this method, which means that for data streams without important marks, this method is of limited value.",
            "cite_spans": [
                {
                    "start": 278,
                    "end": 282,
                    "text": "[17]",
                    "ref_id": "BIBREF16"
                }
            ],
            "ref_spans": [],
            "section": "Sliding Window"
        },
        {
            "text": "The other method is the snapshot model, which intercepts and analyzes the data stream. For example, Kr\u00e4mer [18] developed a general method for dynamic migration planning by treating the analyzed data as a black box, equivalent to a snapshot. This enabled the query optimizer to apply regular conversion rules during optimization. This method supports the dynamic optimization of arbitrary continuous queries that can be expressed in CQL. Figure 1 shows the characteristics of the three window models. For the sliding window, the processing data range remained unchanged. It always used current-time data and similar fixed-length data. According to the above analysis, the weights of the historical and current data remained unchanged as the dynamic data stream was turned into a static data analysis. The data in the window closest to the current moment was often the most valuable for research and is usually the focus of user attention. The landmark model also turned a dynamic stream static, and as the amount of data processed increased, the algorithm needed to respond promptly to new data. With the continuous arrival of new data, the amount of analyzed data increased. Regarding the snapshot model, data analysis was fixed to the length of the data stream and immediately followed the current time data. data and determined if the KL distance was within the confidence interval to realize the adaptive adjustment of the sliding window and the division of the data stream.",
            "cite_spans": [
                {
                    "start": 107,
                    "end": 111,
                    "text": "[18]",
                    "ref_id": "BIBREF17"
                }
            ],
            "ref_spans": [
                {
                    "start": 438,
                    "end": 446,
                    "text": "Figure 1",
                    "ref_id": "FIGREF1"
                }
            ],
            "section": "Sliding Window"
        },
        {
            "text": "In addition to the sliding window, there are two other commonly used methods to processing data streams. One is the landmark model. It uses the memory of important moments and uses each moment as a calibration point to analyze the data that comes after it, as proposed by Leung [17] . A landmark model mines frequent patterns from uncertain data streams. Because it needs to mark important moments from which to start calculating future data, it also needs to identify important marks when the subsequent data ends. Therefore, the mark data becomes a very important factor in determining the effect of this method, which means that for data streams without important marks, this method is of limited value.",
            "cite_spans": [
                {
                    "start": 278,
                    "end": 282,
                    "text": "[17]",
                    "ref_id": "BIBREF16"
                }
            ],
            "ref_spans": [],
            "section": "Sliding Window"
        },
        {
            "text": "The other method is the snapshot model, which intercepts and analyzes the data stream. For example, Kr\u00e4mer [18] developed a general method for dynamic migration planning by treating the analyzed data as a black box, equivalent to a snapshot. This enabled the query optimizer to apply regular conversion rules during optimization. This method supports the dynamic optimization of arbitrary continuous queries that can be expressed in CQL. Figure 1 shows the characteristics of the three window models. For the sliding window, the processing data range remained unchanged. It always used current-time data and similar fixed-length data. According to the above analysis, the weights of the historical and current data remained unchanged as the dynamic data stream was turned into a static data analysis. The data in the window closest to the current moment was often the most valuable for research and is usually the focus of user attention. The landmark model also turned a dynamic stream static, and as the amount of data processed increased, the algorithm needed to respond promptly to new data. With the continuous arrival of new data, the amount of analyzed data increased. Regarding the snapshot model, data analysis was fixed to the length of the data stream and immediately followed the current time data. The sliding window is the most commonly used data stream processing model because it meets the requirements of real-time data analysis and consider both current data and historical data. It is even used in the noise environment of oil drilling because it can The sliding window is the most commonly used data stream processing model because it meets the requirements of real-time data analysis and consider both current data and historical data. It is even used in the noise environment of oil drilling because it can detect abnormal changes in trends in the presence of noise interference. Because valuable information is hidden under the noise, real-time data filtering has become a prerequisite. The sliding window nesting method divides the historical period into short-time and relatively long-time windows. Two types of secondary variable parameters, or multiple derivative variable parameters, are calculated in each, and target detection is calibrated through these extracted feature parameters. For example, Du [19] accurately detected small targets against a complex background and under low signal-to-noise ratio conditions. Because it is difficult to detect small and weak targets against a complex background using local and overall contrast methods, a small-target detection method based on facetkernel filtering has been shown to enhance small targets while suppressing complex background clutter.",
            "cite_spans": [
                {
                    "start": 107,
                    "end": 111,
                    "text": "[18]",
                    "ref_id": "BIBREF17"
                },
                {
                    "start": 2331,
                    "end": 2335,
                    "text": "[19]",
                    "ref_id": "BIBREF18"
                }
            ],
            "ref_spans": [
                {
                    "start": 438,
                    "end": 446,
                    "text": "Figure 1",
                    "ref_id": "FIGREF1"
                }
            ],
            "section": "Sliding Window"
        },
        {
            "text": "The facet-kernel filter enhances the center layer target, while the background is suppressed by calculating the grey similarity difference between the center and surrounding layers. Li [20] proposed a residual fusion network (RFN) to be trained by a new loss function with preserved details and a loss function with enhanced features. In the first of this new two-stage training strategy, an autoencoder is trained based on an innovative nested sliding window. Next, the RFN is trained using the proposed loss function. Experimental results on public domain datasets show that, compared with existing methods, this method is subjectively and objectively superior to existing methods.",
            "cite_spans": [
                {
                    "start": 185,
                    "end": 189,
                    "text": "[20]",
                    "ref_id": "BIBREF19"
                }
            ],
            "ref_spans": [],
            "section": "Sliding Window"
        },
        {
            "text": "The so-called sliding nested window is a small sliding window nested inside a larger one. As shown in Figure 2 , the data points of the large and small windows overlap at the current moment, and the historical data range is different. Sliding nested windows can bring benefits by weakening the impact of the current point and increasing trend analysis. Because the small window is not long, it can reflect real-time characteristics of data flow changes and block the interference of the few data that deviate from the trend to preserve the overall trend. The front-end and middle data that deviated from the normal trend quickly returned to the overall data change. Therefore, these data are interference data and should not be classified as abnormal; otherwise, it will lead to wrong decisions. However, the back-end and middle segments of the data continued to deviate from the overall trend. These were regarded as abnormal data, so abnormal point and degree detection were required. These data were labelled according to the changes, and from this classification, several decisions were made based on an abnormal parameter. The abnormal data that needed to be detected rose or fell for internal reasons, and this should be our target because the abnormal changes of these data are consistent with our decision-making classification goal. Therefore, reducing misclassification caused by data randomness increases the trend judgment and improves the forecast accuracy. detect abnormal changes in trends in the presence of noise interference. Because valuable information is hidden under the noise, real-time data filtering has become a prerequisite. The sliding window nesting method divides the historical period into short-time and relatively long-time windows. Two types of secondary variable parameters, or multiple derivative variable parameters, are calculated in each, and target detection is calibrated through these extracted feature parameters. For example, Du [19] accurately detected small targets against a complex background and under low signal-to-noise ratio conditions. Because it is difficult to detect small and weak targets against a complex background using local and overall contrast methods, a small-target detection method based on facet-kernel filtering has been shown to enhance small targets while suppressing complex background clutter.",
            "cite_spans": [
                {
                    "start": 1973,
                    "end": 1977,
                    "text": "[19]",
                    "ref_id": "BIBREF18"
                }
            ],
            "ref_spans": [
                {
                    "start": 102,
                    "end": 110,
                    "text": "Figure 2",
                    "ref_id": "FIGREF4"
                }
            ],
            "section": "Sliding Window"
        },
        {
            "text": "The facet-kernel filter enhances the center layer target, while the background is suppressed by calculating the grey similarity difference between the center and surrounding layers. Li [20] proposed a residual fusion network (RFN) to be trained by a new loss function with preserved details and a loss function with enhanced features. In the first of this new two-stage training strategy, an autoencoder is trained based on an innovative nested sliding window. Next, the RFN is trained using the proposed loss function. Experimental results on public domain datasets show that, compared with existing methods, this method is subjectively and objectively superior to existing methods.",
            "cite_spans": [
                {
                    "start": 185,
                    "end": 189,
                    "text": "[20]",
                    "ref_id": "BIBREF19"
                }
            ],
            "ref_spans": [],
            "section": "Sliding Window"
        },
        {
            "text": "The so-called sliding nested window is a small sliding window nested inside a larger one. As shown in Figure 2 , the data points of the large and small windows overlap at the current moment, and the historical data range is different. Sliding nested windows can bring benefits by weakening the impact of the current point and increasing trend analysis. Because the small window is not long, it can reflect real-time characteristics of data flow changes and block the interference of the few data that deviate from the trend to preserve the overall trend. The front-end and middle data that deviated from the normal trend quickly returned to the overall data change. Therefore, these data are interference data and should not be classified as abnormal; otherwise, it will lead to wrong decisions. However, the back-end and middle segments of the data continued to deviate from the overall trend. These were regarded as abnormal data, so abnormal point and degree detection were required. These data were labelled according to the changes, and from this classification, several decisions were made based on an abnormal parameter. The abnormal data that needed to be detected rose or fell for internal reasons, and this should be our target because the abnormal changes of these data are consistent with our decision-making classification goal. Therefore, reducing misclassification caused by data randomness increases the trend judgment and improves the forecast accuracy. According to its algorithm, trend anomaly detection can be known only after coming in contact with several data with abnormal trends. Therefore, for real-time systems, the According to its algorithm, trend anomaly detection can be known only after coming in contact with several data with abnormal trends. Therefore, for real-time systems, the shorter the time it takes to determine an abnormal trend the better. However, due to the limitations of the trend anomaly detection algorithm, especially for interference data, the accuracy of detection cannot be guaranteed because of the gradual-trend anomaly interference noise. In order to ensure detection accuracy, the sliding window is combined with other trend anomaly detection algorithms.",
            "cite_spans": [],
            "ref_spans": [
                {
                    "start": 102,
                    "end": 110,
                    "text": "Figure 2",
                    "ref_id": "FIGREF4"
                }
            ],
            "section": "Sliding Window"
        },
        {
            "text": "More and more applications, such as Riss [21] proposed an automatic near-real-time fault identification method based on a combination of sliding window and cumulative sum CUSUM control charts; that is, the combination of CUSUM charts and identification system (HC-ERS); this method has proved to be effective, achieving a high true detection rate of 82% and a low false alarm rate of an average of 0.3 per week. This method showed the ability to detect a WTW failure. Therefore, it has the potential for practical application in the water industry. Li [22] used the combination of two CUSUM charts and sliding windows to provide support for the detection of weak-trend oil-drilling data flow under noise interference.",
            "cite_spans": [
                {
                    "start": 41,
                    "end": 45,
                    "text": "[21]",
                    "ref_id": "BIBREF20"
                },
                {
                    "start": 552,
                    "end": 556,
                    "text": "[22]",
                    "ref_id": "BIBREF21"
                }
            ],
            "ref_spans": [],
            "section": "Sliding Window"
        },
        {
            "text": "The above trend abnormality detection methods all faced the same problem: timeliness of detection; that is, the distance between the time that the trend is detected and the current moment. Figure 2 shows that the data on the far right was the current-time data. As time went by, new data continuously entered the sliding window from the far right. Old data continuously left from the far left, thereby realizing data flow. The limitations of the algorithm and a certain historical data trend change determined the abnormal trend, as shown in Figure 3 . The changed data point had a certain delay from the current moment. Therefore, overcoming the trend anomaly delay problem, similar to CUSUM, by shortening the determination delay as much as possible and meeting the timeliness of the data flow are the challenges of research.",
            "cite_spans": [],
            "ref_spans": [
                {
                    "start": 189,
                    "end": 197,
                    "text": "Figure 2",
                    "ref_id": "FIGREF4"
                },
                {
                    "start": 542,
                    "end": 550,
                    "text": "Figure 3",
                    "ref_id": "FIGREF7"
                }
            ],
            "section": "Sliding Window"
        },
        {
            "text": "limitations of the trend anomaly detection algorithm, especially for interference data, the accuracy of detection cannot be guaranteed because of the gradual-trend anomaly interference noise. In order to ensure detection accuracy, the sliding window is combined with other trend anomaly detection algorithms.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Sliding Window"
        },
        {
            "text": "More and more applications, such as Riss [21] proposed an automatic near-real-time fault identification method based on a combination of sliding window and cumulative sum CUSUM control charts; that is, the combination of CUSUM charts and identification system (HC-ERS); this method has proved to be effective, achieving a high true detection rate of 82% and a low false alarm rate of an average of 0.3 per week. This method showed the ability to detect a WTW failure. Therefore, it has the potential for practical application in the water industry. Li [22] used the combination of two CUSUM charts and sliding windows to provide support for the detection of weak-trend oil-drilling data flow under noise interference.",
            "cite_spans": [
                {
                    "start": 41,
                    "end": 45,
                    "text": "[21]",
                    "ref_id": "BIBREF20"
                },
                {
                    "start": 552,
                    "end": 556,
                    "text": "[22]",
                    "ref_id": "BIBREF21"
                }
            ],
            "ref_spans": [],
            "section": "Sliding Window"
        },
        {
            "text": "The above trend abnormality detection methods all faced the same problem: timeliness of detection; that is, the distance between the time that the trend is detected and the current moment. Figure 2 shows that the data on the far right was the current-time data. As time went by, new data continuously entered the sliding window from the far right. Old data continuously left from the far left, thereby realizing data flow. The limitations of the algorithm and a certain historical data trend change determined the abnormal trend, as shown in Figure 3 . The changed data point had a certain delay from the current moment. Therefore, overcoming the trend anomaly delay problem, similar to CUSUM, by shortening the determination delay as much as possible and meeting the timeliness of the data flow are the challenges of research. ",
            "cite_spans": [],
            "ref_spans": [
                {
                    "start": 189,
                    "end": 197,
                    "text": "Figure 2",
                    "ref_id": "FIGREF4"
                },
                {
                    "start": 542,
                    "end": 550,
                    "text": "Figure 3",
                    "ref_id": "FIGREF7"
                }
            ],
            "section": "Sliding Window"
        },
        {
            "text": "The push-back continuation is a common method for trend anomaly detection. It uses the current time to delay the period of calculating the current trend change. Meng [23] used the residential electricity consumption and population data of 30 provinces from 2001 to 2014 for a three-dimensional decomposition model and a hybrid trend extrapolation model to explore the driving factors of China's growing residential electricity consumption and predict what it will be by 2030. Colonna [24] used the continuation method to estimate the prevalence rate in France in 2002 and 2012 and the prevalence trend during 1993-2002. Based on analyzing the existing radar extrapolation trend model, Gan [25] improved it by increasing the number of radar layers and the weight of the prediction results. Experiments were conducted with public competition data and real ",
            "cite_spans": [
                {
                    "start": 166,
                    "end": 170,
                    "text": "[23]",
                    "ref_id": "BIBREF22"
                },
                {
                    "start": 484,
                    "end": 488,
                    "text": "[24]",
                    "ref_id": "BIBREF23"
                },
                {
                    "start": 689,
                    "end": 693,
                    "text": "[25]",
                    "ref_id": "BIBREF25"
                }
            ],
            "ref_spans": [],
            "section": "Extrapolation of Online Data Segmentation"
        },
        {
            "text": "The push-back continuation is a common method for trend anomaly detection. It uses the current time to delay the period of calculating the current trend change. Meng [23] used the residential electricity consumption and population data of 30 provinces from 2001 to 2014 for a three-dimensional decomposition model and a hybrid trend extrapolation model to explore the driving factors of China's growing residential electricity consumption and predict what it will be by 2030. Colonna [24] used the continuation method to estimate the prevalence rate in France in 2002 and 2012 and the prevalence trend during 1993-2002. Based on analyzing the existing radar extrapolation trend model, Gan [25] improved it by increasing the number of radar layers and the weight of the prediction results. Experiments were conducted with public competition data and real radar data as samples. The results showed that the improved network model captured spatio-temporal correlation better and had more accurate extrapolation. Ma [26] proposed a new spatial interpolation/extrapolation method to generate the spatial distribution of atmospheric pollutant concentrations. The model is developed based on a long short-term memory (LSTM) neural network to capture the long-term dependence of air quality, and a geological layer was designed to integrate the temporal and spatial correlations of other monitoring stations. To evaluate the effectiveness of the proposed method, a case study was conducted in Washington State. The experimental results show that the root mean square error (RMSE) of the new method was 0.0437, nearly 60.13% higher than that for the traditional method.",
            "cite_spans": [
                {
                    "start": 166,
                    "end": 170,
                    "text": "[23]",
                    "ref_id": "BIBREF22"
                },
                {
                    "start": 484,
                    "end": 488,
                    "text": "[24]",
                    "ref_id": "BIBREF23"
                },
                {
                    "start": 689,
                    "end": 693,
                    "text": "[25]",
                    "ref_id": "BIBREF25"
                },
                {
                    "start": 1012,
                    "end": 1016,
                    "text": "[26]",
                    "ref_id": "BIBREF26"
                }
            ],
            "ref_spans": [],
            "section": "Extrapolation of Online Data Segmentation"
        },
        {
            "text": "It can be seen from Figure 4 that trend anomaly detection can be divided into nine categories. In engineering, trend types E and F are often used because there is not much interesting information in normal trend changes. Abnormal changes often correspond to engineering accidents because capturing, so this information is of great significance for engineers. tion of atmospheric pollutant concentrations. The model is developed based on a long short-term memory (LSTM) neural network to capture the long-term dependence of air quality, and a geological layer was designed to integrate the temporal and spatial correlations of other monitoring stations. To evaluate the effectiveness of the proposed method, a case study was conducted in Washington State. The experimental results show that the root mean square error (RMSE) of the new method was 0.0437, nearly 60.13% higher than that for the traditional method.",
            "cite_spans": [],
            "ref_spans": [
                {
                    "start": 20,
                    "end": 28,
                    "text": "Figure 4",
                    "ref_id": "FIGREF9"
                }
            ],
            "section": "Extrapolation of Online Data Segmentation"
        },
        {
            "text": "It can be seen from Figure 4 that trend anomaly detection can be divided into nine categories. In engineering, trend types E and F are often used because there is not much interesting information in normal trend changes. Abnormal changes often correspond to engineering accidents because capturing, so this information is of great significance for engineers. As shown in Figure 5 , the box plot, a method of online data flow labelling, analyzes data that exceeds the upper and lower limit curves and continuously monitors the upper and lower abnormal boundary values online to make determinations about the data. The advantage of this method is that it tracks the dynamic trend of the data stream and classifies the data in the sliding window in real-time. Based on meeting the concept drift, it can adapt in real-time to changes of parameters, and the sliding window can meet the requirements of the data stream. From the above analysis, the trend anomaly detection algorithm does not consider the time of the trend anomaly because detection has a paradox within a certain range; that is, the shorter the detection time, the lower the detection accuracy, but the reverse is not true. The restricted is the result of the design of the algorithm and the processing data environment. Therefore, discussing the accuracy of the algorithm and the detection time is an important aspect of trend anomaly detection.",
            "cite_spans": [],
            "ref_spans": [
                {
                    "start": 20,
                    "end": 28,
                    "text": "Figure 4",
                    "ref_id": "FIGREF9"
                },
                {
                    "start": 371,
                    "end": 379,
                    "text": "Figure 5",
                    "ref_id": "FIGREF10"
                }
            ],
            "section": "Extrapolation of Online Data Segmentation"
        },
        {
            "text": "It can be seen from Figure 2 that the purpose of trend anomaly detection is to detect weak trend anomalies under noise interference, which often leads to misjudgments. Therefore, the nested sliding windows method removes noise interference to calculate the current segment mean value and variance over time and the changes in time and As shown in Figure 5 , the box plot, a method of online data flow labelling, analyzes data that exceeds the upper and lower limit curves and continuously monitors the upper and lower abnormal boundary values online to make determinations about the data. The advantage of this method is that it tracks the dynamic trend of the data stream and classifies the data in the sliding window in real-time. Based on meeting the concept drift, it can adapt in real-time to changes of parameters, and the sliding window can meet the requirements of the data stream. quality, and a geological layer was designed to integrate the temporal and spatial correlations of other monitoring stations. To evaluate the effectiveness of the proposed method, a case study was conducted in Washington State. The experimental results show that the root mean square error (RMSE) of the new method was 0.0437, nearly 60.13% higher than that for the traditional method.",
            "cite_spans": [],
            "ref_spans": [
                {
                    "start": 20,
                    "end": 28,
                    "text": "Figure 2",
                    "ref_id": "FIGREF4"
                },
                {
                    "start": 347,
                    "end": 355,
                    "text": "Figure 5",
                    "ref_id": "FIGREF10"
                }
            ],
            "section": "Sliding Nested Fastest Trend Anomaly Detection Algorithm"
        },
        {
            "text": "It can be seen from Figure 4 that trend anomaly detection can be divided into nine categories. In engineering, trend types E and F are often used because there is not much interesting information in normal trend changes. Abnormal changes often correspond to engineering accidents because capturing, so this information is of great significance for engineers. As shown in Figure 5 , the box plot, a method of online data flow labelling, analyzes data that exceeds the upper and lower limit curves and continuously monitors the upper and lower abnormal boundary values online to make determinations about the data. The advantage of this method is that it tracks the dynamic trend of the data stream and classifies the data in the sliding window in real-time. Based on meeting the concept drift, it can adapt in real-time to changes of parameters, and the sliding window can meet the requirements of the data stream. From the above analysis, the trend anomaly detection algorithm does not consider the time of the trend anomaly because detection has a paradox within a certain range; that is, the shorter the detection time, the lower the detection accuracy, but the reverse is not true. The restricted is the result of the design of the algorithm and the processing data environment. Therefore, discussing the accuracy of the algorithm and the detection time is an important aspect of trend anomaly detection.",
            "cite_spans": [],
            "ref_spans": [
                {
                    "start": 20,
                    "end": 28,
                    "text": "Figure 4",
                    "ref_id": "FIGREF9"
                },
                {
                    "start": 371,
                    "end": 379,
                    "text": "Figure 5",
                    "ref_id": "FIGREF10"
                }
            ],
            "section": "Sliding Nested Fastest Trend Anomaly Detection Algorithm"
        },
        {
            "text": "It can be seen from Figure 2 that the purpose of trend anomaly detection is to detect weak trend anomalies under noise interference, which often leads to misjudgments. Therefore, the nested sliding windows method removes noise interference to calculate the current segment mean value and variance over time and the changes in time and From the above analysis, the trend anomaly detection algorithm does not consider the time of the trend anomaly because detection has a paradox within a certain range; that is, the shorter the detection time, the lower the detection accuracy, but the reverse is not true. The restricted is the result of the design of the algorithm and the processing data environment. Therefore, discussing the accuracy of the algorithm and the detection time is an important aspect of trend anomaly detection.",
            "cite_spans": [],
            "ref_spans": [
                {
                    "start": 20,
                    "end": 28,
                    "text": "Figure 2",
                    "ref_id": "FIGREF4"
                }
            ],
            "section": "Sliding Nested Fastest Trend Anomaly Detection Algorithm"
        },
        {
            "text": "It can be seen from Figure 2 that the purpose of trend anomaly detection is to detect weak trend anomalies under noise interference, which often leads to misjudgments. Therefore, the nested sliding windows method removes noise interference to calculate the current segment mean value and variance over time and the changes in time and variance over a long period. However, because of the design of the algorithm the anomaly detection time has a large lag.",
            "cite_spans": [],
            "ref_spans": [
                {
                    "start": 20,
                    "end": 28,
                    "text": "Figure 2",
                    "ref_id": "FIGREF4"
                }
            ],
            "section": "Sliding Nested Fastest Trend Anomaly Detection Algorithm"
        },
        {
            "text": "The new algorithm still uses the sliding nesting method, but the data weights in the two windows are updated and changed in real-time: the closer the data to the current time the greater the weight; the farther the data, the smaller the weight.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Sliding Nested Fastest Trend Anomaly Detection Algorithm"
        },
        {
            "text": "where (t 0 , y 0 ) is the interval of the starting point, and p is a slope.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Sliding Nested Fastest Trend Anomaly Detection Algorithm"
        },
        {
            "text": "In the original and prediction models, (Formulas (2) and (3), respectively) the initial time is t b0 , the initial result value is y b0 , the slope is k 0 , and \u2206t is the update interval. The deviation between the two is the benchmark for trend anomaly detection, as shown in Formula (4) .",
            "cite_spans": [
                {
                    "start": 284,
                    "end": 287,
                    "text": "(4)",
                    "ref_id": "BIBREF3"
                }
            ],
            "ref_spans": [],
            "section": "Sliding Nested Fastest Trend Anomaly Detection Algorithm"
        },
        {
            "text": "The sum of the cumulative deviations in the two windows of length is shown in Formula (5) .",
            "cite_spans": [
                {
                    "start": 86,
                    "end": 89,
                    "text": "(5)",
                    "ref_id": "BIBREF4"
                }
            ],
            "ref_spans": [],
            "section": "Sliding Nested Fastest Trend Anomaly Detection Algorithm"
        },
        {
            "text": "In Formulas (6) and (7), the stop time is t b (i); the corresponding output is y s (i); and T is the time interval. The formulas are",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Sliding Nested Fastest Trend Anomaly Detection Algorithm"
        },
        {
            "text": "The determination formula for weak trend abnormality is",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Sliding Nested Fastest Trend Anomaly Detection Algorithm"
        },
        {
            "text": "The formula for abnormally drastic changes in the trend is",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Sliding Nested Fastest Trend Anomaly Detection Algorithm"
        },
        {
            "text": "The formula for abnormal changes in the later trend is",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Sliding Nested Fastest Trend Anomaly Detection Algorithm"
        },
        {
            "text": "From the basic formula of the above trend, the sliding nested window fastest detection of data stream (SNWFD-DS) algorithm was based on the sliding nest window chart anomaly detection, which was based on the data stream algorithm (SNWCAD-DS) [3] , which is an improvement on the double CUSUM-based data stream (DCUSUM-DS) [22] algorithm. Instead of the cumulative sum, the sliding nested window algorithm was adopted, and variable weight was the strategy [26] to update the data as shown in Figure 6 . Figure 6 . Sliding window-based anomaly detection with changed weights. LW is the length of the long sliding window; SW is the length of the short sliding window; T is the number of anomalies; \u03b2 is the number of anomaly determinations; medL x is the long window mean; medS x is the short window mean; stdL x is the long window variance; stdS x is the short window variance; Di f \u2212 ma \u2212 meanS Di f \u2212 ma is the mean of the difference between the long and short means in the short window; Di f \u2212 ma \u2212 meanL Di f \u2212 ma is the mean of the difference between the long and short means in the long window; Di f \u2212 ma \u2212 stdS Di f \u2212 ma is the variance of the difference between the short and long mean in the short window; and Di f \u2212 ma \u2212 stdL Di f \u2212 ma is the variance of the difference between the short and long mean in the long window.",
            "cite_spans": [
                {
                    "start": 242,
                    "end": 245,
                    "text": "[3]",
                    "ref_id": "BIBREF2"
                },
                {
                    "start": 322,
                    "end": 326,
                    "text": "[22]",
                    "ref_id": "BIBREF21"
                },
                {
                    "start": 455,
                    "end": 459,
                    "text": "[26]",
                    "ref_id": "BIBREF26"
                }
            ],
            "ref_spans": [
                {
                    "start": 491,
                    "end": 499,
                    "text": "Figure 6",
                    "ref_id": "FIGREF17"
                },
                {
                    "start": 502,
                    "end": 510,
                    "text": "Figure 6",
                    "ref_id": "FIGREF17"
                }
            ],
            "section": "Sliding Nested Fastest Trend Anomaly Detection Algorithm"
        },
        {
            "text": "It can be seen that Algorithm 2, SNWFD-DS, performed two average calculations: Di f \u2212 ma \u2212 meanS is the mean in the short window of Di f \u2212 ma \u2212 result, and Di f \u2212 ma \u2212 meanL is the mean in the long window of Di f \u2212 ma \u2212 result. Di f \u2212 ma \u2212 stdS is the variance within the short window of Di f \u2212 ma \u2212 result; and Di f \u2212 ma \u2212 stdL is the variance within the long window of Di f \u2212 ma \u2212 result. SNWFD-DS used two calculations of the mean and variance. Based on the two mean variances, only the deviation from the calculated amount at the current moment was calculated. Then, the score of the current moment data was given, and the score in a short period was calculated. If the score was high, it represented the current moment. ",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Sliding Nested Fastest Trend Anomaly Detection Algorithm"
        },
        {
            "text": "The data used in this paper came from the Tarim Oil field. The specific parameters were the total pool volume relative to the gradual change in the trend of the drilling leakage overflow. The total pool volume sensor detected the height of the total pool volume and was affected by surroundings. There was noise and other influences in the working environment, so detecting the gradual trend of parameters such as the total pool volume was the objective. The program software used in this article was matlab2020a, the CPU was Intel( \u00ae ) Core(\u2122) i5-4570 @ 3.2 GHz 3.2 GHz, the memory was 16 G, and the operating system was Window10 64-bit.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Real Data Verification"
        },
        {
            "text": "As shown in Table 1 , to improve the fairness and credibility of each algorithm's detection accuracy, the same parameters for the false alarm rate and algorithm complexity were set for each algorithm. The long window was uniformly set to 400, the short window set to 80, the threshold set to 0.4, and the outbound rate set to 8. The weight size was the same for the first two algorithms, but the new algorithm used a variable weight setting, that was constantly updated with time. The following results, in addition to the data listed in Table 2 , used the parameter settings in Table 1 and compared the advantages and disadvantages of each algorithm by comparing the TPR, FPR, the AUC, and the algorithm calculation time. As shown in Figure 7 , the abnormal rising flag is 101, and the abnormal falling flag is 102. Through the real data comparison of the three methods, we saw that the SNWFD-DS not only detected the weak abnormal trend decrease but also shielded the abnormal rise caused by noise interference. From the time of abnormal warning, SNWFD-DS detected the trend better than the SNWCAD-DS or DCUSUM-DS did. The abnormal time is early and was advanced by about 40 s. As shown in Figure 7 , the abnormal rising flag is 101, and the abnormal falling flag is 102. Through the real data comparison of the three methods, we saw that the SNWFD-DS not only detected the weak abnormal trend decrease but also shielded the abnormal rise caused by noise interference. From the time of abnormal warning, SNWFD-DS detected the trend better than the SNWCAD-DS or DCUSUM-DS did. The abnormal time is early and was advanced by about 40 s. Figure 8 shows the distribution of Jaccard's coefficient. The abscissa is the length of the short window. The long window length was fixed at 400. This length means that the impact of different short window lengths on each algorithm was compared in about 7 min. The meaning of this expression is to obtain different Jaccard's coefficients by setting different window lengths and to compare the quality of the algorithm. Jaccard's coeffi- Figure 8 shows the distribution of Jaccard's coefficient. The abscissa is the length of the short window. The long window length was fixed at 400. This length means that the impact of different short window lengths on each algorithm was compared in about 7 min. The meaning of this expression is to obtain different Jaccard's coefficients by setting different window lengths and to compare the quality of the algorithm. Jaccard's coefficient represents a similarity measure of the online stream classification algorithm for data stream machine learning. The factors affecting the coefficient include not only the classification result, error, and missing report rates but also the setting of the window length and the outbound rate. Due to the delay, the higher Jaccard's coefficient, the higher the accuracy. Figure 8 shows the distribution of Jaccard's coefficient. The abscissa is the length of the short window. The long window length was fixed at 400. This length means that the impact of different short window lengths on each algorithm was compared in about 7 min. The meaning of this expression is to obtain different Jaccard's coefficients by setting different window lengths and to compare the quality of the algorithm. Jaccard's coefficient represents a similarity measure of the online stream classification algorithm for data stream machine learning. The factors affecting the coefficient include not only the classification result, error, and missing report rates but also the setting of the window length and the outbound rate. Due to the delay, the higher Jaccard's coefficient, the higher the accuracy. Table 2 is a further interpretation of Figure 9 . It shows the time of each single-step analysis for different lengths of the short window and objectively evaluates the complexity of the algorithm by averaging the time. According to the sampling frequency of 1 Hz, the proposed new algorithm was calculated within 0.2 s in a 1 s interval, which fully met the operating requirements of the site. Compared to the DCUSUM-DS algorithm, the SNWFD-DS had an additional variable weight calculation, so the calculation increased. In addition, when calculating the final score, the number for the SNWFD-DS was slightly higher due to different selection strategies. Table 2 is a further interpretation of Figure 9 . It shows the time of each single-step analysis for different lengths of the short window and objectively evaluates the complexity of the algorithm by averaging the time. According to the sampling frequency of 1 Hz, the proposed new algorithm was calculated within 0.2 s in a 1 s interval, which fully met the operating requirements of the site. Compared to the DCUSUM-DS algorithm, the SNWFD-DS had an additional variable weight calculation, so the calculation increased. In addition, when calculating the final score, the number for the SNWFD-DS was slightly higher due to different selection strategies. It can be seen from Figure 9 that, compared to the SNWCAD-DS and DCUSUM-DS, the SNWFD-DS algorithm had a higher AUC because of the different weighting and final score selection strategies.",
            "cite_spans": [],
            "ref_spans": [
                {
                    "start": 12,
                    "end": 19,
                    "text": "Table 1",
                    "ref_id": "TABREF1"
                },
                {
                    "start": 538,
                    "end": 545,
                    "text": "Table 2",
                    "ref_id": null
                },
                {
                    "start": 579,
                    "end": 586,
                    "text": "Table 1",
                    "ref_id": "TABREF1"
                },
                {
                    "start": 735,
                    "end": 743,
                    "text": "Figure 7",
                    "ref_id": "FIGREF20"
                },
                {
                    "start": 1192,
                    "end": 1200,
                    "text": "Figure 7",
                    "ref_id": "FIGREF20"
                },
                {
                    "start": 1637,
                    "end": 1645,
                    "text": "Figure 8",
                    "ref_id": "FIGREF23"
                },
                {
                    "start": 2075,
                    "end": 2083,
                    "text": "Figure 8",
                    "ref_id": "FIGREF23"
                },
                {
                    "start": 2885,
                    "end": 2893,
                    "text": "Figure 8",
                    "ref_id": "FIGREF23"
                },
                {
                    "start": 3695,
                    "end": 3702,
                    "text": "Table 2",
                    "ref_id": null
                },
                {
                    "start": 3734,
                    "end": 3742,
                    "text": "Figure 9",
                    "ref_id": "FIGREF26"
                },
                {
                    "start": 4351,
                    "end": 4358,
                    "text": "Table 2",
                    "ref_id": null
                },
                {
                    "start": 4390,
                    "end": 4398,
                    "text": "Figure 9",
                    "ref_id": "FIGREF26"
                },
                {
                    "start": 5027,
                    "end": 5035,
                    "text": "Figure 9",
                    "ref_id": "FIGREF26"
                }
            ],
            "section": "Real Data Verification"
        },
        {
            "text": "The data in Table 3 show the length of the long window fixed of 400, and the length of the short sliding window as changed. The trend anomaly discrimination time of the It can be seen from Figure 9 that, compared to the SNWCAD-DS and DCUSUM-DS, the SNWFD-DS algorithm had a higher AUC because of the different weighting and final score selection strategies.",
            "cite_spans": [],
            "ref_spans": [
                {
                    "start": 12,
                    "end": 19,
                    "text": "Table 3",
                    "ref_id": null
                },
                {
                    "start": 189,
                    "end": 197,
                    "text": "Figure 9",
                    "ref_id": "FIGREF26"
                }
            ],
            "section": "Real Data Verification"
        },
        {
            "text": "The data in Table 3 show the length of the long window fixed of 400, and the length of the short sliding window as changed. The trend anomaly discrimination time of the three algorithms was compared with the real trend anomaly time, and the length of the delay was compared. The comparison showed that the SNWFD-DS algorithm had a shorter time delay than did the SNWCAD-DS or DCUSUM-DS algorithms. Even though the trend anomaly algorithm had a delay, the average of 10 s fully met the complexity of oil drilling engineering accidents with slow changes in trends. When there are signs of complex engineering accidents (10 s after an abnormal trend occurs) it can be predicted without their further deterioration. Table 3 . Algorithm calculation result delay time. 20  9  11  8  40  12  22  10  60  14  31  12  80  15  42  13  100  18  53  15  120  17  62  16  140  20  74  17  160  23  82  19  180  25  93  20  200  28  105  21  average 18.1 57.5 15.1",
            "cite_spans": [],
            "ref_spans": [
                {
                    "start": 12,
                    "end": 19,
                    "text": "Table 3",
                    "ref_id": null
                },
                {
                    "start": 712,
                    "end": 719,
                    "text": "Table 3",
                    "ref_id": null
                },
                {
                    "start": 763,
                    "end": 935,
                    "text": "20  9  11  8  40  12  22  10  60  14  31  12  80  15  42  13  100  18  53  15  120  17  62  16  140  20  74  17  160  23  82  19  180  25  93  20  200  28  105  21  average",
                    "ref_id": "TABREF1"
                }
            ],
            "section": "Real Data Verification"
        },
        {
            "text": "From the analysis of the figures and tables in the fourth section, the new algorithm SBWFD-DS had higher anomaly detection accuracy and shorter time delay compared to DCUSUM-DS. When the SNWFD-DS algorithm was not lower than the DCUSUM-DS in trend anomaly detection performance, it shortened the time for determining the trend anomaly. Although SNWFD-DS was compared with SNWCAD-DS, the delay time did not have obvious advantages, but the accuracy of trend anomaly detection was significantly higher than that of SNWCAD-DS. From the above analysis, the newly proposed algorithm SNWFD-DS had obvious trend anomaly detection accuracy and had the shortest time delay. It not only met the requirements of on-site trend anomaly detection, but also met the characteristics of on-site real-time operation.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Discussion"
        },
        {
            "text": "The algorithm proposed in this article was verified with real data from dozens of wells in the Tarim Oil field, and the results are shown in Section 4, which shows the effectiveness of the method.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Discussion"
        },
        {
            "text": "The trend anomaly detection algorithms listed in this article had to meet certain constraints. The degree of anomaly trend could not be too weak because a weak trend requires a long time, and the amount of data to be calculated for each engineering parameter was relatively large. However, there were hundreds of engineering parameters on site, and the calculation of so many parameters prevented the on-site computer from working. Limited by the calculation conditions, the long window of a single parameter of oil drilling is limited to 500 pieces of data. Therefore, very weak trend anomalies could not be detected by the algorithm proposed in this article. In addition, the detection time of the trend anomaly cannot be overly short because often that leads to the inability to distinguish between noise interference and a true trend anomaly.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Discussion"
        },
        {
            "text": "Because the trend anomaly detection of the oil drilling data stream was the thinking mode of the simulated field experts, the algorithm proposed in this article was applicable to the engineering, mud, and gas measurement parameters for oil drilling. However, as the position of the sensor moved downward, more and more sensors were installed near the drill bit, and more and more sensors with higher sampling frequencies appeared. Whether the algorithm in this article was effective at detecting trend anomalies remains to be seen.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Discussion"
        },
        {
            "text": "The fastest detection algorithm of sliding nesting was adopted. Based on the principle of sliding nesting, the data in each window was calculated with variable weights--higher for the data at the current moment and then reduced with increasing distance--which greatly reduced the complexity of the algorithm, and shortened the time for detecting weak trend abnormalities under noise interference by about half. This strategy can sensitively detect trend changes at the current moment, and can effectively eliminate noise interference. This method can improve the accuracy of trend anomaly detection. Compared with the previous trend anomaly detection method, this method adopts the integration method, which can make the trend anomaly detection be detected faster. Adopting a weighted data strategy improved prediction accuracy; the point of accumulation and function integral to data accumulation was retained; the method of abnormal judgment was changed; the forecasting time was advanced; and the timeliness of forecasting was ensured.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Discussion, Implication, and Conclusions"
        },
        {
            "text": "The new algorithm proposed in this paper can improve the accuracy of trend anomaly detection under noisy environments, and reduce the detection time. Faint abnormal trends often correspond to various engineering accidents or changes in working conditions. If these engineering accidents are not dealt with in time, they will often have very serious consequences or produce more difficult problems to deal with. For example, the occurrence of overflow in oil drilling is manifested as a slight decline in the outlet flow. If the weak anomaly of the outlet flow trend is not detected and no further treatment is performed, it will cause a blowout, or even cause damage to the derrick, or death. Thus, the fastest detection time can give more time for later processing. Therefore, the algorithm in this paper is of great significance to reduce equipment damage and deaths in industrial production.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Discussion, Implication, and Conclusions"
        },
        {
            "text": "The trend anomaly algorithm mentioned in this article has some limitations. It is limited by the characteristics of the real-time trend anomaly detection algorithm, which is a general problem of trend anomaly detection to detect the abnormal change of the trend in the shortest time period possible. Therefore, the amount of data processed in a single time is within the ability of the computer, but the algorithm must be able to reflect the change of the trend. Therefore, the algorithm proposed in this article is powerless for particularly slow abnormal changes in the trend. Second, particularly sensitive trend changes are often drowned in noise. Therefore, the trend anomaly detection algorithm proposed in this article is invalid for particularly sensitive trend anomaly detection.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Discussion, Implication, and Conclusions"
        },
        {
            "text": "Features correspond to various engineering accidents or status changes, so feature extraction in industrial data streams is very important. Because the data stream has the characteristics of real-time update and concept drift, the feature extraction of traditional static data will no longer be used. This article is aimed at the trend anomaly detection of a single data stream; however, in industrial production, engineering accidents or status changes often correspond to the trend anomaly detection of multiple data streams. Our next work will concern the selection method for machine-learning features based on concept drift, research on the reduction methods for high-dimensional data streams, and the applicability of original data features to deep-learning algorithms.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Discussion, Implication, and Conclusions"
        }
    ],
    "bib_entries": {
        "BIBREF0": {
            "ref_id": "b0",
            "title": "Local trend inconsistency: A prediction-driven approach to unsupervised anomaly detection in multiseasonal time series",
            "authors": [
                {
                    "first": "W",
                    "middle": [],
                    "last": "Wu",
                    "suffix": ""
                },
                {
                    "first": "L",
                    "middle": [],
                    "last": "He",
                    "suffix": ""
                },
                {
                    "first": "W",
                    "middle": [],
                    "last": "Lin",
                    "suffix": ""
                }
            ],
            "year": 2019,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {
                "arXiv": [
                    "arXiv:1908.01146"
                ]
            }
        },
        "BIBREF1": {
            "ref_id": "b1",
            "title": "A Joint Model for Anomaly Detection and Trend Prediction on IT Operation Series. arXiv 2019",
            "authors": [
                {
                    "first": "R",
                    "middle": [
                        "Q"
                    ],
                    "last": "Chen",
                    "suffix": ""
                },
                {
                    "first": "G",
                    "middle": [
                        "H"
                    ],
                    "last": "Shi",
                    "suffix": ""
                },
                {
                    "first": "W",
                    "middle": [
                        "L"
                    ],
                    "last": "Zhao",
                    "suffix": ""
                },
                {
                    "first": "C",
                    "middle": [
                        "H"
                    ],
                    "last": "Liang",
                    "suffix": ""
                }
            ],
            "year": null,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {
                "arXiv": [
                    "arXiv:1910.03818"
                ]
            }
        },
        "BIBREF2": {
            "ref_id": "b2",
            "title": "Application of sliding nest window control chart in data stream anomaly detection",
            "authors": [
                {
                    "first": "G",
                    "middle": [],
                    "last": "Li",
                    "suffix": ""
                },
                {
                    "first": "J",
                    "middle": [],
                    "last": "Wang",
                    "suffix": ""
                },
                {
                    "first": "J",
                    "middle": [],
                    "last": "Liang",
                    "suffix": ""
                },
                {
                    "first": "C",
                    "middle": [],
                    "last": "Yue",
                    "suffix": ""
                }
            ],
            "year": 2018,
            "venue": "",
            "volume": "10",
            "issn": "",
            "pages": "",
            "other_ids": {
                "DOI": [
                    "10.3390/sym10040113"
                ]
            }
        },
        "BIBREF3": {
            "ref_id": "b3",
            "title": "Artificial intelligence based anomaly detection of energy consumption in buildings: A review, current trends and new perspectives",
            "authors": [
                {
                    "first": "H",
                    "middle": [],
                    "last": "Yassine",
                    "suffix": ""
                },
                {
                    "first": "K",
                    "middle": [],
                    "last": "Ghanem",
                    "suffix": ""
                },
                {
                    "first": "A",
                    "middle": [],
                    "last": "Alsalemi",
                    "suffix": ""
                },
                {
                    "first": "F",
                    "middle": [],
                    "last": "Bensaali",
                    "suffix": ""
                },
                {
                    "first": "A",
                    "middle": [],
                    "last": "Amira",
                    "suffix": ""
                }
            ],
            "year": 2021,
            "venue": "Appl. Energy",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF4": {
            "ref_id": "b4",
            "title": "Robust time series anomaly detection via decomposition and convolutional neural networks. arXiv 2020",
            "authors": [
                {
                    "first": "J",
                    "middle": [],
                    "last": "Gao",
                    "suffix": ""
                },
                {
                    "first": "X",
                    "middle": [],
                    "last": "Song",
                    "suffix": ""
                },
                {
                    "first": "Q",
                    "middle": [],
                    "last": "Wen",
                    "suffix": ""
                },
                {
                    "first": "P",
                    "middle": [],
                    "last": "Wang",
                    "suffix": ""
                },
                {
                    "first": "L",
                    "middle": [],
                    "last": "Sun",
                    "suffix": ""
                },
                {
                    "first": "H",
                    "middle": [],
                    "last": "Xu",
                    "suffix": ""
                },
                {
                    "first": "",
                    "middle": [],
                    "last": "Robusttad",
                    "suffix": ""
                }
            ],
            "year": null,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {
                "arXiv": [
                    "arXiv:2002.09545"
                ]
            }
        },
        "BIBREF5": {
            "ref_id": "b5",
            "title": "Anomaly Detection Framework for Energy Smart Meter Data Stream",
            "authors": [
                {
                    "first": "X",
                    "middle": [],
                    "last": "Liu",
                    "suffix": ""
                },
                {
                    "first": "Z",
                    "middle": [],
                    "last": "Lai",
                    "suffix": ""
                },
                {
                    "first": "X",
                    "middle": [],
                    "last": "Wang",
                    "suffix": ""
                },
                {
                    "first": "L",
                    "middle": [],
                    "last": "Huang",
                    "suffix": ""
                },
                {
                    "first": "P",
                    "middle": [
                        "S"
                    ],
                    "last": "Nielsen",
                    "suffix": ""
                },
                {
                    "first": "",
                    "middle": [],
                    "last": "Contextual",
                    "suffix": ""
                }
            ],
            "year": 2020,
            "venue": "Proceedings of the International Conference on Neural Information Processing",
            "volume": "",
            "issn": "",
            "pages": "733--742",
            "other_ids": {}
        },
        "BIBREF6": {
            "ref_id": "b6",
            "title": "Finding the origin of noise transients in LIGO data with machine learning",
            "authors": [
                {
                    "first": "M",
                    "middle": [],
                    "last": "Cavaglia",
                    "suffix": ""
                },
                {
                    "first": "K",
                    "middle": [],
                    "last": "Staats",
                    "suffix": ""
                },
                {
                    "first": "T",
                    "middle": [],
                    "last": "Gill",
                    "suffix": ""
                }
            ],
            "year": 2018,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {
                "DOI": [
                    "10.4208/cicp.OA-2018-0092"
                ],
                "arXiv": [
                    "arXiv:1812.05225"
                ]
            }
        },
        "BIBREF7": {
            "ref_id": "b7",
            "title": "Real-time event detection from the Twitter data stream using the TwitterNews+ Framework",
            "authors": [
                {
                    "first": "M",
                    "middle": [],
                    "last": "Hasan",
                    "suffix": ""
                },
                {
                    "first": "M",
                    "middle": [
                        "A"
                    ],
                    "last": "Orgun",
                    "suffix": ""
                },
                {
                    "first": "R",
                    "middle": [],
                    "last": "Schwitter",
                    "suffix": ""
                }
            ],
            "year": 2019,
            "venue": "Inf. Process. Manag",
            "volume": "56",
            "issn": "",
            "pages": "1146--1165",
            "other_ids": {
                "DOI": [
                    "10.1016/j.ipm.2018.03.001"
                ]
            }
        },
        "BIBREF8": {
            "ref_id": "b8",
            "title": "Adaptive random forests for evolving data stream classification",
            "authors": [
                {
                    "first": "H",
                    "middle": [
                        "M"
                    ],
                    "last": "Gomes",
                    "suffix": ""
                },
                {
                    "first": "A",
                    "middle": [],
                    "last": "Bifet",
                    "suffix": ""
                },
                {
                    "first": "J",
                    "middle": [],
                    "last": "Read",
                    "suffix": ""
                },
                {
                    "first": "J",
                    "middle": [
                        "P"
                    ],
                    "last": "Barddal",
                    "suffix": ""
                },
                {
                    "first": "F",
                    "middle": [],
                    "last": "Enembreck",
                    "suffix": ""
                },
                {
                    "first": "B",
                    "middle": [],
                    "last": "Pfharinger",
                    "suffix": ""
                },
                {
                    "first": "G",
                    "middle": [],
                    "last": "Holmes",
                    "suffix": ""
                },
                {
                    "first": "T",
                    "middle": [],
                    "last": "Abdessalem",
                    "suffix": ""
                }
            ],
            "year": 2017,
            "venue": "Mach. Learn",
            "volume": "106",
            "issn": "",
            "pages": "1469--1495",
            "other_ids": {
                "DOI": [
                    "10.1007/s10994-017-5642-8"
                ]
            }
        },
        "BIBREF9": {
            "ref_id": "b9",
            "title": "On removing routing protocol from future wireless networks: A real-time deep learning approach for intelligent traffic control",
            "authors": [
                {
                    "first": "F",
                    "middle": [],
                    "last": "Tang",
                    "suffix": ""
                },
                {
                    "first": "B",
                    "middle": [],
                    "last": "Mao",
                    "suffix": ""
                },
                {
                    "first": "Z",
                    "middle": [
                        "M"
                    ],
                    "last": "Fadlullah",
                    "suffix": ""
                },
                {
                    "first": "N",
                    "middle": [],
                    "last": "Kato",
                    "suffix": ""
                },
                {
                    "first": "O",
                    "middle": [],
                    "last": "Akashi",
                    "suffix": ""
                },
                {
                    "first": "T",
                    "middle": [],
                    "last": "Inoue",
                    "suffix": ""
                },
                {
                    "first": "K",
                    "middle": [],
                    "last": "Mizutani",
                    "suffix": ""
                }
            ],
            "year": 2017,
            "venue": "IEEE Wirel. Commun",
            "volume": "25",
            "issn": "",
            "pages": "154--160",
            "other_ids": {
                "DOI": [
                    "10.1109/MWC.2017.1700244"
                ]
            }
        },
        "BIBREF10": {
            "ref_id": "b10",
            "title": "A real-time deep learning pedestrian detector for robot navigation",
            "authors": [
                {
                    "first": "D",
                    "middle": [],
                    "last": "Ribeiro",
                    "suffix": ""
                },
                {
                    "first": "A",
                    "middle": [],
                    "last": "Mateus",
                    "suffix": ""
                },
                {
                    "first": "P",
                    "middle": [],
                    "last": "Miraldo",
                    "suffix": ""
                },
                {
                    "first": "J",
                    "middle": [
                        "C"
                    ],
                    "last": "Nascimento",
                    "suffix": ""
                }
            ],
            "year": 2017,
            "venue": "Proceedings of the 2017 IEEE International Conference on Autonomous Robot Systems and Competitions (ICARSC)",
            "volume": "",
            "issn": "",
            "pages": "165--171",
            "other_ids": {}
        },
        "BIBREF11": {
            "ref_id": "b11",
            "title": "An intelligent route computation approach based on real-time deep learning strategy for software defined communication systems",
            "authors": [
                {
                    "first": "B",
                    "middle": [],
                    "last": "Mao",
                    "suffix": ""
                },
                {
                    "first": "F",
                    "middle": [],
                    "last": "Tang",
                    "suffix": ""
                },
                {
                    "first": "Z",
                    "middle": [
                        "M"
                    ],
                    "last": "Fadlullah",
                    "suffix": ""
                },
                {
                    "first": "N",
                    "middle": [],
                    "last": "Kato",
                    "suffix": ""
                }
            ],
            "year": 2019,
            "venue": "IEEE Trans. Emerg. Top. Comput",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {
                "DOI": [
                    "10.1109/TETC.2019.2899407"
                ]
            }
        },
        "BIBREF12": {
            "ref_id": "b12",
            "title": "Machine learning for real-time prediction of complications in critical care: A retrospective study",
            "authors": [
                {
                    "first": "A",
                    "middle": [],
                    "last": "Meyer",
                    "suffix": ""
                },
                {
                    "first": "D",
                    "middle": [],
                    "last": "Zverinski",
                    "suffix": ""
                },
                {
                    "first": "B",
                    "middle": [],
                    "last": "Pfahringer",
                    "suffix": ""
                },
                {
                    "first": "J",
                    "middle": [],
                    "last": "Kempfert",
                    "suffix": ""
                },
                {
                    "first": "T",
                    "middle": [],
                    "last": "Kuehne",
                    "suffix": ""
                },
                {
                    "first": "S",
                    "middle": [
                        "H"
                    ],
                    "last": "S\u00fcndermann",
                    "suffix": ""
                },
                {
                    "first": "C",
                    "middle": [],
                    "last": "Stamm",
                    "suffix": ""
                },
                {
                    "first": "T",
                    "middle": [],
                    "last": "Hofmann",
                    "suffix": ""
                },
                {
                    "first": "V",
                    "middle": [],
                    "last": "Falk",
                    "suffix": ""
                },
                {
                    "first": "C",
                    "middle": [],
                    "last": "Eickhoff",
                    "suffix": ""
                }
            ],
            "year": 2018,
            "venue": "Lancet Respir. Med",
            "volume": "6",
            "issn": "",
            "pages": "905--914",
            "other_ids": {
                "DOI": [
                    "10.1016/S2213-2600(18)30300-X"
                ]
            }
        },
        "BIBREF13": {
            "ref_id": "b13",
            "title": "Real-time realization of Dynamic Programming using machine learning methods for IC engine waste heat recovery system power optimization",
            "authors": [
                {
                    "first": "B",
                    "middle": [],
                    "last": "Xu",
                    "suffix": ""
                },
                {
                    "first": "D",
                    "middle": [],
                    "last": "Rathod",
                    "suffix": ""
                },
                {
                    "first": "A",
                    "middle": [],
                    "last": "Yebi",
                    "suffix": ""
                },
                {
                    "first": "Z",
                    "middle": [],
                    "last": "Filipi",
                    "suffix": ""
                }
            ],
            "year": 2020,
            "venue": "Appl. Energy",
            "volume": "262",
            "issn": "",
            "pages": "",
            "other_ids": {
                "DOI": [
                    "10.1016/j.apenergy.2020.114514"
                ]
            }
        },
        "BIBREF14": {
            "ref_id": "b14",
            "title": "Real-time observations of the impact of COVID-19 on underwater noise",
            "authors": [
                {
                    "first": "D",
                    "middle": [
                        "J M"
                    ],
                    "last": "Thomson",
                    "suffix": ""
                },
                {
                    "first": "D",
                    "middle": [
                        "R"
                    ],
                    "last": "Barclay",
                    "suffix": ""
                }
            ],
            "year": null,
            "venue": "J. Acoust. Soc. Am",
            "volume": "2020",
            "issn": "",
            "pages": "3390--3396",
            "other_ids": {
                "DOI": [
                    "10.1121/10.0001271"
                ]
            }
        },
        "BIBREF15": {
            "ref_id": "b15",
            "title": "Data Stream Adaptive Partitioning of Sliding Window Based on Gaussian Restricted Boltzmann Machine",
            "authors": [
                {
                    "first": "W",
                    "middle": [],
                    "last": "Wang",
                    "suffix": ""
                },
                {
                    "first": "M",
                    "middle": [],
                    "last": "Zhang",
                    "suffix": ""
                }
            ],
            "year": 2020,
            "venue": "In Artificial Intelligence in China",
            "volume": "",
            "issn": "",
            "pages": "220--228",
            "other_ids": {}
        },
        "BIBREF16": {
            "ref_id": "b16",
            "title": "A landmark-model based system for mining frequent patterns from uncertain data streams",
            "authors": [
                {
                    "first": "C",
                    "middle": [
                        "K S"
                    ],
                    "last": "Leung",
                    "suffix": ""
                },
                {
                    "first": "F",
                    "middle": [],
                    "last": "Jiang",
                    "suffix": ""
                },
                {
                    "first": "Y",
                    "middle": [],
                    "last": "Hayduk",
                    "suffix": ""
                }
            ],
            "year": 2011,
            "venue": "Proceedings of the 15th Symposium on International Database Engineering & Applications",
            "volume": "",
            "issn": "",
            "pages": "249--250",
            "other_ids": {}
        },
        "BIBREF17": {
            "ref_id": "b17",
            "title": "Dynamic plan migration for snapshot-equivalent continuous queries in data stream systems",
            "authors": [
                {
                    "first": "J",
                    "middle": [],
                    "last": "Kr\u00e4mer",
                    "suffix": ""
                },
                {
                    "first": "Y",
                    "middle": [],
                    "last": "Yang",
                    "suffix": ""
                },
                {
                    "first": "M",
                    "middle": [],
                    "last": "Cammert",
                    "suffix": ""
                },
                {
                    "first": "B",
                    "middle": [],
                    "last": "Seeger",
                    "suffix": ""
                }
            ],
            "year": 2006,
            "venue": "Proceedings of the International Conference on Extending Database Technology",
            "volume": "",
            "issn": "",
            "pages": "497--516",
            "other_ids": {}
        },
        "BIBREF18": {
            "ref_id": "b18",
            "title": "Infrared Small Target Detection Based on Facet-Kernel Filtering Local Contrast Measure",
            "authors": [
                {
                    "first": "P",
                    "middle": [],
                    "last": "Du",
                    "suffix": ""
                },
                {
                    "first": "A",
                    "middle": [],
                    "last": "Hamdulla",
                    "suffix": ""
                }
            ],
            "year": 2019,
            "venue": "Proceedings of the China Conference on Wireless Sensor Networks",
            "volume": "",
            "issn": "",
            "pages": "360--367",
            "other_ids": {}
        },
        "BIBREF19": {
            "ref_id": "b19",
            "title": "An end-to-end residual fusion network for infrared and visible images",
            "authors": [
                {
                    "first": "H",
                    "middle": [],
                    "last": "Li",
                    "suffix": ""
                },
                {
                    "first": "X",
                    "middle": [
                        "J"
                    ],
                    "last": "Wu",
                    "suffix": ""
                },
                {
                    "first": "J",
                    "middle": [],
                    "last": "Kittler",
                    "suffix": ""
                },
                {
                    "first": "",
                    "middle": [],
                    "last": "Rfn-Nest",
                    "suffix": ""
                }
            ],
            "year": 2021,
            "venue": "Inf. Fusion",
            "volume": "73",
            "issn": "",
            "pages": "72--86",
            "other_ids": {
                "DOI": [
                    "10.1016/j.inffus.2021.02.023"
                ]
            }
        },
        "BIBREF20": {
            "ref_id": "b20",
            "title": "Detection of water quality failure events at treatment works using a hybrid two-stage method with CUSUM and random forest algorithms. Water Supply 2021",
            "authors": [
                {
                    "first": "G",
                    "middle": [],
                    "last": "Riss",
                    "suffix": ""
                },
                {
                    "first": "M",
                    "middle": [],
                    "last": "Romano",
                    "suffix": ""
                },
                {
                    "first": "F",
                    "middle": [
                        "A"
                    ],
                    "last": "Memon",
                    "suffix": ""
                },
                {
                    "first": "Z",
                    "middle": [],
                    "last": "Kapelan",
                    "suffix": ""
                }
            ],
            "year": null,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {
                "DOI": [
                    "10.2166/ws.2021.062"
                ]
            }
        },
        "BIBREF21": {
            "ref_id": "b21",
            "title": "The application of a double CUSUM algorithm in industrial data stream anomaly detection",
            "authors": [
                {
                    "first": "G",
                    "middle": [],
                    "last": "Li",
                    "suffix": ""
                },
                {
                    "first": "J",
                    "middle": [],
                    "last": "Wang",
                    "suffix": ""
                },
                {
                    "first": "J",
                    "middle": [],
                    "last": "Liang",
                    "suffix": ""
                },
                {
                    "first": "C",
                    "middle": [],
                    "last": "Yue",
                    "suffix": ""
                }
            ],
            "year": 2018,
            "venue": "",
            "volume": "10",
            "issn": "",
            "pages": "",
            "other_ids": {
                "DOI": [
                    "10.3390/sym10070264"
                ]
            }
        },
        "BIBREF22": {
            "ref_id": "b22",
            "title": "Decomposition and forecasting analysis of China's household electricity consumption using three-dimensional decomposition and hybrid trend extrapolation models",
            "authors": [
                {
                    "first": "M",
                    "middle": [],
                    "last": "Meng",
                    "suffix": ""
                },
                {
                    "first": "L",
                    "middle": [],
                    "last": "Wang",
                    "suffix": ""
                },
                {
                    "first": "W",
                    "middle": [],
                    "last": "Shang",
                    "suffix": ""
                }
            ],
            "year": 2018,
            "venue": "",
            "volume": "165",
            "issn": "",
            "pages": "143--152",
            "other_ids": {
                "DOI": [
                    "10.1016/j.energy.2018.09.090"
                ]
            }
        },
        "BIBREF23": {
            "ref_id": "b23",
            "title": "Cancer prevalence in France: Time trend, situation in 2002 and extrapolation to 2012",
            "authors": [
                {
                    "first": "M",
                    "middle": [],
                    "last": "Colonna",
                    "suffix": ""
                },
                {
                    "first": "A",
                    "middle": [],
                    "last": "Danzon",
                    "suffix": ""
                },
                {
                    "first": "P",
                    "middle": [],
                    "last": "Delafosse",
                    "suffix": ""
                },
                {
                    "first": "N",
                    "middle": [],
                    "last": "Mitton",
                    "suffix": ""
                },
                {
                    "first": "S",
                    "middle": [],
                    "last": "Bara",
                    "suffix": ""
                },
                {
                    "first": "A.-M",
                    "middle": [],
                    "last": "Bouvier",
                    "suffix": ""
                },
                {
                    "first": "O",
                    "middle": [],
                    "last": "Ganry",
                    "suffix": ""
                },
                {
                    "first": "A.-V",
                    "middle": [],
                    "last": "Guizard",
                    "suffix": ""
                },
                {
                    "first": "G",
                    "middle": [],
                    "last": "Launoy",
                    "suffix": ""
                },
                {
                    "first": "F",
                    "middle": [],
                    "last": "Molinie",
                    "suffix": ""
                }
            ],
            "year": 2008,
            "venue": "Eur. J. Cancer",
            "volume": "44",
            "issn": "",
            "pages": "115--122",
            "other_ids": {
                "DOI": [
                    "10.1016/j.ejca.2007.10.022"
                ]
            }
        },
        "BIBREF25": {
            "ref_id": "b25",
            "title": "A temporal-spatial interpolation and extrapolation method based on geographic Long Short-Term Memory neural network for PM 2.5",
            "authors": [
                {
                    "first": "J",
                    "middle": [],
                    "last": "Ma",
                    "suffix": ""
                },
                {
                    "first": "Y",
                    "middle": [],
                    "last": "Ding",
                    "suffix": ""
                },
                {
                    "first": "J",
                    "middle": [
                        "C P"
                    ],
                    "last": "Cheng",
                    "suffix": ""
                },
                {
                    "first": "F",
                    "middle": [],
                    "last": "Jiang",
                    "suffix": ""
                },
                {
                    "first": "Z",
                    "middle": [],
                    "last": "Wan",
                    "suffix": ""
                }
            ],
            "year": 2019,
            "venue": "J. Clean. Prod",
            "volume": "237",
            "issn": "",
            "pages": "",
            "other_ids": {
                "DOI": [
                    "10.1016/j.jclepro.2019.117729"
                ]
            }
        },
        "BIBREF26": {
            "ref_id": "b26",
            "title": "Robust unsupervised anomaly detection via multi-time scale DCGANs with forgetting mechanism for industrial multivariate time series",
            "authors": [
                {
                    "first": "H",
                    "middle": [],
                    "last": "Liang",
                    "suffix": ""
                },
                {
                    "first": "L",
                    "middle": [],
                    "last": "Song",
                    "suffix": ""
                },
                {
                    "first": "J",
                    "middle": [],
                    "last": "Wang",
                    "suffix": ""
                },
                {
                    "first": "L",
                    "middle": [],
                    "last": "Guo",
                    "suffix": ""
                },
                {
                    "first": "X",
                    "middle": [],
                    "last": "Li",
                    "suffix": ""
                },
                {
                    "first": "J",
                    "middle": [],
                    "last": "Liang",
                    "suffix": ""
                }
            ],
            "year": null,
            "venue": "Neurocomputing",
            "volume": "2021",
            "issn": "",
            "pages": "444--462",
            "other_ids": {
                "DOI": [
                    "10.1016/j.neucom.2020.10.084"
                ]
            }
        }
    },
    "ref_entries": {
        "FIGREF1": {
            "text": "Data stream processing based on different windows.",
            "latex": null,
            "type": "figure"
        },
        "FIGREF2": {
            "text": "Data stream processing based on different windows.",
            "latex": null,
            "type": "figure"
        },
        "FIGREF4": {
            "text": "Sliding nest window trend anomaly detection schematic diagram.",
            "latex": null,
            "type": "figure"
        },
        "FIGREF5": {
            "text": "Sliding nest window trend anomaly detection schematic diagram.",
            "latex": null,
            "type": "figure"
        },
        "FIGREF7": {
            "text": "Schematic diagram of CUSUM control chart.",
            "latex": null,
            "type": "figure"
        },
        "FIGREF8": {
            "text": "Schematic diagram of CUSUM control chart.",
            "latex": null,
            "type": "figure"
        },
        "FIGREF9": {
            "text": "Primitives trend set.",
            "latex": null,
            "type": "figure"
        },
        "FIGREF10": {
            "text": "Parameters of Box Plot.",
            "latex": null,
            "type": "figure"
        },
        "FIGREF11": {
            "text": "Primitives trend set.",
            "latex": null,
            "type": "figure"
        },
        "FIGREF12": {
            "text": "Primitives trend set.",
            "latex": null,
            "type": "figure"
        },
        "FIGREF13": {
            "text": "Parameters of Box Plot.",
            "latex": null,
            "type": "figure"
        },
        "FIGREF14": {
            "text": "Parameters of Box Plot.",
            "latex": null,
            "type": "figure"
        },
        "FIGREF16": {
            "text": "Algorithm 1 is the algorithm of real-time weight transformation. Algorithm 1 Sliding Nest Window Weights Changed Algorithm SNWWCA: initialize LW, SW Set weights range: (a, b) Compute weights step: (b \u2212 a)/LW; (b \u2212 a)/SW; Update: t; Update: P * (b \u2212 a)/LW; S * (b \u2212 a)/SW; Update: P * (b \u2212 a)/LW; S * (b \u2212 a)/SW;LW is the length of the long sliding window; SW is the length of the short sliding",
            "latex": null,
            "type": "figure"
        },
        "FIGREF17": {
            "text": "Sliding window-based anomaly detection with changed weights. SNWWCA: initialize LW, SW Set weights range: (a, b) Compute weights step: (b \u2212 a)/LW; (b \u2212 a)/SW; Update: t; Update: P * (b \u2212 a)/LW; S * (b \u2212 a)/SW; Update: P * (b \u2212 a)/LW; S * (b \u2212 a)/SW;",
            "latex": null,
            "type": "figure"
        },
        "FIGREF18": {
            "text": "SNWFD-DS DCUSUM-DS: initialize LW, SW, T, \u03b2 Compute weights of SW and LW Compute:",
            "latex": null,
            "type": "figure"
        },
        "FIGREF20": {
            "text": "Comparison of classification results.",
            "latex": null,
            "type": "figure"
        },
        "FIGREF21": {
            "text": "Comparison of classification results.",
            "latex": null,
            "type": "figure"
        },
        "FIGREF22": {
            "text": "Comparison of classification results.",
            "latex": null,
            "type": "figure"
        },
        "FIGREF23": {
            "text": "Jaccard's coefficient of each algorithm.",
            "latex": null,
            "type": "figure"
        },
        "FIGREF24": {
            "text": "Jaccard's coefficient of each algorithm.",
            "latex": null,
            "type": "figure"
        },
        "FIGREF26": {
            "text": "The receiver operating characteristic (ROC) curve and the area under the curve (AUC).",
            "latex": null,
            "type": "figure"
        },
        "FIGREF27": {
            "text": "The receiver operating characteristic (ROC) curve and the area under the curve (AUC).",
            "latex": null,
            "type": "figure"
        },
        "TABREF1": {
            "text": "Algorithm setting table.",
            "latex": null,
            "type": "table"
        }
    },
    "back_matter": [
        {
            "text": "The authors declare no conflict of interest.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Conflicts of Interest:"
        }
    ]
}