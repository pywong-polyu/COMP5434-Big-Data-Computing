{
    "paper_id": "dee247af7c61369acfd25919b945fa0c8b95cb68",
    "metadata": {
        "title": "Test Automation with the Gauge Framework: Experience and Best Practices",
        "authors": [
            {
                "first": "Vahid",
                "middle": [],
                "last": "Garousi",
                "suffix": "",
                "affiliation": {
                    "laboratory": "",
                    "institution": "Queen's University Belfast",
                    "location": {
                        "settlement": "Belfast",
                        "region": "Northern Ireland",
                        "country": "UK"
                    }
                },
                "email": "v.garousi@qub.ac.uk"
            },
            {
                "first": "Alper",
                "middle": [],
                "last": "Bu\u011fra Kele\u015f",
                "suffix": "",
                "affiliation": {},
                "email": ""
            },
            {
                "first": "Yunus",
                "middle": [],
                "last": "Balaman",
                "suffix": "",
                "affiliation": {},
                "email": "yunus.balaman@testinium.com"
            },
            {
                "first": "Zeynep",
                "middle": [
                    "\u00d6zdemir"
                ],
                "last": "G\u00fcler",
                "suffix": "",
                "affiliation": {},
                "email": "zeynep.ozdemir@testinium.com"
            }
        ]
    },
    "abstract": [
        {
            "text": "While Behavior-driven development (BDD) tools such as Cucumber are powerful tools for automated testing, they have certain limitations. For example, they often enforce strict syntax for test cases, like the \"Given-When-Then\" format, which may not always be easy to write for a given test case. A new test automation framework named Gauge (gauge.org) addresses that limitation since it does not prescribe the BDD testing process with a strict syntax. In Gauge, writing a test case is as easy as writing down the flow of test cases in several itemized sentences in a natural language, like English.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Abstract"
        },
        {
            "text": "In the context of Testinium (testinium.com), a large software testing company which provides software testing services, tools and solutions to a large number of clients, we have actively used the Gauge framework since 2018 to develop large automated front-end test suites for several large web applications.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Abstract"
        },
        {
            "text": "In this paper/talk, the speakers will share several examples and best practices of developing automated tests in natural-language requirements using the Gauge framework. By learning from the ideas presented in the talk, readers (attendees) will be able to consider applying the Gauge framework in their own test automation projects. A step \"implementation\" @Step(\"Inside the field <key>, write <text>\") public void sendKey(String key, String text){ ElementInfo elementInfo = Stor Helper.INSTANCE.findElementInfoByKey(key); sendKeyBy(ElementHelper.getElementInfoToBy(elementInfo), elementInfo.getIndex(), text); } Call Call Call the SUT",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Abstract"
        }
    ],
    "body_text": [
        {
            "text": "If planned and executed properly, test automation can increase efficiency and effectiveness of software testing and thus leading to higher quality software products [1, 2] . On the other hand, just like any other software engineering activity, if not planned and executed properly, test automation can result in failure (google.com/search?q = test +automation+failure).",
            "cite_spans": [
                {
                    "start": 165,
                    "end": 168,
                    "text": "[1,",
                    "ref_id": "BIBREF0"
                },
                {
                    "start": 169,
                    "end": 171,
                    "text": "2]",
                    "ref_id": "BIBREF3"
                }
            ],
            "ref_spans": [],
            "section": "Introduction"
        },
        {
            "text": "Test automation technologies are rapidly evolving and new methods and tools constantly appear the in industry. One of the approaches is to the Behavior-Driven Development (BDD) approach [3] which \"describes a cycle of interactions with welldefined outputs, resulting in the delivery of working, tested software that matters\" [4] .",
            "cite_spans": [
                {
                    "start": 186,
                    "end": 189,
                    "text": "[3]",
                    "ref_id": null
                },
                {
                    "start": 325,
                    "end": 328,
                    "text": "[4]",
                    "ref_id": null
                }
            ],
            "ref_spans": [],
            "section": "Introduction"
        },
        {
            "text": "While the BDD approach and the many tools that support BDD, such as Cucumber, are useful in many contexts for automated testing, they have certain limitations, e.g., [5] [6] [7] [8] . For example, they often enforce \"strict\" syntax for test cases, like the \"Given-When-Then\" format, which may not always be easy to write for certain test cases [7] . That is one of the main reasons that a recent test automation framework named Gauge (gauge.org) was released by ThoughtWorks in 2018 [5] . Gauge addresses the above limitation since it does not prescribe the BDD testing process with a strict syntax. In Gauge, writing a test case is as easy as writing down the flow of test cases in several itemized sentences in a natural language, like English. Executable test specifications are written in the form of regular natural-language sentences and, using some form of mapping functions, are then directly executed for the purpose of testing.",
            "cite_spans": [
                {
                    "start": 166,
                    "end": 169,
                    "text": "[5]",
                    "ref_id": "BIBREF6"
                },
                {
                    "start": 170,
                    "end": 173,
                    "text": "[6]",
                    "ref_id": "BIBREF7"
                },
                {
                    "start": 174,
                    "end": 177,
                    "text": "[7]",
                    "ref_id": "BIBREF8"
                },
                {
                    "start": 178,
                    "end": 181,
                    "text": "[8]",
                    "ref_id": "BIBREF9"
                },
                {
                    "start": 344,
                    "end": 347,
                    "text": "[7]",
                    "ref_id": "BIBREF8"
                },
                {
                    "start": 483,
                    "end": 486,
                    "text": "[5]",
                    "ref_id": "BIBREF6"
                }
            ],
            "ref_spans": [],
            "section": "Introduction"
        },
        {
            "text": "Development of test suites in such a manner provides various benefits (e.g., enabling testers to write test cases in natural language) and, at the same time, exposes many challenges which have to be addressed, as we will see in the rest of this paper, e.g., flexibility of free text for test scripts can be a demerit as they will not have a defined format.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Introduction"
        },
        {
            "text": "In the context of Testinium (testinium.com), a large software testing company which provides software testing services, tools and solutions to a large number of clients in several countries, the authors of this paper and their team members have actively used the Gauge framework since 2018 to develop large automated front-end test suites for several large web applications. Our research and development efforts are under the umbrella of a large-scale industry-academia collaboration [9] , following the technology transfer guidelines in software engineering [10] , and has been conducted in the context and using the funding of a 3-year international European R&D project named the \"TESTOMAT -The Next Level of Test Automation\" (www. testomatproject.eu), in which 34 industrial/academic partners across six countries are collaborating.",
            "cite_spans": [
                {
                    "start": 484,
                    "end": 487,
                    "text": "[9]",
                    "ref_id": "BIBREF10"
                },
                {
                    "start": 559,
                    "end": 563,
                    "text": "[10]",
                    "ref_id": "BIBREF11"
                }
            ],
            "ref_spans": [],
            "section": "Introduction"
        },
        {
            "text": "In this paper (talk), the speakers will share several examples and best practices of developing automated tests in natural-language requirements using the Gauge framework. By learning from the ideas presented in the talk, readers (attendees of the talk) will be able to consider applying the Gauge framework in their own test automation projects.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Introduction"
        },
        {
            "text": "Testinium A.\u015e. is a provider of testing services and solutions in Turkey and across Europe. Testinium A.\u015e. was founded in year 2010 and has provided automated testing to 50+ clients in several countries so far. In addition to the test service offered to clients, the company has developed and offers two flagship test automation tools: Testinium (testinium.com) and Loadium (loadium.com). As of Spring 2020, Testinium A.\u015e. has about 190 employees. The company works using the agile methodologies in general.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Overview of the Industrial Context and Need Analysis"
        },
        {
            "text": "The company has been proactive in adapting novel approaches to increase effectiveness and efficiency of its test activities, and joining the European TESTOMAT project has been one of those initiatives. Almost all of the Systems Under Test (SUTs) tested by test engineers are the clients' web or mobile applications, e.g., the online ticket sales website of several major airlines in Turkey.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Overview of the Industrial Context and Need Analysis"
        },
        {
            "text": "A routine ongoing activity in the company is to utilize the latest test automation tools and approaches in the projects. As it has been discussed in the literature, \"Selecting the right tool for the right purpose is a key to success\" [11] . There have been a lot of guidelines and suggestions for choosing the \"right\" test automation tool in the grey literature (e.g., blogs posts, white papers), and a recent a grey literature review summarized the body of knowledge on the topic [12] . Due to the reasons discussed in the previous section above, i.e., Gauge addressing the shortcomings of the BDD tools/approaches, the team decided to use Gauge as a main tool for UI-based system testing of web applications.",
            "cite_spans": [
                {
                    "start": 234,
                    "end": 238,
                    "text": "[11]",
                    "ref_id": "BIBREF12"
                },
                {
                    "start": 481,
                    "end": 485,
                    "text": "[12]",
                    "ref_id": "BIBREF13"
                }
            ],
            "ref_spans": [],
            "section": "Overview of the Industrial Context and Need Analysis"
        },
        {
            "text": "For the purpose of illustration in this paper, as a the running example, we pick one of the Systems Under Test (SUT), a test tool developed in-house, which is one of the company's main offered solutions, Testinium (testinium.com). Testinium is a web application which provides various test management features via a web interface to Selenium. Two screenshots from the Testinium are shown in Fig. 1 , in which the login page and the \"all reports\" page are visible. To provide more information about features of the tool, we depict its use-case diagram in Fig. 2 . Since the Gauge tool is quite recent (released in 2018), except several informal online blog posts and such, there are not any experience reports that we know of, using Gauge.",
            "cite_spans": [],
            "ref_spans": [
                {
                    "start": 391,
                    "end": 397,
                    "text": "Fig. 1",
                    "ref_id": "FIGREF0"
                },
                {
                    "start": 554,
                    "end": 560,
                    "text": "Fig. 2",
                    "ref_id": "FIGREF1"
                }
            ],
            "section": "Overview of the Industrial Context and Need Analysis"
        },
        {
            "text": "Various papers have been published on Behavior-driven development (BDD), e.g., [13, 14] . Various books and papers have been published on test automation. One of the books on the topic is entitled \"Experiences of test automation: case studies of software test automation\" [15] , which is composed of 29 chapters, all written by industrial test practitioners who reported separate case studies on test automation.",
            "cite_spans": [
                {
                    "start": 79,
                    "end": 83,
                    "text": "[13,",
                    "ref_id": "BIBREF14"
                },
                {
                    "start": 84,
                    "end": 87,
                    "text": "14]",
                    "ref_id": "BIBREF15"
                },
                {
                    "start": 272,
                    "end": 276,
                    "text": "[15]",
                    "ref_id": "BIBREF16"
                }
            ],
            "ref_spans": [],
            "section": "Overview of the Industrial Context and Need Analysis"
        },
        {
            "text": "The authors have published a number of experience reports on test automation using different technologies and in different contexts, e.g., [2, [16] [17] [18] [19] [20] [21] . ",
            "cite_spans": [
                {
                    "start": 139,
                    "end": 142,
                    "text": "[2,",
                    "ref_id": "BIBREF3"
                },
                {
                    "start": 143,
                    "end": 147,
                    "text": "[16]",
                    "ref_id": "BIBREF17"
                },
                {
                    "start": 148,
                    "end": 152,
                    "text": "[17]",
                    "ref_id": "BIBREF18"
                },
                {
                    "start": 153,
                    "end": 157,
                    "text": "[18]",
                    "ref_id": "BIBREF19"
                },
                {
                    "start": 158,
                    "end": 162,
                    "text": "[19]",
                    "ref_id": "BIBREF20"
                },
                {
                    "start": 163,
                    "end": 167,
                    "text": "[20]",
                    "ref_id": "BIBREF21"
                },
                {
                    "start": 168,
                    "end": 172,
                    "text": "[21]",
                    "ref_id": "BIBREF22"
                }
            ],
            "ref_spans": [],
            "section": "Overview of the Industrial Context and Need Analysis"
        },
        {
            "text": "In Gauge (gauge.org), an automated test case written by writing down the flow of test cases in several itemized sentences in a natural language (like English). Executable test specifications are written in the form of regular natural-language sentences and are then directly executed for the purpose of testing. For illustration, we show in Table 1 the partial test-code listing of a large Gauge test-script that we have developed for the Testinium as the SUT.",
            "cite_spans": [],
            "ref_spans": [
                {
                    "start": 341,
                    "end": 348,
                    "text": "Table 1",
                    "ref_id": null
                }
            ],
            "section": "How the Gauge Tool Works"
        },
        {
            "text": "To allow test engineers develop test scripts in the varying levels of \"abstraction\" and to enable highly modular (and higher quality) test scripts [22] , Gauge defines five inter-related concepts: test \"specification\", test \"scenarios\", test \"concepts\", test \"steps\", and step \"implementation\", the relationship of which are shown in Fig. 3 . We also provide an example Gauge test-script for the Testinium in Table 1 A test engineer develops a test suite, which could include several (one or more) test specifications. Each test specification is a \".SPEC\" file and includes a set of test scenarios (see the test script example in Table 1 ). We have learnt by experience that a best practice is to correspond each test specification file to each use-case of the system (Fig. 2) . For example, we would have one test specification file for the \"login\" usecase, which has several test scenarios, one of them being LoginPage_Input Controls as shown in Table 1 .",
            "cite_spans": [
                {
                    "start": 147,
                    "end": 151,
                    "text": "[22]",
                    "ref_id": "BIBREF23"
                }
            ],
            "ref_spans": [
                {
                    "start": 334,
                    "end": 340,
                    "text": "Fig. 3",
                    "ref_id": null
                },
                {
                    "start": 409,
                    "end": 416,
                    "text": "Table 1",
                    "ref_id": null
                },
                {
                    "start": 630,
                    "end": 637,
                    "text": "Table 1",
                    "ref_id": null
                },
                {
                    "start": 768,
                    "end": 776,
                    "text": "(Fig. 2)",
                    "ref_id": "FIGREF1"
                },
                {
                    "start": 948,
                    "end": 955,
                    "text": "Table 1",
                    "ref_id": null
                }
            ],
            "section": "How the Gauge Tool Works"
        },
        {
            "text": "Test concept is another feature provided by Gauge to enable modularity of testcode, a practice which has been widely encouraged in test automation [22] . For example, in the example of Table 1 , there is one test scenario (LoginPage_Input Controls), which includes calls to two test concepts, which are defined in another scope (a .CPT file). In addition to ensuring varying levels of abstraction, such a modularity also support another proven design pattern: separation of concerns (SoC). Each test concept can have one or more test steps (see the example in Table 1 ). Test steps are the lowest-level entities in terms of abstraction in Gauge. To enable the executability of Gauge test scripts, a test implementation (e.g., in Java Selenium) should be developed for each pattern of test steps. For example, test step \" Inside the field tbEmailOfLogin, write <email> \" will call the corresponding function in Java code in Table 1 , which will send the keys, etc. to realize that test steps. In fact, each test step is like a function call, and it can include parameters, as seen in the example.",
            "cite_spans": [
                {
                    "start": 147,
                    "end": 151,
                    "text": "[22]",
                    "ref_id": "BIBREF23"
                }
            ],
            "ref_spans": [
                {
                    "start": 185,
                    "end": 192,
                    "text": "Table 1",
                    "ref_id": null
                },
                {
                    "start": 560,
                    "end": 567,
                    "text": "Table 1",
                    "ref_id": null
                },
                {
                    "start": 923,
                    "end": 930,
                    "text": "Table 1",
                    "ref_id": null
                }
            ],
            "section": "How the Gauge Tool Works"
        },
        {
            "text": "Other parts of the test-automation architecture diagram in Fig. 3 shows how the rest of the process works. A test implementation invokes Gauge and Selenium libraries and, via them, calls (exercises) the UI elements in the web application (SUT). Once tests finish executing, test outputs are provided to the test engineer.",
            "cite_spans": [],
            "ref_spans": [
                {
                    "start": 59,
                    "end": 65,
                    "text": "Fig. 3",
                    "ref_id": null
                }
            ],
            "section": "How the Gauge Tool Works"
        },
        {
            "text": "As mentioned earlier, we have actively used the Gauge framework since 2018 to develop large automated front-end test suites for ten's of large web applications, as SUTs. The SUTs are those developed by our clients and many systems developed inhouse, e.g., Testinium (testinium.com). We show in Table 2 the size metrics of three SUTs, as examples, which we have tested using Gauge in the company so far.",
            "cite_spans": [],
            "ref_spans": [
                {
                    "start": 294,
                    "end": 301,
                    "text": "Table 2",
                    "ref_id": "TABREF1"
                }
            ],
            "section": "Developing Gauge Test Suites for Multiple Projects"
        },
        {
            "text": "For the Testinium as the SUT, we are showing two rows, which we will discuss in more detail in the next section. As part of the company's mission to continuously improve test practices, as our test engineers and we have developed more Gauge test suites, we have found better ways of developing test scripts. Thus, for the Testinium as the SUT, the two rows in Table 2 : size metrics \"before\" systematic test design (pilot phase), and metrics after systematic test design (details are next). ",
            "cite_spans": [],
            "ref_spans": [
                {
                    "start": 360,
                    "end": 367,
                    "text": "Table 2",
                    "ref_id": "TABREF1"
                }
            ],
            "section": "Developing Gauge Test Suites for Multiple Projects"
        },
        {
            "text": "We synthesize in this section a summary of the challenges that we have faced when developing large Gauge test suites since 2018, and the best practices that we have come up with to address those challenges to be able to develop high-quality maintainable test scripts [22] , in Sect. 7. As it has been widely discussed in the testing community, a test tool alone is not enough to reach successful test automation. Among other important \"ingredients\" are \"a proven [effective] testing process\" and \"a skilled test team structured to meet the challenges of automation\" 1 . Many online articles and blog posts have also highlighted this fact:",
            "cite_spans": [
                {
                    "start": 267,
                    "end": 271,
                    "text": "[22]",
                    "ref_id": "BIBREF23"
                }
            ],
            "ref_spans": [],
            "section": "Challenges When Developing Large Gauge Test Suites"
        },
        {
            "text": "\u2022 For \"successful [test] automation\", \"only tool is not enough\" 2 .",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Challenges When Developing Large Gauge Test Suites"
        },
        {
            "text": "\u2022 \"\u2026while automation may be the answer, a tool is not enough\" 1 \u2022 \"The selection and usage of an automated testing tool do not guarantee success\" [23] Furthermore, in the context of Gauge, two practitioners have shared the following observations:",
            "cite_spans": [
                {
                    "start": 146,
                    "end": 150,
                    "text": "[23]",
                    "ref_id": "BIBREF24"
                }
            ],
            "ref_spans": [],
            "section": "Challenges When Developing Large Gauge Test Suites"
        },
        {
            "text": "\u2022 \"Gauge follows Markdown Syntax for scripting the tests in an unstructured waywhich means more liberty to make the test like a specific document and also more risk of ending up with scripted tests in many different styles. Having some in-team standards will help to prevent any chaos.\" [8] \u2022 \"If you feel that Cucumber is a pain when used in large projects due to its Given-When-Then syntax becoming messy in long run. Gauge can take out that pain to some extent. Even here, the flexibility of free text can be a demerit as they don't have a defined format. But tests may end up looking like a messy text document unless imposed strict restrictions\". [6] For the case of several initial pilot projects that we were developing Gauge test suites, we observed similar challenges as reported by the two quotes above. An example instance of such an issue is shown in Fig. 4 . Note that since almost test engineers working in the company are Turkish, the Gauge test scripts have been have developed in Turkish. Even if the scripts text would not be readable to the non-Turkish reader, we can see that, due to different styles of testers writing the scripts, there were many issues, e.g., a lot of variability in length of test cases, duplication in scripts.",
            "cite_spans": [
                {
                    "start": 287,
                    "end": 290,
                    "text": "[8]",
                    "ref_id": "BIBREF9"
                },
                {
                    "start": 652,
                    "end": 655,
                    "text": "[6]",
                    "ref_id": "BIBREF7"
                }
            ],
            "ref_spans": [
                {
                    "start": 863,
                    "end": 869,
                    "text": "Fig. 4",
                    "ref_id": null
                }
            ],
            "section": "Challenges When Developing Large Gauge Test Suites"
        },
        {
            "text": "While Gauge is a better tool compared to the competitors, and provides a powerful environment to develop test scripts in varying levels of abstraction, the intentional \"flexibility\" that Gauge provides for developing test steps in natural language can be a disadvantage, as it is easy to end up with a unorganized text document with a lot of issues (such as duplication) which will be hard to inspect and maintain afterwards [22] . Thus, our initial pilot phase showed to be useful in identifying the following two challenges:",
            "cite_spans": [
                {
                    "start": 425,
                    "end": 429,
                    "text": "[22]",
                    "ref_id": "BIBREF23"
                }
            ],
            "ref_spans": [],
            "section": "Challenges When Developing Large Gauge Test Suites"
        },
        {
            "text": "\u2022 Challenge 1-Need for systematic test-case design: Systematic design of test cases is fundamentally important and crucial for success of any type of testing, either manual or automated testing [24] . However, many surveys and studies are reporting a general weakness in many context in terms of systematic design of test cases [24] [25] [26] . If test-cases are not designed systematically, but instead in purely ad-hoc manner, the resulting test suite will generally suffer from low fault detection effectiveness, since there could duplication test logic among test cases, etc. Also, without systematic design of test cases, the team cannot check the progress and also the completion ratio of tests [24] . \u2022 Challenge 2-Need for modular/maintainable test-scripts: Test code is a type of source code and just also any source code, it should be developed with high quality [22] , e.g., it should be modular, readable and maintainable. This challenge is Fig. 4 . Excerpts from Testinium test suites in the pilot phase, in which the test code is of imperfect quality due to ad-hoc test-case design and scripting slightly related to the previous challenge in that if test cases are not designed systematically, test scripts will be developed in ad-hoc and chaotic manner.",
            "cite_spans": [
                {
                    "start": 194,
                    "end": 198,
                    "text": "[24]",
                    "ref_id": "BIBREF25"
                },
                {
                    "start": 328,
                    "end": 332,
                    "text": "[24]",
                    "ref_id": "BIBREF25"
                },
                {
                    "start": 333,
                    "end": 337,
                    "text": "[25]",
                    "ref_id": "BIBREF26"
                },
                {
                    "start": 338,
                    "end": 342,
                    "text": "[26]",
                    "ref_id": "BIBREF27"
                },
                {
                    "start": 701,
                    "end": 705,
                    "text": "[24]",
                    "ref_id": "BIBREF25"
                },
                {
                    "start": 873,
                    "end": 877,
                    "text": "[22]",
                    "ref_id": "BIBREF23"
                }
            ],
            "ref_spans": [
                {
                    "start": 953,
                    "end": 959,
                    "text": "Fig. 4",
                    "ref_id": null
                }
            ],
            "section": "Challenges When Developing Large Gauge Test Suites"
        },
        {
            "text": "In the next section, we present a best practice that we have found to be effective in addressing the above challenges.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Challenges When Developing Large Gauge Test Suites"
        },
        {
            "text": "Since the type of SUTs that we have been working on are all web applications, we identified model-based testing (MBT) [27] as the most suitable approach for systematic test-case design. MBT has been shown to be a suitable approach for testing web apps [28, 29] , i.e. nodes would be the pages of the web app and edges would be the transitions among the pages (nodes).",
            "cite_spans": [
                {
                    "start": 118,
                    "end": 122,
                    "text": "[27]",
                    "ref_id": "BIBREF28"
                },
                {
                    "start": 252,
                    "end": 256,
                    "text": "[28,",
                    "ref_id": "BIBREF29"
                },
                {
                    "start": 257,
                    "end": 260,
                    "text": "29]",
                    "ref_id": "BIBREF31"
                }
            ],
            "ref_spans": [],
            "section": "Best Practice: Systematic Design of Test Cases"
        },
        {
            "text": "Our ultimate goal has been to use automated MBT tools (such as GraphWalker, graphwalker.github.io) also in the process, together with Gauge, but that would be quite counter-intuitive, e.g. since Gauge scripts are supposed to be written by human testers. Thus, as the first phase, we decided to apply a light-weight manual MBT to design our test cases, and have human testers write Gauge test scripts based on them. The rationale was to have an approach which test engineers will easily use without having a heavyweight and sophisticated tooling. Figure 5 shows the actual first version of the test model that we developed and of course, it was on paper, to highlight the light-weighted nature of our approach. The additions of new nodes and edges to the original paper version were made later on, as we noticed that new parts had to be added. This shows the \"incremental\" nature of the work. The light-weight nature of our MBT approach is also called \"Just barely good enough\" 3 modeling in the Agile modeling context.",
            "cite_spans": [],
            "ref_spans": [
                {
                    "start": 546,
                    "end": 554,
                    "text": "Figure 5",
                    "ref_id": null
                }
            ],
            "section": "Best Practice: Systematic Design of Test Cases"
        },
        {
            "text": "In our light-weight model-based test design approach, once a test model is designed, we would derive four types of test cases from it:",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Best Practice: Systematic Design of Test Cases"
        },
        {
            "text": "As shown in Table 2 , after applying the above systematic approach, we derived 139 Gauge test specifications, and 518 test scenarios for the SUT.",
            "cite_spans": [],
            "ref_spans": [
                {
                    "start": 12,
                    "end": 19,
                    "text": "Table 2",
                    "ref_id": "TABREF1"
                }
            ],
            "section": "Best Practice: Systematic Design of Test Cases"
        },
        {
            "text": "Now that we have been developing several Gauge test suites using our best practice above, in retrospective, we are able to observe various benefits, compared to our initial phase, in which test-cases were designed in ad-hoc manner.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Conclusions; Ongoing and Future Works"
        },
        {
            "text": "\u2022 Clarity and road-map for test engineers: First of all, test engineers have clarity on how to develop Gauge test scripts, since the light-weight model-based test design approach provide a clear road-map for test engineers and makes it easier to know the progress and what additional test cases to derive. \u2022 Higher quality test script in term of modularity with no/less duplication: Since the light-weight test design approach breaks the test design problem into smaller parts (\"divide and conquer\"), test engineers are less likely to develop \"spaghetti\"style test scripts with no/less duplication [24] .",
            "cite_spans": [
                {
                    "start": 598,
                    "end": 602,
                    "text": "[24]",
                    "ref_id": "BIBREF25"
                }
            ],
            "ref_spans": [],
            "section": "Conclusions; Ongoing and Future Works"
        },
        {
            "text": "Our ongoing and future works are in the scope of constantly improving our efforts in developing Gauge test suites, by findings more innovative ways and best practices for these tasks.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Conclusions; Ongoing and Future Works"
        }
    ],
    "bib_entries": {
        "BIBREF0": {
            "ref_id": "b0",
            "title": "Transition from the current node (page) to its next neighboring nodes (pages) 2. Node to itself (often, error checking",
            "authors": [],
            "year": null,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF2": {
            "ref_id": "b2",
            "title": "applying the above approach on the Login use-case of the system, results in deriving six test cases from the first type above (transition from the current node to its next neighboring nodes), as listed below: \u2022 Node-2-node-1: Login to Dashboard: Valid login using regular login \u2022 Node-2-node-2: Login to Forgot Password \u2022 Node-2-node-3: Login to Signup \u2022 Node-2-node-4: Login using LinkedIn \u2022 Node-2-node-5: Login using Google \u2022 Node-2-node-6: Login using GitHub References 1",
            "authors": [
                {
                    "first": "V",
                    "middle": [],
                    "last": "Garousi",
                    "suffix": ""
                },
                {
                    "first": "M",
                    "middle": [
                        "V"
                    ],
                    "last": "M\u00e4ntyl\u00e4",
                    "suffix": ""
                }
            ],
            "year": 2016,
            "venue": "Inf. Softw. Technol",
            "volume": "76",
            "issn": "",
            "pages": "92--117",
            "other_ids": {}
        },
        "BIBREF3": {
            "ref_id": "b3",
            "title": "Automated testing of simulation software in the aviation industry: an experience report",
            "authors": [
                {
                    "first": "V",
                    "middle": [],
                    "last": "Garousi",
                    "suffix": ""
                },
                {
                    "first": "S",
                    "middle": [],
                    "last": "Tasli",
                    "suffix": ""
                },
                {
                    "first": "O",
                    "middle": [],
                    "last": "Sertel",
                    "suffix": ""
                },
                {
                    "first": "M",
                    "middle": [],
                    "last": "Tokg\u00f6z",
                    "suffix": ""
                },
                {
                    "first": "K",
                    "middle": [],
                    "last": "Herkilo\u011flu",
                    "suffix": ""
                },
                {
                    "first": "H",
                    "middle": [
                        "F E"
                    ],
                    "last": "Arkin",
                    "suffix": ""
                },
                {
                    "first": "O",
                    "middle": [],
                    "last": "Bilir",
                    "suffix": ""
                }
            ],
            "year": 2019,
            "venue": "IEEE Softw",
            "volume": "36",
            "issn": "4",
            "pages": "63--75",
            "other_ids": {}
        },
        "BIBREF4": {
            "ref_id": "b4",
            "title": "BDD in Action: Behavior-Driven Development for the Whole Software Lifecycle",
            "authors": [
                {
                    "first": "J",
                    "middle": [
                        "F"
                    ],
                    "last": "Smart",
                    "suffix": ""
                }
            ],
            "year": 2014,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF5": {
            "ref_id": "b5",
            "title": "How to sell BDD to the business",
            "authors": [
                {
                    "first": "D",
                    "middle": [],
                    "last": "North",
                    "suffix": ""
                }
            ],
            "year": 2020,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF6": {
            "ref_id": "b6",
            "title": "Why we built Gauge",
            "authors": [
                {
                    "first": "Z",
                    "middle": [],
                    "last": "Maliackal",
                    "suffix": ""
                }
            ],
            "year": 2019,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF7": {
            "ref_id": "b7",
            "title": "Why I chose Gauge over Cucumber",
            "authors": [
                {
                    "first": "T",
                    "middle": [],
                    "last": "Lakshmi",
                    "suffix": ""
                }
            ],
            "year": 2020,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF8": {
            "ref_id": "b8",
            "title": "The tragedy of Given-When-Then",
            "authors": [
                {
                    "first": "C",
                    "middle": [],
                    "last": "Matts",
                    "suffix": ""
                }
            ],
            "year": 2019,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF9": {
            "ref_id": "b9",
            "title": "Cucumber or Gauge? Things to consider when choosing the best Test Automation Framework for your team",
            "authors": [
                {
                    "first": "A",
                    "middle": [],
                    "last": "Akbari",
                    "suffix": ""
                }
            ],
            "year": 2020,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF10": {
            "ref_id": "b10",
            "title": "Successful engagement of practitioners and software engineering researchers: evidence from 26 international industry-academia collaborative projects",
            "authors": [
                {
                    "first": "V",
                    "middle": [],
                    "last": "Garousi",
                    "suffix": ""
                },
                {
                    "first": "D",
                    "middle": [
                        "C"
                    ],
                    "last": "Shepherd",
                    "suffix": ""
                },
                {
                    "first": "K",
                    "middle": [],
                    "last": "Herkilo\u011flu",
                    "suffix": ""
                }
            ],
            "year": 2019,
            "venue": "IEEE Software",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF11": {
            "ref_id": "b11",
            "title": "A model for technology transfer in practice",
            "authors": [
                {
                    "first": "T",
                    "middle": [],
                    "last": "Gorschek",
                    "suffix": ""
                },
                {
                    "first": "P",
                    "middle": [],
                    "last": "Garre",
                    "suffix": ""
                },
                {
                    "first": "S",
                    "middle": [],
                    "last": "Larsson",
                    "suffix": ""
                },
                {
                    "first": "C",
                    "middle": [],
                    "last": "Wohlin",
                    "suffix": ""
                }
            ],
            "year": 2006,
            "venue": "IEEE Softw",
            "volume": "23",
            "issn": "6",
            "pages": "88--95",
            "other_ids": {}
        },
        "BIBREF12": {
            "ref_id": "b12",
            "title": "Obstacles and opportunities in deploying modelbased GUI testing of mobile software: a survey",
            "authors": [
                {
                    "first": "M",
                    "middle": [],
                    "last": "Janicki",
                    "suffix": ""
                },
                {
                    "first": "M",
                    "middle": [],
                    "last": "Katara",
                    "suffix": ""
                },
                {
                    "first": "T",
                    "middle": [],
                    "last": "P\u00e4\u00e4kk\u00f6nen",
                    "suffix": ""
                }
            ],
            "year": 2012,
            "venue": "Softw. Test. Verif. Reliab",
            "volume": "22",
            "issn": "5",
            "pages": "313--341",
            "other_ids": {}
        },
        "BIBREF13": {
            "ref_id": "b13",
            "title": "Choosing the right test automation tool: a grey literature review",
            "authors": [
                {
                    "first": "P",
                    "middle": [],
                    "last": "Raulamo",
                    "suffix": ""
                },
                {
                    "first": "M",
                    "middle": [
                        "V"
                    ],
                    "last": "M\u00e4ntyl\u00e4",
                    "suffix": ""
                },
                {
                    "first": "V",
                    "middle": [],
                    "last": "Garousi",
                    "suffix": ""
                }
            ],
            "year": 2017,
            "venue": "International Conference on Evaluation and Assessment in Software Engineering",
            "volume": "",
            "issn": "",
            "pages": "21--30",
            "other_ids": {}
        },
        "BIBREF14": {
            "ref_id": "b14",
            "title": "Skyfire: model-based testing with cucumber",
            "authors": [
                {
                    "first": "N",
                    "middle": [],
                    "last": "Li",
                    "suffix": ""
                },
                {
                    "first": "A",
                    "middle": [],
                    "last": "Escalona",
                    "suffix": ""
                },
                {
                    "first": "T",
                    "middle": [],
                    "last": "Kamal",
                    "suffix": ""
                }
            ],
            "year": 2016,
            "venue": "IEEE International Conference on Software Testing, Verification and Validation",
            "volume": "",
            "issn": "",
            "pages": "393--400",
            "other_ids": {}
        },
        "BIBREF15": {
            "ref_id": "b15",
            "title": "Agile development cycle: approach to design an effective Model Based Testing with Behaviour driven automation framework",
            "authors": [
                {
                    "first": "S",
                    "middle": [],
                    "last": "Sivanandan",
                    "suffix": ""
                }
            ],
            "year": 2014,
            "venue": "Annual International Conference on Advanced Computing and Communications",
            "volume": "",
            "issn": "",
            "pages": "22--25",
            "other_ids": {}
        },
        "BIBREF16": {
            "ref_id": "b16",
            "title": "Experiences of Test Automation: Case Studies of Software Test Automation",
            "authors": [
                {
                    "first": "D",
                    "middle": [],
                    "last": "Graham",
                    "suffix": ""
                },
                {
                    "first": "M",
                    "middle": [],
                    "last": "Fewster",
                    "suffix": ""
                }
            ],
            "year": 2012,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF17": {
            "ref_id": "b17",
            "title": "Executable natural-language test specifications: a test-automation experience report",
            "authors": [
                {
                    "first": "V",
                    "middle": [],
                    "last": "Garousi",
                    "suffix": ""
                },
                {
                    "first": "A",
                    "middle": [
                        "B"
                    ],
                    "last": "Kele\u015f",
                    "suffix": ""
                },
                {
                    "first": "Z",
                    "middle": [
                        "\u00d6"
                    ],
                    "last": "G\u00fcler",
                    "suffix": ""
                },
                {
                    "first": "Y",
                    "middle": [],
                    "last": "Balaman",
                    "suffix": ""
                }
            ],
            "year": 2019,
            "venue": "Proceedings of the Turkish National Software Engineering Symposium (UYMS)",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF18": {
            "ref_id": "b18",
            "title": "Experience with maintenance of a functional GUI test suite using IBM rational functional tester",
            "authors": [
                {
                    "first": "Y",
                    "middle": [],
                    "last": "Shewchuk",
                    "suffix": ""
                },
                {
                    "first": "V",
                    "middle": [],
                    "last": "Garousi",
                    "suffix": ""
                }
            ],
            "year": 2010,
            "venue": "Proceedings of the International Conference on Software Engineering and Knowledge Engineering",
            "volume": "",
            "issn": "",
            "pages": "489--494",
            "other_ids": {}
        },
        "BIBREF19": {
            "ref_id": "b19",
            "title": "Industry-academia collaborations in software testing: experience and success stories from Canada and Turkey",
            "authors": [
                {
                    "first": "V",
                    "middle": [],
                    "last": "Garousi",
                    "suffix": ""
                },
                {
                    "first": "M",
                    "middle": [
                        "M"
                    ],
                    "last": "Eskandar",
                    "suffix": ""
                },
                {
                    "first": "K",
                    "middle": [],
                    "last": "Herkilo\u011flu",
                    "suffix": ""
                }
            ],
            "year": 2017,
            "venue": "Software Qual. J",
            "volume": "25",
            "issn": "4",
            "pages": "1091--1143",
            "other_ids": {}
        },
        "BIBREF20": {
            "ref_id": "b20",
            "title": "Model-based testing in practice: an experience report from the banking domain",
            "authors": [
                {
                    "first": "\u015e",
                    "middle": [],
                    "last": "\u015eent\u00fcrk",
                    "suffix": ""
                },
                {
                    "first": "A",
                    "middle": [],
                    "last": "Ak\u0131n",
                    "suffix": ""
                },
                {
                    "first": "A",
                    "middle": [
                        "B"
                    ],
                    "last": "Karag\u00f6z",
                    "suffix": ""
                },
                {
                    "first": "V",
                    "middle": [],
                    "last": "Garousi",
                    "suffix": ""
                }
            ],
            "year": 2019,
            "venue": "Proceedings of the Turkish National Software Engineering Symposium (UYMS)",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF21": {
            "ref_id": "b21",
            "title": "Test automation for embedded real-time software: an approach and experience report in the Turkish industry",
            "authors": [
                {
                    "first": "G",
                    "middle": [],
                    "last": "Urul",
                    "suffix": ""
                },
                {
                    "first": "V",
                    "middle": [],
                    "last": "Garousi",
                    "suffix": ""
                },
                {
                    "first": "G",
                    "middle": [],
                    "last": "Urul",
                    "suffix": ""
                }
            ],
            "year": 2014,
            "venue": "Proceedings of the Turkish National Software Engineering Symposium (UYMS)",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF22": {
            "ref_id": "b22",
            "title": "Transitioning from manual to automated software regression testing: experience from the banking domain",
            "authors": [
                {
                    "first": "A",
                    "middle": [],
                    "last": "Akin",
                    "suffix": ""
                },
                {
                    "first": "S",
                    "middle": [],
                    "last": "Sent\u00fcrk",
                    "suffix": ""
                },
                {
                    "first": "V",
                    "middle": [],
                    "last": "Garousi",
                    "suffix": ""
                }
            ],
            "year": 2018,
            "venue": "Asia-Pacific Software Engineering Conference (APSEC)",
            "volume": "",
            "issn": "",
            "pages": "591--597",
            "other_ids": {}
        },
        "BIBREF23": {
            "ref_id": "b23",
            "title": "Developing, verifying and maintaining high-quality automated test scripts",
            "authors": [
                {
                    "first": "V",
                    "middle": [],
                    "last": "Garousi",
                    "suffix": ""
                },
                {
                    "first": "M",
                    "middle": [],
                    "last": "Felderer",
                    "suffix": ""
                }
            ],
            "year": 2016,
            "venue": "IEEE Softw",
            "volume": "33",
            "issn": "3",
            "pages": "68--75",
            "other_ids": {}
        },
        "BIBREF24": {
            "ref_id": "b24",
            "title": "Software Testing and Continuous Quality Improvement",
            "authors": [
                {
                    "first": "W",
                    "middle": [
                        "E"
                    ],
                    "last": "Lewis",
                    "suffix": ""
                }
            ],
            "year": 2017,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF25": {
            "ref_id": "b25",
            "title": "On test design",
            "authors": [
                {
                    "first": "S",
                    "middle": [],
                    "last": "Eldh",
                    "suffix": ""
                }
            ],
            "year": 2011,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF26": {
            "ref_id": "b26",
            "title": "A survey of software engineering practices in Turkey",
            "authors": [
                {
                    "first": "V",
                    "middle": [],
                    "last": "Garousi",
                    "suffix": ""
                },
                {
                    "first": "A",
                    "middle": [],
                    "last": "Co\u015fkun\u00e7ay",
                    "suffix": ""
                },
                {
                    "first": "A",
                    "middle": [
                        "B"
                    ],
                    "last": "Can",
                    "suffix": ""
                },
                {
                    "first": "O",
                    "middle": [],
                    "last": "Demir\u00f6rs",
                    "suffix": ""
                }
            ],
            "year": 2015,
            "venue": "J. Syst. Softw",
            "volume": "108",
            "issn": "",
            "pages": "148--177",
            "other_ids": {}
        },
        "BIBREF27": {
            "ref_id": "b27",
            "title": "A survey of software testing practices in Canada",
            "authors": [
                {
                    "first": "V",
                    "middle": [],
                    "last": "Garousi",
                    "suffix": ""
                },
                {
                    "first": "J",
                    "middle": [],
                    "last": "Zhi",
                    "suffix": ""
                }
            ],
            "year": 2013,
            "venue": "J. Syst. Softw",
            "volume": "86",
            "issn": "5",
            "pages": "1354--1376",
            "other_ids": {}
        },
        "BIBREF28": {
            "ref_id": "b28",
            "title": "Model-Based Testing Essentials-Guide to the ISTQB Certified Model-Based Tester",
            "authors": [
                {
                    "first": "A",
                    "middle": [],
                    "last": "Kramer",
                    "suffix": ""
                },
                {
                    "first": "B",
                    "middle": [],
                    "last": "Legeard",
                    "suffix": ""
                }
            ],
            "year": 2016,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF29": {
            "ref_id": "b29",
            "title": "Model-based testing of thin-client web applications",
            "authors": [
                {
                    "first": "P",
                    "middle": [],
                    "last": "Koopman",
                    "suffix": ""
                },
                {
                    "first": "R",
                    "middle": [],
                    "last": "Plasmeijer",
                    "suffix": ""
                },
                {
                    "first": "P",
                    "middle": [],
                    "last": "Achten",
                    "suffix": ""
                }
            ],
            "year": null,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF31": {
            "ref_id": "b31",
            "title": "Model-based testing of web applications",
            "authors": [
                {
                    "first": "J",
                    "middle": [
                        "R"
                    ],
                    "last": "Monsma",
                    "suffix": ""
                }
            ],
            "year": 2015,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        }
    },
    "ref_entries": {
        "FIGREF0": {
            "text": "Two screenshots from the Testinium (testinium.com) test-management system",
            "latex": null,
            "type": "figure"
        },
        "FIGREF1": {
            "text": "Use-case diagram for the Testinium",
            "latex": null,
            "type": "figure"
        },
        "TABREF0": {
            "text": "in which the above test constructs have been used.Fig. 3. Architecture of test automation in our approach and building blocks of Gauge test-scriptsTable 1. An example Gauge test-script for the Testinium as the SUT",
            "latex": null,
            "type": "table"
        },
        "TABREF1": {
            "text": "Size metrics for several SUTs, tested using Gauge in the company",
            "latex": null,
            "type": "table"
        }
    },
    "back_matter": [
        {
            "text": "Acknowledgements. This work was supported by the European ITEA3 program via the \"TESTOMAT (The Next Level of Test Automation)\" project with grant number 16032, and by the Scientific and Technological Research Council of Turkey (T\u00dcB\u0130TAK) with grant number 9180076. ",
            "cite_spans": [],
            "ref_spans": [],
            "section": "acknowledgement"
        }
    ]
}