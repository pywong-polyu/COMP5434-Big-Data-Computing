{
    "paper_id": "d97220ecf14253e02f83a6084507c989094d4714",
    "metadata": {
        "title": "The Parking Problem: A Game-Theoretic Solution",
        "authors": [
            {
                "first": "Giuseppe",
                "middle": [],
                "last": "Calise",
                "suffix": "",
                "affiliation": {
                    "laboratory": "",
                    "institution": "Federico II",
                    "location": {
                        "country": "Italy"
                    }
                },
                "email": "calisegiuseppe@outlook.com"
            },
            {
                "first": "Aniello",
                "middle": [],
                "last": "Murano",
                "suffix": "",
                "affiliation": {
                    "laboratory": "",
                    "institution": "Federico II",
                    "location": {
                        "country": "Italy"
                    }
                },
                "email": ""
            },
            {
                "first": "Silvia",
                "middle": [],
                "last": "Stranieri",
                "suffix": "",
                "affiliation": {
                    "laboratory": "",
                    "institution": "Federico II",
                    "location": {
                        "country": "Italy"
                    }
                },
                "email": "silvia.stranieri@unina.it"
            }
        ]
    },
    "abstract": [
        {
            "text": "In this paper, we propose a game-theoretic solution to the parking problem, by exploiting a strategic-reasoning approach for multi-agent systems. Precisely, cars are modeled by agents interacting among them in a multi-player game setting, whose aim is to get a free slot parking-place satisfying their own constraints. The overall assignment is then given as a Nash equilibrium solution. We come up with an algorithm (and its implementation in a tool) that works in quadratic time. We give evidence of the benefits of our approach by running our tool on a large hospital parking space.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Abstract"
        }
    ],
    "body_text": [
        {
            "text": "With the fast development of economy and city modernization, traffic congestion and parking have become serious social problems. Studies conducted in big cities report that daily, on average, drivers take more than eight minutes to park, causing the 30% of traffic [2, 19] . Such statistics raise several side effects, among which a high fuel consumption, high CO 2 emissions, but also a stressful lifestyle for drivers. The growth of Artificial Intelligence applications to automotive is constantly increasing the request for smart solutions to parking. This research field is well identified as smart parking (see [10] ). The competitive nature of the parking process, during which the drivers compete in order to get an available parking slot for their cars, is the inspiration of this work. Indeed, by exploiting basic settings of the strategic reasoning for multi-agent systems, we model the parking process as a competitive multi-player game in which each car is an agent interacting with all the other ones, with the ultimate goal of getting an available slot that satisfies its own constraints. The parking problem we face concerns parking as many cars as possible, while satisfying their requirements.",
            "cite_spans": [
                {
                    "start": 265,
                    "end": 268,
                    "text": "[2,",
                    "ref_id": "BIBREF1"
                },
                {
                    "start": 269,
                    "end": 272,
                    "text": "19]",
                    "ref_id": "BIBREF18"
                },
                {
                    "start": 616,
                    "end": 620,
                    "text": "[10]",
                    "ref_id": "BIBREF9"
                }
            ],
            "ref_spans": [],
            "section": "Introduction"
        },
        {
            "text": "A multi-agent system is made of autonomous entities, with distributed information, computational capabilities, and possibly diverging interests. These kind of systems have been exploited in several fields: electronic [20] and industrial process control [3] , economy [14] , home automation [23] , open system verification [1] , to name a few. The way autonomous agents can interact with each other can be classified into two categories: competitive and cooperative. In the former case, there is no a-priori agreement among agents, as they try to maximize their own objective, no matter what the objectives of the other agents are. In the latter case, the agents coordinate among them in order to get the best outcome possible for everyone [22] .",
            "cite_spans": [
                {
                    "start": 217,
                    "end": 221,
                    "text": "[20]",
                    "ref_id": "BIBREF19"
                },
                {
                    "start": 253,
                    "end": 256,
                    "text": "[3]",
                    "ref_id": "BIBREF2"
                },
                {
                    "start": 267,
                    "end": 271,
                    "text": "[14]",
                    "ref_id": "BIBREF13"
                },
                {
                    "start": 290,
                    "end": 294,
                    "text": "[23]",
                    "ref_id": "BIBREF22"
                },
                {
                    "start": 322,
                    "end": 325,
                    "text": "[1]",
                    "ref_id": "BIBREF0"
                },
                {
                    "start": 739,
                    "end": 743,
                    "text": "[22]",
                    "ref_id": "BIBREF21"
                }
            ],
            "ref_spans": [],
            "section": "Introduction"
        },
        {
            "text": "Our contribution. We address the parking problem by means of a multi-agent strategic-reasoning approach. Specifically, we model the parking problem as a multiagent game where cars are competitive agents, moving concurrently and under perfect information. We assume that each agent comes with a desired time-limit to accomplish the car parking. Also, for each slot, we have a time needed to be reached from each entrance. Then, for an agent, the choices for a slot are strategies whose payoff reflects the maximum time he consumes to park his own car (or the fact that he cannot park at all). Solving the parking problem corresponds to finding a solution in such a multiagent game that minimizes all agents' payoffs. We find such a solution by means of Nash equilibrium and prove its effectiveness on real scenarios. We recall that in a game a Nash equilibrium is reached when each player does not have any incentive to unilaterally change his strategy.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Introduction"
        },
        {
            "text": "The contribution of this work is twofold. From one side, we come up with an effective multi-agent game model for the parking problem we consider. From the other side, we provide an algorithm (and its implementation in a tool), working in quadratic time, that allows a fair allocation of the parking slots by satisfying a Nash equilibrium. As we prove later on practical scenarios, this is a valuable compromise with respect to an optimal, but exponential, brute-force solution that would check all possible distributions of cars over available slots. Also, as expected, our solution is better than any greedy FIFO approach. Indeed, consider a scenario in which there are three vehicles, V 1 , V 2 , and V 3 , looking for a parking, and three slots available A, B, and C. Assume now that V 1 , V 2 , and V 3 have up to 7, 5, and 3 minutes to accomplish the parking, respectively. Also, assume that slots A, B, and C require 2, 3, and 5 minutes to be reached, respectively. Assume now that V 1 picks A and V 2 picks B; then, V 3 would not have enough time to reach the remaining slot C. Contrarily, a solution that allows parking all vehicles by accommodating their requirements is to assign V 1 , V 2 , and V 3 to C, B, and A, respectively. This is exactly what our algorithm would return as a solution.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Introduction"
        },
        {
            "text": "Note that the multi-agent game model we set up can also admit more than one Nash equilibrium. In game theory, in general, this is problematic as the players do not know which one to choose. In our setting, however, this is not a problem as it is the system that chooses just one equilibrium and all cars will be instructed to behave accordingly.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Introduction"
        },
        {
            "text": "Smart parking solutions literature is very reach and diversified. In [10] , the authors provide a large survey on smart parking modeling, solutions, and technologies as well as identify challenges and open issues. Algorithmic solutions have been also proposed in the VANET research field, see for example [18, 16, 17, 6, 5, 4] . Less common is the use of game-theoretic approaches to address the parking problem. An exception is [9] , which is probably the closest to us, indeed the authors also propose a parking solution based on the Nash equilibrium. However, differently from us, they provide a numerical solution (rather than an algorithm or a tool), and, more importantly, they consider a scenario with both private and public parking slots, and the drivers' payoffs strongly rely on such a topology. Smart parking mechanisms based on a multi-agent game setting have been also proposed in the literature. In [12] , drivers' behavior is simulated by modeling the environment on the basis of cellular automata. In [7] the model is based on the interaction between the user (driver) and the administrator, but focusing more on the architecture rather than the model setting and the strategic reasoning. Similarly, [8] provides an E-parking system, based on multi-agent systems aimed to optimize several users' preferences. In [13] , the authors manage the parking problem with a cooperative multi-agent system, by relying on a priority mechanism. In [15] , the authors also focus on an equilibrium notion, but they study the Rosenthal equilibrium rather than the Nash one, which describes a probabilistic choice model. Finally, [11] also considers the concept of Nash equilibrium applied to cars, but it is used to talk about traffic rather than parking.",
            "cite_spans": [
                {
                    "start": 69,
                    "end": 73,
                    "text": "[10]",
                    "ref_id": "BIBREF9"
                },
                {
                    "start": 305,
                    "end": 309,
                    "text": "[18,",
                    "ref_id": "BIBREF17"
                },
                {
                    "start": 310,
                    "end": 313,
                    "text": "16,",
                    "ref_id": "BIBREF15"
                },
                {
                    "start": 314,
                    "end": 317,
                    "text": "17,",
                    "ref_id": "BIBREF16"
                },
                {
                    "start": 318,
                    "end": 320,
                    "text": "6,",
                    "ref_id": "BIBREF5"
                },
                {
                    "start": 321,
                    "end": 323,
                    "text": "5,",
                    "ref_id": "BIBREF4"
                },
                {
                    "start": 324,
                    "end": 326,
                    "text": "4]",
                    "ref_id": "BIBREF3"
                },
                {
                    "start": 429,
                    "end": 432,
                    "text": "[9]",
                    "ref_id": "BIBREF8"
                },
                {
                    "start": 914,
                    "end": 918,
                    "text": "[12]",
                    "ref_id": "BIBREF11"
                },
                {
                    "start": 1018,
                    "end": 1021,
                    "text": "[7]",
                    "ref_id": "BIBREF6"
                },
                {
                    "start": 1217,
                    "end": 1220,
                    "text": "[8]",
                    "ref_id": "BIBREF7"
                },
                {
                    "start": 1329,
                    "end": 1333,
                    "text": "[13]",
                    "ref_id": "BIBREF12"
                },
                {
                    "start": 1453,
                    "end": 1457,
                    "text": "[15]",
                    "ref_id": "BIBREF14"
                },
                {
                    "start": 1631,
                    "end": 1635,
                    "text": "[11]",
                    "ref_id": "BIBREF10"
                }
            ],
            "ref_spans": [],
            "section": "Related Works"
        },
        {
            "text": "In this work, we not only design the parking process as a game among agents playing competitively, but also study the use of the Nash equilibrium as a solution. To the best of our knowledge, this is the first work addressing the parking problem via multiplayer game, whose solution is given algorithmically by solving a Nash equilibrium.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Related Works"
        },
        {
            "text": "As case study, we have focused on the parking area of the Federico II Hospital Company in Naples, one of the biggest and most specialized hospital in the South of Italy, whose construction goes back to the early Sixties. The Hospital, as it is depicted in Figure 1 , is made of 21 building blocks, distributed over 440000m 2 , and provides in total one thousand of beds for ordinary recovery and two hundreds of beds for day-hospital use. The parking space, having 2684 slots in total, consists of 21 independent areas, and is mainly used by patients and, in turn, by the 3400 employees (doctors, nurses, technicians, administrators, etc.). The hospital has four guarded gates, one of which is for pedestrian. The car gates are preceded by a road where cars line up for the necessary checks. On average, it is estimated that there are 4600 car accesses per day. There is no policy about the allocation of the parking places and, except for few reserved ones, each driver chooses by its own the slot. This disorganized solution produces a huge traffic congestion, bottlenecks at the entrance, and an unbalanced distribution of the cars over the parking area. More importantly, it does not take into account the specific constraints and some physical limitations of the users, such as walking issues or urgency. In the most crowded hours, on average, the drivers spend more than 20 minutes to find a parking slot or, even worst, they leave the parking area by missing available slots.",
            "cite_spans": [],
            "ref_spans": [
                {
                    "start": 256,
                    "end": 264,
                    "text": "Figure 1",
                    "ref_id": "FIGREF0"
                }
            ],
            "section": "A Real Scenario"
        },
        {
            "text": "In order to efficiently apply our tool, we assume that the list of available slots in every area of the hospital is known at runtime. Also, we make use of all information the car passengers have to communicate to the hospital before entering, and in particular their logistics. Finally, we assume that the drivers will be followed while driving inside the parking area, by means of tracking devices (GPS, smartphone, videocameras, etc.).",
            "cite_spans": [],
            "ref_spans": [],
            "section": "A Real Scenario"
        },
        {
            "text": "Having all this information at its disposal, the tool works as follows: it takes all cars in queue on the roads in front the car gates, as well as all the specific needs and constraints of their occupants. Then, it processes the data and following the algorithm described in the sequel, it opportunely associates the available slots to the cars. In particular, the tool will access both the Employers Data Center and the Online Booking Center of the hospital and, thanks to the latter, the tool will know which kind of services the patients need, date and time of their appointments, possible walking limitations and handicaps, etc. Note that the tool operates in stages, processing one bunch of cars at the time, as they are in queue. Someone may criticize this solution and propose an offline allocation instead. We decide not to follow this solution for two main reasons: first, the hospital is highly dynamic in slot requests and, more importantly, slots are very limited in numbers, so it is better to allocate slots only when cars show up.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "A Real Scenario"
        },
        {
            "text": "In this section we introduce the Parking Game Structure model, (PGS, for short), that is the game model we will use along our algorithm to solve the parking problem we address. The model definition takes inspiration from the scenario described in Section 3. Thus, in a PGS, the players are cars with their needs and constraints. Also, the PGS takes into account all the specification about the slots, in particular their location, their availability, the time they require to be reached from each entrance, and so on.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Parking Game Structure"
        },
        {
            "text": "Formally the Parking Game Structure is defined as follows:",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Parking Game Structure"
        },
        {
            "text": "[Parking Game Structure] The Parking Game Structure(PGS) is a tuple:",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Parking Game Structure"
        },
        {
            "text": "where:",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Parking Game Structure"
        },
        {
            "text": "-Agt = {a 1 ,..., a n } is a set of agents, i.e., the cars,",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Parking Game Structure"
        },
        {
            "text": ".., g l } is a set of gates, g : Agt \u2192 G is a function associating agents to gates, -AT = {t 1 ,..., t n } is a set of agent-time values, where t i is the time limit the car a i has for parking, -RT = {r (1,1) ,..., r (m,l) } is a set of reaching-time values, where r (i,j) is the time needed to reach the parking slot s i from gate g j .",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Parking Game Structure"
        },
        {
            "text": "Regarding the set of resilience indexes F , note that each f i is associated with agent a i and it has a twofold use: first, it imposes an order among agents; second, it affects the final pre-emption order. This will be more clear below. For simplicity, we assume that all the resilience indexes are different, i.e., f i = f j for every 1 \u2264 i < j \u2264 n. The indexes in F can be set manually as input, however we report that, for the case study we have introduced in Section 3, the values have been obtained automatically by processing the information coming from the Employers Data Center and the Online Booking Center of the hospital; in particular, for the patients, the resilience index represents their movement ability, therefore, the lower the rate, the more favored the patient.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Parking Game Structure"
        },
        {
            "text": "A strategy for an agent a i consists of choosing a slot s j \u2208 S. Formally it is a function Str : Agt \u2192 S. A strategy profile is an n-uple s = (s 1 ,..., s n ) of strategies, one for each player. Formally, in s, for each i, we have Str(a i ) = s i . It is worth noting that it may happen that two or more players choose the same strategy. Next we define the costs associated to s as a tuple of costs c = (c 1 ,..., c n ). Then, a payoff \u03c0 of a strategy s is defined as a sum of all such c i , i.e., \u03c0(s) = i c i , and by \u03c0 i we denote the i\u2212th cost value of that tuple.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Parking Game Structure"
        },
        {
            "text": "Definition 2. Let a i \u2208 Agt be an agent with g(a i ) = h and s = (s 1 ,..., s n ) be a strategy profile, with s i = s j for an s j \u2208 S. We define the costs associated to s as the",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Parking Game Structure"
        },
        {
            "text": "In words, the value c i is a finite value if the agent a i has enough time to reach the parking slot s j and such a slot has not been taken from any other agent a k with a lower resilience (i. e., f k < f i ). Then, the value, when it is finite, reflects how much time it is left to the agent after he has reached the assigned slot (with respect the total time he has at his disposal). Conversely, the infinity value corresponds to the worst possible outcome for the agent a i , which reflects the fact that he cannot park at the slot s j . At this point, it should be intuitive that the problem of looking for an optimal strategy profile s can be reduced to the problem of minimize 1 the corresponding vector of associated costs c.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Parking Game Structure"
        },
        {
            "text": "Unfortunately, this is in general not an easy task. In particular, a brute-force algorithm checking all the possible strategy profiles is unfeasible as it requires exponentialtime. Conversely, we suggest adopting a Nash equilibrium solution that provides, by definition, a satisfactory solution and, along with our setting, it just requires quadratictime. In the sequel we are going to present such a solution. Also, we present a solution based on a greedy behavior of the players, which reflects the current behaviour of drivers at the parking of the hospital described in Section 3: each car takes the first available parking slot which satisfies its needs. By means of a toy example, we show that the solution based on the Nash equilibrium over-perform the one based on the greedy behaviour of the players.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Parking Game Structure"
        },
        {
            "text": "In this section, we first provide a toy example, then we introduce the Parking Slot Selection Game (PSSG, for short) and propose a solution by means of a Nash equilibrium calculation. We also comment on the greedy approach and compare it with our solution. For a matter of presentation, we will recall the notion of Nash equilibrium.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "The Parking Slot Selection Game"
        },
        {
            "text": "Before proceeding, it is worth noting that at each instance of the game we consider, each car can enter the parking space through just one entrance. This means that we can get rid of g and G when dealing with a PGS, as well as the second index of the reachingtime values in RT . This also allows us using a simplified version of the definition of costs associated with strategy profiles. In other words, while the set RT provides m * l possible reaching values in general as stated in Definition 1 (with m the number of slots and l the number of gates), each instance of the game just requires dealing with RT as a vector of m values, i.e., RT = {r 1 ,..., r m }, where each r i represents the time needed to reach the parking slot s i from the physical gate through which the car is entering. When providing our solution to PSSG in Algorithm 1, we strongly rely on this observation, which leads to a natural reformulation of the model right after the vehicles are associated to the gates. Notably, we prefer to keep our PSG model as general as possible in order to accommodate other questions that require dealing with not a priori fixed entrances associated to cars. For example, it may be useful when devising an algorithm that also suggests in advance to a driver the gate to take. This, however, is not the target of this paper.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "The Parking Slot Selection Game"
        },
        {
            "text": "Let us consider a parking place with 3 slots available and 3 cars aiming at parking. Let us suppose that the first, the second, and the third car have respectively 5, 2, and 4 minutes available to park and that, as associated resilience they have 0.5, 0.1, and 0.009, respectively. Also, suppose that the first, the second, and the third slot require 2, 3, and 4 minutes to be reached, respectively. We call such a game the 3-players-3-slots game and it is reported in Figure 2 .",
            "cite_spans": [],
            "ref_spans": [
                {
                    "start": 469,
                    "end": 477,
                    "text": "Figure 2",
                    "ref_id": "FIGREF2"
                }
            ],
            "section": "A Toy Example"
        },
        {
            "text": "When a car is approaching to the parking, a greedy solution is to occupy the first slot it can get. This approach leaves to the car a free will to park in the slot that best fits its constraints, without paying attention to the other cars requirements. This easy-to-design solution may lead to a non-optimal vehicles allocation, as it may leave out some cars (not able to park), as the remaining slots may not satisfy their requirements.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "A Greedy Solution"
        },
        {
            "text": "To give an example, let us consider the scenario described in Section 5.1. In this situation, the first car would choose the closest slot (the one that requires 2 minutes to be reached). Then, the second car would not be able to park, because all the remaining free slots are too expensive in terms of time.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "A Greedy Solution"
        },
        {
            "text": "For this reason, we have looked for a better solution that would exploit the car parking potentialities at the best by means of a smart distribution of slots among cars, and that would be computationally easy to be calculated on the fly.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "A Greedy Solution"
        },
        {
            "text": "In game theory, a well-conceived solution concept that ensures a robust form of satisfaction among players is Nash equilibrium. This concept was deeply investigated and well formalized by John Nash in the fifties, both under pure and mixed strategies (see [21] for more details). In the basic definition, we say that in a multi-player game, all players, moving concurrently, reach a Nash equilibrium if none of them has the incentive to unilaterally deviate from that equilibrium. By casting this in our parking scenario, we try to reach a situation in which all drivers are associated to parking slots, by means of an equilibrium over their constraints. In other words, our goal is to provide a strategic profile (parking slot assignment) in which no player wants to change his slot unless some other players want to change theirs.",
            "cite_spans": [
                {
                    "start": 256,
                    "end": 260,
                    "text": "[21]",
                    "ref_id": "BIBREF20"
                }
            ],
            "ref_spans": [],
            "section": "Nash Equilibrium Based Solution"
        },
        {
            "text": "Following the model definition given in Definition 1 and the observations made above, we formally introduce the Parking Slot Selection Game we address, as follows.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Nash Equilibrium Based Solution"
        },
        {
            "text": "-Input: a PGS G, as given in Definition 1.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Definition 3 (Parking Slot Selection Game). The Parking Slot Selection Game (PSSG) has an input and an output defined as follows:"
        },
        {
            "text": "-Output: a strategic profile (s * 1 ,..., s * n ) providing a Nash equilibrium for G. A strategy profile (s * 1 ,..., s * n ) is a Nash equilibrium if and only if \u2200 s 1 ,..., s n \u2208 S it holds that \u03c0 1 (s * 1 ,..., s * n ) \u2264 \u03c0 1 (s 1 , s * 2 ..., s * n ), \u03c0 2 (s * 1 ,..., s * n ) \u2264 \u03c0 1 (s * 1 , s 2 ..., s * n ), . . . , \u03c0 n (s * 1 ,..., s * n ) \u2264 \u03c0 1 (s * 1 , s * 2 ..., s n ).",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Definition 3 (Parking Slot Selection Game). The Parking Slot Selection Game (PSSG) has an input and an output defined as follows:"
        },
        {
            "text": "In words, the PSSG consists in looking for a strategy profile that, with respect to the associated costs, no player has an incentive to unilaterally change his choice.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Definition 3 (Parking Slot Selection Game). The Parking Slot Selection Game (PSSG) has an input and an output defined as follows:"
        },
        {
            "text": "Similarly to the PSGG, one can define the Greedy Parking Game (GPG, for short). To give some details, first assume that in an GPG players are ordered, then the strategy profile (s * 1 ,..., s * n ) is such that for each agent a i , it holds that s * i is the best choice (in terms of minutes to reach it) over S \\ {s * 1 ,..., s * i\u22121 }.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Definition 3 (Parking Slot Selection Game). The Parking Slot Selection Game (PSSG) has an input and an output defined as follows:"
        },
        {
            "text": "Let us consider again the 3-players-3-slots game described in Section 5.1. We now show a solution based on the satisfaction of a Nash equilibrium. As we will see in a while, such a solution allows accommodating all cars, while satisfying all their constraints, contrarily to what we have seen with the greedy solution. Later, we will show that this is true in general and not just for the case of our specific example. Let us formally describe the 3-players-3-slots example by means of a PGS G 3 whose components are defined as follows: Table 1 , in the last three rows. For instance, the triple (\u221e, \u221e, 0.018) represents the case in which all cars decide to park in the same slot slot 1 ; so, car 3 , which has the lowest resilience value, gets it at a cost of 0.018 (i.e., (4 \u2212 2) \u00b7 0.009), while the other cars leave the process incomplete, as they get \u221e. By a matter of calculation, one can check that there exists only one Nash equilibrium, which corresponds to s = (slot 2 , slot 1 , slot 3 ), with c = (1, 0, 0) (in bold in Table 1 ), and \u03c0(s) = 1.",
            "cite_spans": [],
            "ref_spans": [
                {
                    "start": 537,
                    "end": 544,
                    "text": "Table 1",
                    "ref_id": "TABREF0"
                },
                {
                    "start": 1030,
                    "end": 1037,
                    "text": "Table 1",
                    "ref_id": "TABREF0"
                }
            ],
            "section": "A Solution to the 3-players-3-slots Game"
        },
        {
            "text": "In this section, we introduce the algorithm for the solution to the problem described in Definition 1. We first provide the pseudo-code in Algorithm 1, then we describe how it works and report on its time complexity.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "A Solution to the Parking Slot Selection Game"
        },
        {
            "text": "Input: Queue of ready vehicles Output: Slot allocation 1: while carQueue = null do 2: actualCar = priorityCar(carQueue).",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Algorithm 1 Algorithm for the solution of the PSSG."
        },
        {
            "text": "outcome = \u221e.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "3:"
        },
        {
            "text": "for slot \u2208 setAvailableSlots do 5: po = c(actualCar, slot).",
            "cite_spans": [],
            "ref_spans": [],
            "section": "4:"
        },
        {
            "text": "if po \u2265 0 & po < outcome then 7: outcome = po. 8:",
            "cite_spans": [],
            "ref_spans": [],
            "section": "6:"
        },
        {
            "text": "assignSlot(actualCar, slot) 9:",
            "cite_spans": [],
            "ref_spans": [],
            "section": "6:"
        },
        {
            "text": "setN otAvailable(slot). 10:",
            "cite_spans": [],
            "ref_spans": [],
            "section": "6:"
        },
        {
            "text": "end if 11:",
            "cite_spans": [],
            "ref_spans": [],
            "section": "6:"
        },
        {
            "text": "end for 12: end while With the first iteration, the car with the lowest resilience index, actualCar, is selected from the queue, through the function priorityCar(\u00b7), which takes as input the set of cars and returns the one with the lowest resilience index respect to the others. The variable cost outcome is associated an infinity value, the worst possible one. In the second iteration, the algorithm computes the costs resulting from the function c(\u00b7), which takes as input a car and a slot. The value of the outcome is updated with the value of the best cost computed. Among the available slots, the one with the best result is assigned to the actualCar. Once assigned, the slot is remove from the set of the available ones, with the function setNotAvailable(\u00b7).",
            "cite_spans": [],
            "ref_spans": [],
            "section": "6:"
        },
        {
            "text": "Theorem 1 (Correctness of Algorithm 1). Algorithm 1 computes the Nash equilibrium for the game.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "6:"
        },
        {
            "text": "Proof (Proof (Sketch)). Proving that the algorithm provides a Nash equilibrium is quite trivial. Assume by contradiction that s = (s 1 , .., s n ) is the solution provided from our algorithm and it is not a Nash equilibrium. Then, by definition of Nash equilibrium, there must exist an agent, let us say agent a i , whose strategy s j is not the best, while fixed the strategies for the other players. Hence, there exists another strategy s j for the agent a i , such that the payoff of s j is better than the one for s j (given the same strategies for the other players). But if such a strategy s j exists, then it would be found at row 6 of our algorithm, and it would be chosen as the final strategy for agent a i . But this clearly contradicts the hypothesis that s = (s 1 , .., s n ) is the solution provided.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "6:"
        },
        {
            "text": "Theorem 2 (Complexity of Algorithm 1). The complexity of Algorithm 1 is quadratic with respect to the number of agents involved in the game, in the worst case.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "6:"
        },
        {
            "text": "Proof. Consider the worst possible scenario, i.e., no vehicle obtains a parking slot. Then, let us compute C(P SSG) as the complexity of the Parking Slot Selection Game. The proof proceeds by analyzing the complexity of the most expensive operations, from the inner ones to the outer ones. We use the notation C(r) to indicate the complexity of the code from the r-th row of the Algorithm 1.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "6:"
        },
        {
            "text": "The function assignSlot(Car, slot) performs simple assignments, with a constant complexity C(7) = O(1).",
            "cite_spans": [],
            "ref_spans": [],
            "section": "6:"
        },
        {
            "text": "The inner loop does not perform any slot assignment, in the considered worst case, since none of them satisfies the constraints of the cars to be allocated. Hence, the inner loop is repeated |S| times, where S is the set of slots, according to Definition 1. Assuming that |S| = m, we can deduce that",
            "cite_spans": [],
            "ref_spans": [],
            "section": "6:"
        },
        {
            "text": "The outer loop is performed as many times as the number of cars, i.e, the agents. As |Agt| = n (Definition 1), we have",
            "cite_spans": [],
            "ref_spans": [],
            "section": "6:"
        },
        {
            "text": "Assuming that, in the worst case, n and m are of the same order, we can conclude that the total complexity is C(P SSG) = O(n 2 ).",
            "cite_spans": [],
            "ref_spans": [],
            "section": "6:"
        },
        {
            "text": "In this section, we compare the performances between executing the greedy solution to solve GPGs and Algorithm 1 to solve PSGGs. We have run 10 times the two approaches on a growing number of cars and slots. All values and time-limit needed have been generated randomly. Results have been collected in Table 2 . Each column represents a different execution of the two approaches with the corresponding input parameters, while the rows keep track of the two analyzed solutions. Each entry contains the number of cars that have been able to park successfully, over the total number of cars involved. As one can observe, the Nash equilibrium based solution is never worse than the greedy one. Moreover, by extending the experiment over 100 and 200 executions, our approach is strictly better than the greedy one in the 89% and 93% of the cases respectively, and it allocates the same number of vehicles in the remaining ones.",
            "cite_spans": [],
            "ref_spans": [
                {
                    "start": 302,
                    "end": 309,
                    "text": "Table 2",
                    "ref_id": "TABREF2"
                }
            ],
            "section": "Evaluation"
        },
        {
            "text": "Since, by construction, a greater number of executions determines a greater number of cars, these experiments also prove the scalability of our algorithm, which seems to behave well with high numbers. Such a scalability property will be explained in more details in the next section. We conclude this section by reporting some benchmarks regarding Algorithm 1. Precisely, we have analyzed the behavior of the algorithm in the management of a growing number of cars waiting for a parking slot, with respect to a fixed number of parking slots. We have considered two scenarios and reported the corresponding benchmarks in Table 3 . The first one considers 4600 slots. Such a number is not picked at random, but it refers to the number of slots available inside the structure of our case study, including some private parking slots close by. The second one considers 20000 slots. Also in this case, the number is not picked at random, but it refers to the number of available slots in the biggest parking space of the world (West Edmonton Mall in Canada). Table 3 : Results on 4000 and 20000 slots.",
            "cite_spans": [],
            "ref_spans": [
                {
                    "start": 620,
                    "end": 627,
                    "text": "Table 3",
                    "ref_id": null
                },
                {
                    "start": 1053,
                    "end": 1060,
                    "text": "Table 3",
                    "ref_id": null
                }
            ],
            "section": "Evaluation"
        },
        {
            "text": "All tests have been executed on an Intel\u00aeCore\u2122i5-7300HQ CPU processor of 2.50 GHz, with 8 Gb RAM capacity.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Evaluation"
        },
        {
            "text": "To show the scalability of our algorithm, we have considered a very large set of cars. The benchmarks show that our tool can be also used in other fields, with much higher numbers. For example, it can be used to accommodate people in a stadium, or, distribute people over hospitals, for example, for a massive vaccinations, as it is required nowadays for the Covid pandemic situation.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Evaluation"
        },
        {
            "text": "The parking problem is one of the most challenging questions in the automotive research field. Inspired by the intrinsic interaction among cars that compete among them in order to get a parking slot complaining with their constraints, in this paper we have explored a game-based approach. Precisely, following a real case study, we have formally introduced (i) a multi-player game structure model, (ii) the problem, and (iii) a solution algorithm working in quadratic time. The game model makes use of costs, reflecting the time ability of a car to park in a specific slot (modulo a resilience rate intrinsically associated to each car). The core of the algorithm is then based on a Nash equilibrium solution, which allows focusing not just on the best choice for a single car, but rather on one that guarantees a fair slot assignment among all cars. The proposed solution requires quadratic time.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Conclusions and Future Works"
        },
        {
            "text": "We have positively tested our tool on a model of the parking space of the Federico II Hospital in Naples, one of the biggest hospitals in the South of Italy. The construction of the hospital and the annexed parking space goes back to early Sixties. Since there, no parking policy have been ever adopted: excepts for few reserved slots, a car entering the area can park in any slot. This reflects in a serious traffic congestion and an inefficient use of the slots everyday. Conversely, our approach provides, for the first time, a valid and promising solution.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Conclusions and Future Works"
        },
        {
            "text": "In order to put it in practice, we are currently working on a mobile client application to support the drivers along the parking task, from the assignment of the slot while approaching the gate, up to the moment they leave the car.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Conclusions and Future Works"
        },
        {
            "text": "Our solution is the fruit of a deep analysis of the most parking-congestion-affected sites in our city, together with our strategic reasoning background. Despite being amend-able, the provided solution sets the stage for future essential improvements not only of health care services offered by the hospital under exam, but also of facilities from different contexts with similar problems. Simulation results show that our solution improves notably the slot assigning with respect to the greedy parking behavior in which each car is free to select a slot according only to its own preferences. The simulation also shows that our tool is scalable and can handle very huge numbers of slots and cars.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Conclusions and Future Works"
        }
    ],
    "bib_entries": {
        "BIBREF0": {
            "ref_id": "b0",
            "title": "Alternating-time temporal logic",
            "authors": [
                {
                    "first": "Rajeev",
                    "middle": [],
                    "last": "Alur",
                    "suffix": ""
                },
                {
                    "first": "A",
                    "middle": [],
                    "last": "Thomas",
                    "suffix": ""
                },
                {
                    "first": "Orna",
                    "middle": [],
                    "last": "Henzinger",
                    "suffix": ""
                },
                {
                    "first": "",
                    "middle": [],
                    "last": "Kupferman",
                    "suffix": ""
                }
            ],
            "year": 2002,
            "venue": "JACM",
            "volume": "49",
            "issn": "5",
            "pages": "672--713",
            "other_ids": {}
        },
        "BIBREF1": {
            "ref_id": "b1",
            "title": "Parking slot assignment games",
            "authors": [
                {
                    "first": "Daniel",
                    "middle": [],
                    "last": "Ayala",
                    "suffix": ""
                },
                {
                    "first": "Ouri",
                    "middle": [],
                    "last": "Wolfson",
                    "suffix": ""
                },
                {
                    "first": "Bo",
                    "middle": [],
                    "last": "Xu",
                    "suffix": ""
                },
                {
                    "first": "Bhaskar",
                    "middle": [],
                    "last": "Dasgupta",
                    "suffix": ""
                },
                {
                    "first": "Jie",
                    "middle": [],
                    "last": "Lin",
                    "suffix": ""
                }
            ],
            "year": 2011,
            "venue": "ACM-GIS",
            "volume": "",
            "issn": "",
            "pages": "299--308",
            "other_ids": {}
        },
        "BIBREF2": {
            "ref_id": "b2",
            "title": "A multi agent system architecture to implement collaborative learning for social industrial assets",
            "authors": [
                {
                    "first": "Kshitij",
                    "middle": [],
                    "last": "Bakliwal",
                    "suffix": ""
                },
                {
                    "first": "H",
                    "middle": [],
                    "last": "Maharshi",
                    "suffix": ""
                },
                {
                    "first": "Adri\u00e0",
                    "middle": [
                        "S"
                    ],
                    "last": "Dhada",
                    "suffix": ""
                },
                {
                    "first": "Ajith",
                    "middle": [
                        "K"
                    ],
                    "last": "Palau",
                    "suffix": ""
                },
                {
                    "first": "Bhupesh",
                    "middle": [
                        "K"
                    ],
                    "last": "Parlikad",
                    "suffix": ""
                },
                {
                    "first": "",
                    "middle": [],
                    "last": "Lad",
                    "suffix": ""
                }
            ],
            "year": 2018,
            "venue": "IFAC",
            "volume": "51",
            "issn": "11",
            "pages": "1237--1242",
            "other_ids": {}
        },
        "BIBREF3": {
            "ref_id": "b3",
            "title": "Logic-based clustering approach for management and improvement of vanets",
            "authors": [
                {
                    "first": "Walter",
                    "middle": [],
                    "last": "Balzano",
                    "suffix": ""
                },
                {
                    "first": "Aniello",
                    "middle": [],
                    "last": "Murano",
                    "suffix": ""
                },
                {
                    "first": "Silvia",
                    "middle": [],
                    "last": "Stranieri",
                    "suffix": ""
                }
            ],
            "year": 2017,
            "venue": "J. High Speed Networks",
            "volume": "23",
            "issn": "3",
            "pages": "225--236",
            "other_ids": {}
        },
        "BIBREF4": {
            "ref_id": "b4",
            "title": "V2V-EN -vehicle-2-vehicle elastic network",
            "authors": [
                {
                    "first": "Walter",
                    "middle": [],
                    "last": "Balzano",
                    "suffix": ""
                },
                {
                    "first": "Aniello",
                    "middle": [],
                    "last": "Murano",
                    "suffix": ""
                },
                {
                    "first": "Fabio",
                    "middle": [],
                    "last": "Vitale",
                    "suffix": ""
                }
            ],
            "year": 2016,
            "venue": "Procedia Computer Science",
            "volume": "98",
            "issn": "",
            "pages": "497--502",
            "other_ids": {}
        },
        "BIBREF5": {
            "ref_id": "b5",
            "title": "Acop: an algorithm based on ant colony optimization for parking slot detection",
            "authors": [
                {
                    "first": "Walter",
                    "middle": [],
                    "last": "Balzano",
                    "suffix": ""
                },
                {
                    "first": "Silvia",
                    "middle": [],
                    "last": "Stranieri",
                    "suffix": ""
                }
            ],
            "year": 2019,
            "venue": "WAINA",
            "volume": "",
            "issn": "",
            "pages": "833--840",
            "other_ids": {}
        },
        "BIBREF6": {
            "ref_id": "b6",
            "title": "Smart parking architecture based on multi agent system",
            "authors": [
                {
                    "first": "Sofia",
                    "middle": [],
                    "last": "Belkhala",
                    "suffix": ""
                },
                {
                    "first": "Siham",
                    "middle": [],
                    "last": "Benhadou",
                    "suffix": ""
                },
                {
                    "first": "Khalid",
                    "middle": [],
                    "last": "Boukhdir",
                    "suffix": ""
                },
                {
                    "first": "Hicham",
                    "middle": [],
                    "last": "Medromi",
                    "suffix": ""
                }
            ],
            "year": 2019,
            "venue": "IJACSA",
            "volume": "10",
            "issn": "",
            "pages": "378--382",
            "other_ids": {}
        },
        "BIBREF7": {
            "ref_id": "b7",
            "title": "Fouad Moutaouakkil, and Hicham Medromi. e-parking: Multiagent smart parking platform for dynamic pricing and reservation sharing service",
            "authors": [
                {
                    "first": "Bassma",
                    "middle": [],
                    "last": "Jioudi",
                    "suffix": ""
                },
                {
                    "first": "Aroua",
                    "middle": [],
                    "last": "Amari",
                    "suffix": ""
                }
            ],
            "year": 2019,
            "venue": "IJACSA",
            "volume": "10",
            "issn": "11",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF8": {
            "ref_id": "b8",
            "title": "On the efficiency of information-assisted search for parking space: A game-theoretic approach",
            "authors": [
                {
                    "first": "Evangelia",
                    "middle": [],
                    "last": "Kokolaki",
                    "suffix": ""
                }
            ],
            "year": 2013,
            "venue": "Merkourios Karaliopoulos, and Ioannis Stavrakakis",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF9": {
            "ref_id": "b9",
            "title": "A survey of smart parking solutions",
            "authors": [
                {
                    "first": "Trista",
                    "middle": [],
                    "last": "Lin",
                    "suffix": ""
                },
                {
                    "first": "Herv\u00e9",
                    "middle": [],
                    "last": "Rivano",
                    "suffix": ""
                },
                {
                    "first": "Fr\u00e9d\u00e9ric Le",
                    "middle": [],
                    "last": "Mou\u00ebl",
                    "suffix": ""
                }
            ],
            "year": 2017,
            "venue": "IEEE Transactions on ITS",
            "volume": "18",
            "issn": "12",
            "pages": "3229--3253",
            "other_ids": {}
        },
        "BIBREF10": {
            "ref_id": "b10",
            "title": "Equilibrium analysis of parking for integrated daily commuting",
            "authors": [
                {
                    "first": "Xiao-Shan",
                    "middle": [],
                    "last": "Lu",
                    "suffix": ""
                },
                {
                    "first": "Ren-Yong",
                    "middle": [],
                    "last": "Guo",
                    "suffix": ""
                },
                {
                    "first": "Hai-Jun",
                    "middle": [],
                    "last": "Huang",
                    "suffix": ""
                },
                {
                    "first": "Xiaoming",
                    "middle": [],
                    "last": "Xu",
                    "suffix": ""
                },
                {
                    "first": "Jiajia",
                    "middle": [],
                    "last": "Chen",
                    "suffix": ""
                }
            ],
            "year": 2021,
            "venue": "Res. in Transportation Economics",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF11": {
            "ref_id": "b11",
            "title": "A computer simulation of traffic flow with on-street parking and drivers' behaviour based on cellular automata and a multi-agent system",
            "authors": [
                {
                    "first": "Krzysztof",
                    "middle": [],
                    "last": "Ma\u0142ecki",
                    "suffix": ""
                }
            ],
            "year": 2018,
            "venue": "JCS",
            "volume": "28",
            "issn": "",
            "pages": "32--42",
            "other_ids": {}
        },
        "BIBREF12": {
            "ref_id": "b12",
            "title": "Multi-agent path finding with priority for cooperative automated valet parking",
            "authors": [
                {
                    "first": "Ayano",
                    "middle": [],
                    "last": "Okoso",
                    "suffix": ""
                },
                {
                    "first": "Keisuke",
                    "middle": [],
                    "last": "Otaki",
                    "suffix": ""
                },
                {
                    "first": "Tomoki",
                    "middle": [],
                    "last": "Nishi",
                    "suffix": ""
                }
            ],
            "year": 2019,
            "venue": "ITSC",
            "volume": "",
            "issn": "",
            "pages": "2135--2140",
            "other_ids": {}
        },
        "BIBREF13": {
            "ref_id": "b13",
            "title": "Multi-agent big-data lambda architecture model for e-commerce analytics",
            "authors": [
                {
                    "first": "Gautam",
                    "middle": [],
                    "last": "Pal",
                    "suffix": ""
                },
                {
                    "first": "Gangmin",
                    "middle": [],
                    "last": "Li",
                    "suffix": ""
                },
                {
                    "first": "Katie",
                    "middle": [],
                    "last": "Atkinson",
                    "suffix": ""
                }
            ],
            "year": 2018,
            "venue": "Data",
            "volume": "3",
            "issn": "4",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF14": {
            "ref_id": "b14",
            "title": "Competing for congestible goods: experimental evidence on parking choice",
            "authors": [
                {
                    "first": "M",
                    "middle": [],
                    "last": "Pereda",
                    "suffix": ""
                },
                {
                    "first": "J",
                    "middle": [],
                    "last": "Ozaita",
                    "suffix": ""
                },
                {
                    "first": "I",
                    "middle": [],
                    "last": "Stavrakakis",
                    "suffix": ""
                },
                {
                    "first": "A",
                    "middle": [],
                    "last": "Sanchez",
                    "suffix": ""
                }
            ],
            "year": 2020,
            "venue": "Scientific reports",
            "volume": "10",
            "issn": "1",
            "pages": "1--10",
            "other_ids": {}
        },
        "BIBREF15": {
            "ref_id": "b15",
            "title": "A smart hybrid system for parking space reservation in vanet",
            "authors": [
                {
                    "first": "Farhad",
                    "middle": [],
                    "last": "Rad",
                    "suffix": ""
                },
                {
                    "first": "Hadi",
                    "middle": [],
                    "last": "Pazhokhzadeh",
                    "suffix": ""
                },
                {
                    "first": "Hamid",
                    "middle": [],
                    "last": "Parvin",
                    "suffix": ""
                }
            ],
            "year": 2017,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF16": {
            "ref_id": "b16",
            "title": "Svps: Cloud-based smart vehicle parking system over ubiquitous vanets",
            "authors": [
                {
                    "first": "G",
                    "middle": [
                        "K"
                    ],
                    "last": "Qamas",
                    "suffix": ""
                },
                {
                    "first": "Senlin",
                    "middle": [],
                    "last": "Safi",
                    "suffix": ""
                },
                {
                    "first": "Limin",
                    "middle": [],
                    "last": "Luo",
                    "suffix": ""
                },
                {
                    "first": "Wangtong",
                    "middle": [],
                    "last": "Pan",
                    "suffix": ""
                },
                {
                    "first": "Rasheed",
                    "middle": [],
                    "last": "Liu",
                    "suffix": ""
                },
                {
                    "first": "",
                    "middle": [],
                    "last": "Hussain",
                    "suffix": ""
                },
                {
                    "first": "H",
                    "middle": [],
                    "last": "Safdar",
                    "suffix": ""
                },
                {
                    "first": "",
                    "middle": [],
                    "last": "Bouk",
                    "suffix": ""
                }
            ],
            "year": 2018,
            "venue": "Computer Networks",
            "volume": "138",
            "issn": "",
            "pages": "18--30",
            "other_ids": {}
        },
        "BIBREF17": {
            "ref_id": "b17",
            "title": "Automatic parking service through vanet: A convenience application",
            "authors": [
                {
                    "first": "R",
                    "middle": [],
                    "last": "Biswa",
                    "suffix": ""
                },
                {
                    "first": "Pabitra",
                    "middle": [
                        "M"
                    ],
                    "last": "Senapati",
                    "suffix": ""
                },
                {
                    "first": "",
                    "middle": [],
                    "last": "Khilar",
                    "suffix": ""
                }
            ],
            "year": 2020,
            "venue": "ICCAN",
            "volume": "",
            "issn": "",
            "pages": "151--159",
            "other_ids": {}
        },
        "BIBREF18": {
            "ref_id": "b18",
            "title": "The high cost of free parking",
            "authors": [
                {
                    "first": "Donald",
                    "middle": [],
                    "last": "Shoup",
                    "suffix": ""
                }
            ],
            "year": 2005,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF19": {
            "ref_id": "b19",
            "title": "A cooperative aerial interception model based on multi-agent system for uavs",
            "authors": [
                {
                    "first": "Xiaoyu",
                    "middle": [],
                    "last": "Song",
                    "suffix": ""
                },
                {
                    "first": "Ruopeng",
                    "middle": [],
                    "last": "Yang",
                    "suffix": ""
                },
                {
                    "first": "Changsheng",
                    "middle": [],
                    "last": "Yin",
                    "suffix": ""
                },
                {
                    "first": "Bo",
                    "middle": [],
                    "last": "Tang",
                    "suffix": ""
                }
            ],
            "year": 2021,
            "venue": "IAEAC",
            "volume": "5",
            "issn": "",
            "pages": "873--882",
            "other_ids": {}
        },
        "BIBREF20": {
            "ref_id": "b20",
            "title": "Stability and perfection of Nash equilibria",
            "authors": [
                {
                    "first": "Eric",
                    "middle": [],
                    "last": "Van Damme",
                    "suffix": ""
                }
            ],
            "year": 1991,
            "venue": "",
            "volume": "339",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF21": {
            "ref_id": "b21",
            "title": "An introduction to multiagent systems",
            "authors": [
                {
                    "first": "Michael",
                    "middle": [],
                    "last": "Wooldridge",
                    "suffix": ""
                }
            ],
            "year": 2009,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF22": {
            "ref_id": "b22",
            "title": "Smart house simulation based multi-agent system and internet of things",
            "authors": [
                {
                    "first": "Meftah",
                    "middle": [],
                    "last": "Zouai",
                    "suffix": ""
                },
                {
                    "first": "Okba",
                    "middle": [],
                    "last": "Kazar",
                    "suffix": ""
                },
                {
                    "first": "Belgacem",
                    "middle": [],
                    "last": "Haba",
                    "suffix": ""
                },
                {
                    "first": "Hamza",
                    "middle": [],
                    "last": "Saouli",
                    "suffix": ""
                }
            ],
            "year": 2017,
            "venue": "ICMIT",
            "volume": "",
            "issn": "",
            "pages": "201--203",
            "other_ids": {}
        }
    },
    "ref_entries": {
        "FIGREF0": {
            "text": "Graphical representation of the A.O.U. Federico II",
            "latex": null,
            "type": "figure"
        },
        "FIGREF2": {
            "text": "Fig. 2: 3-players-3-slots Game.",
            "latex": null,
            "type": "figure"
        },
        "FIGREF3": {
            "text": "is the set of cars, -S = {slot 1 , slot 2 , slot 3 } is the set of parking slots, -AT = {5, 2, 4} is the set of time-values car 1 , car 2 , and car 3 have at their disposal, respectively, -RT = {2, 3, 4} is the set of times needed to reach the slots slot 1 , slot 2 , and slot 3 , respectively, -F = {0.5, 0.1, 0.009} is the set of cars resilient values, -The cost function is reported in",
            "latex": null,
            "type": "figure"
        },
        "FIGREF4": {
            "text": "1 \u221e, \u221e, 0.018 \u221e, \u221e, 0.018 \u221e, \u221e, 0.018 \u221e, 0, 0.009 1.5, \u221e, 0.009 1.5, \u221e, 0.009 \u221e, 0, 0 1.5, \u221e, 0 1.5, \u221e, 0 slot 2 1, \u221e, 0.018 1, \u221e, 0.018 1, \u221e, 0.018 \u221e, 0, 0.009 \u221e, \u221e, 0.009 \u221e, \u221e, 0.009 1,0,0 1, \u221e, 0 1, \u221e, 0 slot 3 0.5, \u221e, 0.018 0.5, \u221e, 0.018 0.5, \u221e, 0.018 0.5, 0, 0.009 0.5, \u221e, 0.009 0.5, \u221e, 0.009 \u221e, 0, 0 \u221e, \u221e, 0 \u221e, \u221e, 0",
            "latex": null,
            "type": "figure"
        },
        "TABREF0": {
            "text": "Cost function values for 3-drivers-3-slots instance of the game.",
            "latex": null,
            "type": "table"
        },
        "TABREF1": {
            "text": "slots 4 slots 5 slots 6 slots 7 slots 8 slots 9 slots 10 slots 11 slots 12 slots 3 cars 4 cars 5 cars 6 cars 7 cars 8 cars 9 cars 10 cars 11 cars 12 cars",
            "latex": null,
            "type": "table"
        },
        "TABREF2": {
            "text": "Resulting vehicle allocations over 10 different simulations applying two solutions to the parking game: the Nash equilibrium based one, and the greedy one.",
            "latex": null,
            "type": "table"
        }
    },
    "back_matter": []
}