{
    "paper_id": "a29706d7b53db8650b4c81d5093e82e8f0c9f9ed",
    "metadata": {
        "title": "Acyclic Matching in Some Subclasses of Graphs",
        "authors": [
            {
                "first": "B",
                "middle": [
                    "S"
                ],
                "last": "Panda",
                "suffix": "",
                "affiliation": {
                    "laboratory": "Computer Science and Application Group",
                    "institution": "Indian Institute of Technology Delhi",
                    "location": {
                        "addrLine": "Hauz Khas 110016",
                        "settlement": "New Delhi",
                        "country": "India"
                    }
                },
                "email": "bspanda@maths.iitd.ac.in"
            },
            {
                "first": "B",
                "middle": [],
                "last": "",
                "suffix": "",
                "affiliation": {
                    "laboratory": "Computer Science and Application Group",
                    "institution": "Indian Institute of Technology Delhi",
                    "location": {
                        "addrLine": "Hauz Khas 110016",
                        "settlement": "New Delhi",
                        "country": "India"
                    }
                },
                "email": ""
            },
            {
                "first": "Juhi",
                "middle": [],
                "last": "Chaudhary",
                "suffix": "",
                "affiliation": {
                    "laboratory": "Computer Science and Application Group",
                    "institution": "Indian Institute of Technology Delhi",
                    "location": {
                        "addrLine": "Hauz Khas 110016",
                        "settlement": "New Delhi",
                        "country": "India"
                    }
                },
                "email": "chaudhary.juhi5@gmail.com"
            }
        ]
    },
    "abstract": [
        {
            "text": "A subset M \u2286 E of edges of a graph G = (V, E) is called a matching if no two edges of M share a common vertex. A matching M in a graph G is called an acyclic matching if G[V (M )], the subgraph of G induced by the M -saturated vertices of G is acyclic. The Acyclic Matching Problem is the problem of finding an acyclic matching of maximum size. The decision version of the Acyclic Matching Problem is known to be NP-complete for general graphs as well as for bipartite graphs. In this paper, we strengthen this result by showing that the decision version of the Acyclic Matching Problem remains NPcomplete for comb-convex bipartite graphs and dually-chordal graphs. On the positive side, we present linear time algorithms to compute an acyclic matching of maximum size in split graphs and proper interval graphs. Finally, we show that the Acyclic Matching Problem is hard to approximate within a factor of n 1\u2212 for any > 0, unless P = NP and the Acyclic Matching Problem is APX-complete for 2k + 1-regular graphs for k \u2265 3, where k is a constant.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Abstract"
        }
    ],
    "body_text": [
        {
            "text": "A subset M \u2286 E of edges of a graph G = (V, E) is called a matching if no two edges of M share a common vertex. Vertices that are incident on the edges of a matching M are called M -saturated vertices and are denoted by V (M ). In this paper, we study an important variant of matching called acyclic matching (see [3, 5, 9] ). A matching M in G is called an acyclic matching if G[V (M )], the subgraph of G induced by the M -saturated vertices of G is acyclic. The Acyclic Matching Problem asks to find an acyclic matching of maximum size in a given graph G. The acyclic matching number of G, denoted by \u03bc ac (G) is the maximum size of an acyclic matching in G.",
            "cite_spans": [
                {
                    "start": 313,
                    "end": 316,
                    "text": "[3,",
                    "ref_id": "BIBREF2"
                },
                {
                    "start": 317,
                    "end": 319,
                    "text": "5,",
                    "ref_id": "BIBREF4"
                },
                {
                    "start": 320,
                    "end": 322,
                    "text": "9]",
                    "ref_id": "BIBREF8"
                }
            ],
            "ref_spans": [],
            "section": "Introduction"
        },
        {
            "text": "More formally, the Acyclic Matching Problem and its decision version are defined as follows: Goddard et al. [5] introduced the concept of acyclic matching along with some other variants of the matching and proved that the Acyclic Matching Decide Problem is NP-complete for general graphs. Later, Panda and Pradhan [9] strengthened this result by showing that the Acyclic Matching Decide Problem remains NP-complete for bipartite graphs and even for perfect-elimination bipartite graphs, which is a subclass of bipartite graphs. They also gave a dynamic programming based algorithm to find an acyclic matching of maximum size in bipartite permutation graphs. Baste et al. [2] showed that finding a maximum size 1-degenerate matching in a graph G is equivalent to finding a maximum acyclic matching in G. They further proved that a maximum 1-degenerate matching could be found in polynomial time in chordal graphs, but the time complexity is very high. Recently, F\u00fcrst and Rautenbach showed that it is hard to decide whether a given bipartite graph of maximum degree at most four has a maximum matching that is acyclic [4] . They further characterized the graphs for which every maximum matching is acyclic and give linear time algorithms to compute a maximum acyclic matching in graph classes like P 4 -free graphs and 2P 3 -free graphs [4] . There are no approximation results known for the Acyclic Matching Problem till now.",
            "cite_spans": [
                {
                    "start": 108,
                    "end": 111,
                    "text": "[5]",
                    "ref_id": "BIBREF4"
                },
                {
                    "start": 314,
                    "end": 317,
                    "text": "[9]",
                    "ref_id": "BIBREF8"
                },
                {
                    "start": 671,
                    "end": 674,
                    "text": "[2]",
                    "ref_id": "BIBREF1"
                },
                {
                    "start": 961,
                    "end": 970,
                    "text": "F\u00fcrst and",
                    "ref_id": null
                },
                {
                    "start": 1117,
                    "end": 1120,
                    "text": "[4]",
                    "ref_id": "BIBREF3"
                },
                {
                    "start": 1336,
                    "end": 1339,
                    "text": "[4]",
                    "ref_id": "BIBREF3"
                }
            ],
            "ref_spans": [],
            "section": "Introduction"
        },
        {
            "text": "In this paper, we study the complexity status of the Acyclic Matching Problem and the Acyclic Matching Decide Problem in some subclasses of graphs. The main contributions of this paper are summarized below.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Introduction"
        },
        {
            "text": "1. We prove that the Acyclic Matching Decide Problem is NP-complete for tree-convex bipartite graphs by showing that it is NP-complete for combconvex bipartite graphs which is a subclass of tree-convex bipartite graphs. 2. We prove that the Acyclic Matching Decide Problem is NP-complete for dually chordal graphs. 3. We prove that a maximum size acyclic matching can be computed in linear time in split graphs and proper interval graphs. 4. We prove that it is hard to approximate the Acyclic Matching Problem within a factor of n 1\u2212 for any > 0, unless P = NP . 5. We prove that the Acyclic Matching Problem is APX-complete for 2k + 1-regular graphs for k \u2265 3, where k is a constant.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Introduction"
        },
        {
            "text": "We consider only simple and connected graphs. For a graph G = (V, E), let n denotes the number of vertices and m denotes the number of edges in G. The open and closed neighborhood of a vertex u \u2208 V are denoted by N (u) and",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Preliminaries"
        },
        {
            "text": "is called a bipartite graph if its vertex set V can be partitioned into two independent sets X and Y , such that every edge of G joins a vertex in X to a vertex in Y . A comb is a graph obtained by attaching a pendant vertex (tooth) to every vertex of a path (backbone). A bipartite graph G = (X, Y, E) is said to be a tree-convex bipartite graph, if a tree T = (X, E X ) can be defined on X such that for every vertex y \u2208 Y , the vertices in N G (y) induces a subtree of T . It can be noted that tree-convex bipartite graphs are recognizable in linear time and the associated tree T can also be constructed in linear time [11] . If the tree T in a tree-convex bipartite graph is a comb, then G is called a comb-convex bipartite graph.",
            "cite_spans": [
                {
                    "start": 623,
                    "end": 627,
                    "text": "[11]",
                    "ref_id": "BIBREF10"
                }
            ],
            "ref_spans": [],
            "section": "Preliminaries"
        },
        {
            "text": "A graph G = (V, E) is called a chordal graph if every cycle in G of length at least four has a chord, that is, an edge joining two non-consecutive vertices of the cycle. A graph G = (V, E) is called a split graph if its vertex set V can be partitioned into two sets I and C such that I is an independent set and C is a clique. Let F be a family of sets. The intersection graph of F is obtained by taking each set in F as a vertex and joining two sets in F if and only if they have a nonempty intersection. A graph G is called a proper interval graph if it is the intersection graph of a family F of intervals on the real line such that no intervals in F contains another.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Preliminaries"
        },
        {
            "text": "is called a dually chordal graph if it has a maximum neighborhood ordering.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Preliminaries"
        },
        {
            "text": "It has been shown in [9] that the Acyclic Matching Decide Problem is NPcomplete for bipartite graphs. In this subsection, we strengthen this result by showing that the Acyclic Matching Decide Problem remains NP-complete for tree-convex bipartite graphs, which is a subclass of bipartite graphs by showing that it is NP-complete for comb-convex bipartite graphs. Proof. Clearly, the Acyclic Matching Decide Problem belongs to the class NP for comb-convex bipartite graphs. To show the NP-completeness, we give a polynomial reduction from the Acyclic Matching Decide Problem for bipartite graphs, which is already known to be NP-complete [9] .",
            "cite_spans": [
                {
                    "start": 21,
                    "end": 24,
                    "text": "[9]",
                    "ref_id": "BIBREF8"
                },
                {
                    "start": 636,
                    "end": 639,
                    "text": "[9]",
                    "ref_id": "BIBREF8"
                }
            ],
            "ref_spans": [],
            "section": "Comb-Convex Bipartite Graphs"
        },
        {
            "text": "Given a bipartite graph G = (X, Y, E), we construct a comb-convex bipartite graph H = (X H , Y H , E H ) as follows:",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Comb-Convex Bipartite Graphs"
        },
        {
            "text": "Let",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Comb-Convex Bipartite Graphs"
        },
        {
            "text": "The constructed graph H is a combconvex bipartite graph if X is taken as the backbone and X is taken as the teeth of a comb C. Further, note that given a bipartite graph G, the graph H can be constructed in polynomial time. Now, the following claim is sufficient to complete the proof of the theorem.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Comb-Convex Bipartite Graphs"
        },
        {
            "text": "Claim. G has an acyclic matching of size at least k if and only if H has an acyclic matching of size at least k. ",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Comb-Convex Bipartite Graphs"
        },
        {
            "text": "forms a cycle, which is a contradiction. Thus, M can include at most one edge from E .",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Comb-Convex Bipartite Graphs"
        },
        {
            "text": "Next, let x i y i \u2208 M for some x i \u2208 X . Since G is connected, y i will have a neighbor (say x k ) in X. Note that x k must be unsaturated by M because otherwise if x k y k \u2208 M for some y k \u2208 Y , then G[{x k , y k , x i , y i }] will form a cycle, which is a contradiction to the fact that M is acyclic.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Comb-Convex Bipartite Graphs"
        },
        {
            "text": "Otherwise, let us assume that G[V (M )] contains a cycle C . If C does not contain the vertex x k , then C is also a cycle in G[V (M )]. This contradicts the fact that M is an acyclic matching. So, C contains the vertex",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Comb-Convex Bipartite Graphs"
        },
        {
            "text": ", which is a contradiction. Hence, M is acyclic and it is a required acyclic matching in G of size at least k. \u2666 Hence, the Acyclic Matching Decide Problem is NP-complete for comb-convex bipartite graphs. Corollary 1. The Acyclic Matching Decide Problem is NP-complete for tree-convex bipartite graphs.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Comb-Convex Bipartite Graphs"
        },
        {
            "text": "The Acyclic Matching Problem is polynomial time solvable for chordal graphs [2] and hence for strongly chordal graphs. In this subsection, we show that the Acyclic Matching Decide Problem is NP-complete for dually chordal graphs which is a superclass of strongly chordal graphs.",
            "cite_spans": [
                {
                    "start": 76,
                    "end": 79,
                    "text": "[2]",
                    "ref_id": "BIBREF1"
                }
            ],
            "ref_spans": [],
            "section": "Dually Chordal Graphs"
        },
        {
            "text": "Proof. Clearly, the Acyclic Matching Decide Problem belongs to the class NP for dually chordal graphs. To show the NP-completeness, we give a polynomial reduction from the Acyclic Matching Decide Problem for general graphs, which is already known to be NP-complete [5] .",
            "cite_spans": [
                {
                    "start": 265,
                    "end": 268,
                    "text": "[5]",
                    "ref_id": "BIBREF4"
                }
            ],
            "ref_spans": [],
            "section": "Theorem 2. The Acyclic Matching Decide Problem is NP-complete for dually chordal graphs."
        },
        {
            "text": "Given a graph G = (V, E), we construct a dually chordal graph H = (V H , E H ) as follows:",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Theorem 2. The Acyclic Matching Decide Problem is NP-complete for dually chordal graphs."
        },
        {
            "text": "Therefore, it is easy to see that the constructed graph H = (V H , E H ) is a dually chordal graph. Also, note that given a graph G, the graph H can be constructed in polynomial time. Now, the following claim is sufficient to complete the proof of the theorem.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Theorem 2. The Acyclic Matching Decide Problem is NP-complete for dually chordal graphs."
        },
        {
            "text": "Claim. G has an acyclic matching of size at least k if and only if H has an acyclic matching of size at least k, where k > 1.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Theorem 2. The Acyclic Matching Decide Problem is NP-complete for dually chordal graphs."
        },
        {
            "text": "Proof. Necessity: Let M be an acyclic matching in G of size at least k. Since G is a vertex induced subgraph of H, so M is an acyclic matching in graph H of size at least k. Sufficiency: Let M be an acyclic matching in graph H of size at least k,",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Theorem 2. The Acyclic Matching Decide Problem is NP-complete for dually chordal graphs."
        },
        {
            "text": "forms a cycle, which is a contradiction.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Theorem 2. The Acyclic Matching Decide Problem is NP-complete for dually chordal graphs."
        },
        {
            "text": "As |M | \u2265 k > 1, vertex v 0 is not saturated by M , that is, M does not have any edge of the form v 0 v i for any v i \u2208 V . Thus, M is a required acyclic matching in graph G of size at least k. \u2666 Hence, the Acyclic Matching Decide Problem is NP-complete for dually chordal graphs.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Theorem 2. The Acyclic Matching Decide Problem is NP-complete for dually chordal graphs."
        },
        {
            "text": "In this subsection, we show that an acyclic matching of maximum size can be computed in linear time for split graphs which is a subclass of chordal graphs, where the complexity of computing a maximum size acyclic matching is O(n 7 ).",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Split Graphs"
        },
        {
            "text": "Let G = (V, E) be a split graph. Throughout this section, I \u222a C represents a given partition of the vertex set V , where I is an independent set and C is a clique in G. Now, the following lemma shows that the cardinality of an acyclic matching in a split graph G = (V, E) can be either 1 or 2 only.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Split Graphs"
        },
        {
            "text": "Proof. Let M be an acyclic matching in G and let |M | \u2265 3. Let",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Split Graphs"
        },
        {
            "text": "Since I is an independent set, we can assume without loss of generality that b 1 , b 2 , b 3 \u2208 C. This leads to a contradiction as",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Split Graphs"
        },
        {
            "text": "Next, we will characterize the split graphs depending on the size of an acyclic matching in G. For this purpose, let us recall the definition of threshold graphs, which is a proper subclass of split graphs.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Split Graphs"
        },
        {
            "text": "A split graph G = (V, E) is called a threshold graph if the vertices in I can be linearly ordered,",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Split Graphs"
        },
        {
            "text": "This linear ordering of a threshold graph can be computed in linear time [6] . ",
            "cite_spans": [
                {
                    "start": 73,
                    "end": 76,
                    "text": "[6]",
                    "ref_id": "BIBREF5"
                }
            ],
            "ref_spans": [],
            "section": "Split Graphs"
        },
        {
            "text": "Proof. Necessity: Let M be an acyclic matching in G and let",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Split Graphs"
        },
        {
            "text": "Since C is a clique and I is an independent set, exactly two vertices from the set {a i , a j , b i , b j } belong to C and the other two belongs to I. Without loss of generality, let us assume that a i , a j \u2208 C and",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Split Graphs"
        },
        {
            "text": "Sufficiency: Let us assume that there exist two vertices v 1 , v 2 \u2208 I such that Proof. Necessity: Let G = (V, E) be a split graph and let M be a maximum acyclic matching in G such that |M | = 1. For the sake of contradiction, let us suppose that G is not a threshold graph. Then, there will exist a pair of vertices",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Split Graphs"
        },
        {
            "text": "is a path graph. Since |M | = 2, this leads to a contradiction to the fact that M is a maximum acyclic matching in G. Hence, G is a threshold graph.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Split Graphs"
        },
        {
            "text": "Sufficiency: Let G = (V, E) be a threshold graph and let (v 1 , v 2 , . . . v |I| ) be an ordering of I, such that",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Split Graphs"
        },
        {
            "text": "Hence, by Lemma 1 and Lemma 2, it is easy to see that |M | = 1.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Split Graphs"
        },
        {
            "text": "Based on the above discussions we have the following theorem. Proof. Due to space restriction, the proof has been deferred to the longer version of the paper.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Split Graphs"
        },
        {
            "text": "In this subsection, we show that an acyclic matching of maximum size can be computed in linear time for proper interval graphs which is a subclass of chordal graphs, where the complexity of computing a maximum size acyclic matching is O(n 7 ).",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Proper Interval Graphs"
        },
        {
            "text": "Let v n\u22121 , . . . , v 1 ) i.e., the reverse of \u03b1, is also a PEO of G. It has been characterized in [7] that a graph is proper interval if and only if it has a BCO. Proof. The result easily follows from Observation 5. \u2666",
            "cite_spans": [
                {
                    "start": 99,
                    "end": 102,
                    "text": "[7]",
                    "ref_id": "BIBREF6"
                }
            ],
            "ref_spans": [
                {
                    "start": 4,
                    "end": 25,
                    "text": "v n\u22121 , . . . , v 1 )",
                    "ref_id": "FIGREF1"
                }
            ],
            "section": "Proper Interval Graphs"
        },
        {
            "text": "\u03c3 = (v 1 , v 2 , . . . , v n ) be a BCO of a proper interval graph G. If v i v j \u2208 E, then v k v j \u2208 E for all k, i \u2264 k \u2264 j \u2212 1. Observation 6. Let \u03c3 = (v 1 , v 2 , . . . , v n ) be a BCO of",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Observation 5. [8] Let"
        },
        {
            "text": "v i in \u03c3. If v i < v j in \u03c3, then L[v i ] \u2264 L[v j ].",
            "cite_spans": [],
            "ref_spans": [],
            "section": "a proper interval graph G and let L[v i ] denotes the last neighbor of a vertex"
        },
        {
            "text": "v i and v j such that v i < v j in \u03c3 and L[v i ] > L[v j ]. Then by Observation 5, v j L[v i ] \u2208 E but since L[v j ] < L[v i ],",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Proof. Let us suppose that there exists"
        },
        {
            "text": "and let M be an acyclic matching in G. If the edges u 1 w 1 , u 2 w 2 \u2208 M such that u 1 < w 1 and u 2 < w 2 in \u03c3, then either w 1 < u 2 or w 2 < u 1 .",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Lemma 3. Let G be a proper interval graph with a BCO"
        },
        {
            "text": "Proof. Let us assume without loss of generality that there exist two edges e 1 = u 1 w 1 and e 2 = u 2 w 2 such that u 1 < w 2 < w 1 in \u03c3. Now, the G[{u 1 , w 2 , w 1 }] forms a cycle, which is a contradiction. Thus, either w 1 < u 2 or w 2 < u 1 . Proof. Let G be a proper interval graph with a BCO \u03c3 = (v 1 , v 2 , . . . , v n ) and let M be a maximum acyclic matching in G. Let v a v b be the first edge with respect to \u03c3 that belongs to M . Let us assume without loss of generality that",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Lemma 3. Let G be a proper interval graph with a BCO"
        },
        {
            "text": "is acyclic and hence the edge v 1 v 2 can be added to M . This leads to a contradiction to the fact that M is a maximum acyclic matching in G. = (v a , v b , . . . , v k ) be an ordering obtained from \u03c3 by removing some vertices from \u03c3. Then, \u03c3 is also a BCO of some proper interval graph G , where G is a subgraph of G. Hence, we have the following corollary to Lemma 4. \u03c3 = (v a , v b , . . . , v k ) is a BCO of a subgraph G of a Proof. Due to space restriction, the proof has been deferred to the longer version of the paper.",
            "cite_spans": [],
            "ref_spans": [
                {
                    "start": 143,
                    "end": 171,
                    "text": "= (v a , v b , . . . , v k )",
                    "ref_id": null
                },
                {
                    "start": 372,
                    "end": 432,
                    "text": "\u03c3 = (v a , v b , . . . , v k ) is a BCO of a subgraph G of a",
                    "ref_id": null
                }
            ],
            "section": "Lemma 3. Let G be a proper interval graph with a BCO"
        },
        {
            "text": "else if (L[F [Gi]] + 1 = v k ) < L[F [Gi] + 1]) and L[v k ] = L[F [Gi] + 1] then i = i + 1; Gi = Gi\u22121 \\ {F [Gi\u22121], . . . , L[F [Gi\u22121]]}; while (L[v k ] = L[F [Gi] + 1]) do temp = v k ; v k = v k + 1; Gi = Gi \\ temp; Gi = Gi \\ {v k+1 ,",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Corollary 2. If"
        },
        {
            "text": "Let G = (V, E) be a graph with n vertices. It is easy to note that the maximum size of an acyclic matching in G can be at most n 2 . So, the Acyclic Matching Problem can be approximated within a factor of n in polynomial time. In this section, we show that for any > 0, it is hard to approximate the Acyclic Matching Problem within a factor of n 1\u2212 , unless P = NP .",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Inapproximation Results"
        },
        {
            "text": "To prove the result, we will need the following theorem for the Maximum Independent Set Problem. Theorem 9. [12] The Maximum Independent Set Problem for a graph G cannot be approximated within a factor of n 1\u2212 for any > 0, unless P = NP . Now, consider the following construction: ",
            "cite_spans": [
                {
                    "start": 108,
                    "end": 112,
                    "text": "[12]",
                    "ref_id": "BIBREF11"
                }
            ],
            "ref_spans": [],
            "section": "Inapproximation Results"
        },
        {
            "text": "Clearly, H can be constructed in polynomial time as |V H | = 2|V | and |E H | = 4|E| + |V |.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Inapproximation Results"
        },
        {
            "text": "Also, note that the edges in H can be one of the following four types:",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Inapproximation Results"
        },
        {
            "text": "Now, we will discuss some lemmas that will be used in the proof of the main theorem of this section. Let us recall that V H (M ) denotes the set of M -saturated vertices of graph H. ",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Inapproximation Results"
        },
        {
            "text": ", which is a contradiction. Hence, M is acyclic. In this way, an acyclic matching of same size can be obtained by replacing an edge of T ype-IV with a corresponding T ype-III edge.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Inapproximation Results"
        },
        {
            "text": "Using the similar arguments, we can show that an acyclic matching of same size can be obtained by replacing an edge of T ype-III with a corresponding T ype-II edge. Proof. Due to space restriction, the proof has been deferred to the longer version of the paper. \u2666",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Inapproximation Results"
        },
        {
            "text": "The following lemma shows that the described reduction is exactly what we need. Hence, we obtain, |I * (G)| \u2264 \u03b1|I ALG (G)| = n 1\u2212 |I ALG (G)| = (2n) 1\u2212 |I ALG (G)| = (2) 1\u2212 (n) 1\u2212 |I ALG (G)|.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Inapproximation Results"
        },
        {
            "text": "If we choose , such that 2 1\u2212 < n \u2212 , then",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Inapproximation Results"
        },
        {
            "text": "Hence, |I * (G)| < (n) 1\u2212 |I ALG (G)|, which leads to a contradiction to Theorem 9. Therefore, the Acyclic Matching Problem cannot be approximated within a factor of n 1\u2212 for any > 0, unless P = NP .",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Inapproximation Results"
        },
        {
            "text": "In this section, we show that the Acyclic Matching Problem is APXcomplete for 2k + 1-regular graphs for k \u2265 3, where k is a constant.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "APX-Completeness"
        },
        {
            "text": "To prove the result, we first show that the Acyclic Matching Problem is approximable within a constant factor when restricted to k-regular graphs for k \u2265 3, where k is a constant. For the purpose, consider the following algorithm: Proof. Given a k-regular graph G, construct an acyclic matching M ac of G by using algorithm Approx-AM(G). In each step, after adding an edge in the matching M ac , we are removing at most k 2 edges, hence kn 2[2k(k\u22121)+1] \u2264 |M ac |. Moreover, it is easy to see that the size of any matching can be at most n 2 . Hence, the Acyclic Matching Problem is approximable within a factor of 2k(k\u22121)+1 k in k-regular graphs, where k is a constant. \u2666",
            "cite_spans": [],
            "ref_spans": [],
            "section": "APX-Completeness"
        },
        {
            "text": "To prove the result, we will need the following theorem for the Maximum Independent Set Problem. Theorem 11. [1, 10] The Maximum Independent Set Problem is APXcomplete for k-regular graphs for k \u2265 3.",
            "cite_spans": [
                {
                    "start": 109,
                    "end": 112,
                    "text": "[1,",
                    "ref_id": "BIBREF0"
                },
                {
                    "start": 113,
                    "end": 116,
                    "text": "10]",
                    "ref_id": "BIBREF9"
                }
            ],
            "ref_spans": [],
            "section": "APX-Completeness"
        },
        {
            "text": "If G is a k-regular graph in Construction 1, then the constructed graph H is a 2k + 1-regular graph for k \u2265 3. Now, we are ready to prove the APX-completeness of the Acyclic Matching Problem for 2k + 1-regular graphs for k \u2265 3, where k is a constant. For this purpose, we recall the concept of L-reduction. Given two NP optimization problems \u03c0 1 and \u03c0 2 and a polynomial time transformation f from instances of \u03c0 1 to instances of \u03c0 2 , we say that f is an L-reduction if there are positive constants \u03b1 and \u03b2 such that for every instance x of \u03c0 1 :",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Observation 12."
        },
        {
            "text": "1. opt \u03c02 (f (x)) \u2264 \u03b1.opt \u03c01 (x); 2. for every feasible solution y of f (x) with objective value m \u03c02 (f (x), y) = c 2 , we can find a solution y of x in polynomial time with m \u03c01 (x, y ) = c 1 such that |opt \u03c01 (x) \u2212 c 1 | \u2264 \u03b2.|opt \u03c02 (f (x)) \u2212 c 2 |.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Observation 12."
        },
        {
            "text": "Theorem 13. The Acyclic Matching Problem is APX-complete for 2k+1regular graphs for k \u2265 3, where k is a constant.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Observation 12."
        },
        {
            "text": "Proof. By Lemma 9, it is clear that the Acyclic Matching Problem for 2k + 1-regular graphs for k \u2265 3 belongs to the class APX. By Theorem 11, it is enough to construct an L-reduction from the instances of the Maximum Independent Set Problem for k-regular graphs to the instances of the Acyclic Matching Problem for 2k + 1-regular graphs. Given a k-regular graph G = (V, E), where V = {v 1 , v 2 , . . . , v n }. We construct a graph H = (V H , E H ), an instance of the Acyclic Matching Problem by Construction 1. It is easy to see by Lemma 7 and Corollary 3 that the reduction described in Construction 1 is an L-reduction with \u03b1 = 1 and \u03b2 = 1. Therefore, the Acyclic Matching Problem is APX-complete for 2k + 1regular graphs for k \u2265 3, where k is a constant.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Observation 12."
        },
        {
            "text": "In this paper, we have shown that the Acyclic Matching Decide Problem is NP-complete for comb-convex bipartite graphs and dually chordal graphs. On the positive side, we have shown that the Acyclic Matching Problem can be solved in linear time in split graphs and proper interval graphs. Apart from these, we have shown that the Acyclic Matching Problem cannot be approximated within a factor of n 1\u2212 for any > 0, unless P = NP . We have also shown that the Acyclic Matching Problem is APX-complete for 2k +1regular graphs for k \u2265 3, where k is a constant. Further, it will be interesting to study better approximation algorithms for this problem for bipartite graphs and other important graph classes.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Conclusion"
        }
    ],
    "bib_entries": {
        "BIBREF0": {
            "ref_id": "b0",
            "title": "Some APX-completeness results for cubic graphs",
            "authors": [
                {
                    "first": "P",
                    "middle": [],
                    "last": "Alimonti",
                    "suffix": ""
                },
                {
                    "first": "V",
                    "middle": [],
                    "last": "Kann",
                    "suffix": ""
                }
            ],
            "year": 2000,
            "venue": "Theoret. Comput. Sci",
            "volume": "237",
            "issn": "1-2",
            "pages": "123--134",
            "other_ids": {}
        },
        "BIBREF1": {
            "ref_id": "b1",
            "title": "Degenerate matchings and edge colorings",
            "authors": [
                {
                    "first": "J",
                    "middle": [],
                    "last": "Baste",
                    "suffix": ""
                },
                {
                    "first": "D",
                    "middle": [],
                    "last": "Rautenbach",
                    "suffix": ""
                }
            ],
            "year": 2018,
            "venue": "Discrete Appl. Math",
            "volume": "239",
            "issn": "",
            "pages": "38--44",
            "other_ids": {}
        },
        "BIBREF2": {
            "ref_id": "b2",
            "title": "A lower bound on the acyclic matching number of subcubic graphs",
            "authors": [
                {
                    "first": "M",
                    "middle": [],
                    "last": "F\u00fcrst",
                    "suffix": ""
                },
                {
                    "first": "D",
                    "middle": [],
                    "last": "Rautenbach",
                    "suffix": ""
                }
            ],
            "year": 2018,
            "venue": "Discrete Math",
            "volume": "341",
            "issn": "8",
            "pages": "2353--2358",
            "other_ids": {}
        },
        "BIBREF3": {
            "ref_id": "b3",
            "title": "On some hard and some tractable cases of the maximum acyclic matching problem",
            "authors": [
                {
                    "first": "M",
                    "middle": [],
                    "last": "F\u00fcrst",
                    "suffix": ""
                },
                {
                    "first": "D",
                    "middle": [],
                    "last": "Rautenbach",
                    "suffix": ""
                }
            ],
            "year": 2019,
            "venue": "Ann. Oper. Res",
            "volume": "279",
            "issn": "1",
            "pages": "291--300",
            "other_ids": {
                "DOI": [
                    "10.1007/s10479-019-03311-1"
                ]
            }
        },
        "BIBREF4": {
            "ref_id": "b4",
            "title": "Generalized subgraph-restricted matchings in graphs",
            "authors": [
                {
                    "first": "W",
                    "middle": [],
                    "last": "Goddard",
                    "suffix": ""
                },
                {
                    "first": "S",
                    "middle": [
                        "M"
                    ],
                    "last": "Hedetniemi",
                    "suffix": ""
                },
                {
                    "first": "S",
                    "middle": [
                        "T"
                    ],
                    "last": "Hedetniemi",
                    "suffix": ""
                },
                {
                    "first": "R",
                    "middle": [],
                    "last": "Laskar",
                    "suffix": ""
                }
            ],
            "year": 2005,
            "venue": "Discrete Math",
            "volume": "293",
            "issn": "1",
            "pages": "129--138",
            "other_ids": {}
        },
        "BIBREF5": {
            "ref_id": "b5",
            "title": "Linear-time certifying recognition algorithms and forbidden induced subgraphs",
            "authors": [
                {
                    "first": "P",
                    "middle": [],
                    "last": "Heggernes",
                    "suffix": ""
                },
                {
                    "first": "D",
                    "middle": [],
                    "last": "Kratsch",
                    "suffix": ""
                }
            ],
            "year": 2007,
            "venue": "Nord. J. Comput",
            "volume": "14",
            "issn": "1-2",
            "pages": "87--108",
            "other_ids": {}
        },
        "BIBREF6": {
            "ref_id": "b6",
            "title": "Elimination orderings of chordal graphs",
            "authors": [
                {
                    "first": "R",
                    "middle": [
                        "E"
                    ],
                    "last": "Jamison",
                    "suffix": ""
                },
                {
                    "first": "R",
                    "middle": [],
                    "last": "Laskar",
                    "suffix": ""
                }
            ],
            "year": 1982,
            "venue": "Combinatorics and Applications",
            "volume": "",
            "issn": "",
            "pages": "192--200",
            "other_ids": {}
        },
        "BIBREF7": {
            "ref_id": "b7",
            "title": "A linear time recognition algorithm for proper interval graphs",
            "authors": [
                {
                    "first": "B",
                    "middle": [
                        "S"
                    ],
                    "last": "Panda",
                    "suffix": ""
                },
                {
                    "first": "S",
                    "middle": [
                        "K"
                    ],
                    "last": "Das",
                    "suffix": ""
                }
            ],
            "year": 2003,
            "venue": "Inf. Process. Lett",
            "volume": "87",
            "issn": "3",
            "pages": "153--161",
            "other_ids": {}
        },
        "BIBREF8": {
            "ref_id": "b8",
            "title": "Acyclic matchings in subclasses of bipartite graphs",
            "authors": [
                {
                    "first": "B",
                    "middle": [
                        "S"
                    ],
                    "last": "Panda",
                    "suffix": ""
                },
                {
                    "first": "D",
                    "middle": [],
                    "last": "Pradhan",
                    "suffix": ""
                }
            ],
            "year": 2012,
            "venue": "Discrete Math. Algorithms Appl",
            "volume": "4",
            "issn": "04",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF9": {
            "ref_id": "b9",
            "title": "Optimization, approximation, and complexity classes",
            "authors": [
                {
                    "first": "C",
                    "middle": [
                        "H"
                    ],
                    "last": "Papadimitriou",
                    "suffix": ""
                },
                {
                    "first": "M",
                    "middle": [],
                    "last": "Yannakakis",
                    "suffix": ""
                }
            ],
            "year": 1991,
            "venue": "J. Comput. Syst. Sci",
            "volume": "43",
            "issn": "3",
            "pages": "425--440",
            "other_ids": {}
        },
        "BIBREF10": {
            "ref_id": "b10",
            "title": "A review of tree convex sets test",
            "authors": [
                {
                    "first": "F",
                    "middle": [
                        "S"
                    ],
                    "last": "Bao",
                    "suffix": ""
                },
                {
                    "first": "Y",
                    "middle": [],
                    "last": "Zhang",
                    "suffix": ""
                }
            ],
            "year": 2012,
            "venue": "Comput. Intell",
            "volume": "28",
            "issn": "3",
            "pages": "358--372",
            "other_ids": {}
        },
        "BIBREF11": {
            "ref_id": "b11",
            "title": "Linear degree extractors and the inapproximability of max clique and chromatic number",
            "authors": [
                {
                    "first": "D",
                    "middle": [],
                    "last": "Zuckerman",
                    "suffix": ""
                }
            ],
            "year": 2006,
            "venue": "Proceedings of the Thirty-Eighth Annual ACM Symposium on Theory of Computing",
            "volume": "",
            "issn": "",
            "pages": "681--690",
            "other_ids": {}
        }
    },
    "ref_entries": {
        "FIGREF0": {
            "text": "Matching Problem Instance: A graph G = (V, E). Solution: An acyclic matching M in G. Measure: Cardinality of the set M . Acyclic Matching Decide Problem Instance: A graph G = (V, E) and a positive integer k. Question: Does there exist an acyclic matching M in G of size at least k?",
            "latex": null,
            "type": "figure"
        },
        "FIGREF1": {
            "text": "The Acyclic Matching Decide Problem is NP-complete for comb-convex bipartite graphs.",
            "latex": null,
            "type": "figure"
        },
        "FIGREF2": {
            "text": "Let G = (V, E) be a split graph and let M be a maximum acyclic matching in G. Then, |M | = 2 if and only if there exist a pair of vertices",
            "latex": null,
            "type": "figure"
        },
        "FIGREF3": {
            "text": "define a matching M = {v 1 c 1 , v 2 c 2 }. It is easy to see that G[{v 1 , c 1 , v 2 , c 2 }] contains no cycle, and hence M is acyclic. \u2666 Theorem 3. Let G = (V, E) be a split graph and let M be a maximum acyclic matching in G. Then, |M | = 1 if and only if G is a threshold graph.",
            "latex": null,
            "type": "figure"
        },
        "FIGREF4": {
            "text": "A maximum size acyclic matching in a split graph G = (V, E) can be computed in O(|V | + |E|) time.",
            "latex": null,
            "type": "figure"
        },
        "FIGREF5": {
            "text": "Let \u03c3 = (v 1 , v 2 , . . . , v n ) be a BCO of a proper interval graph G and let L[v i ] denotes the last neighbor of a vertex v i in \u03c3. If M is an acyclic matching in G, then at most two vertices from the set {v i , v i+1 , . . . , L[v i ]} can be saturated by M .",
            "latex": null,
            "type": "figure"
        },
        "FIGREF6": {
            "text": "Let G be a proper interval graph with a BCO \u03c3 = (v 1 , v 2 , . . . , v n ) and let M be a maximum acyclic matching in G. Then, there exists an acyclic matching M in G such that v 1 v 2 \u2208 M and |M | = |M |.",
            "latex": null,
            "type": "figure"
        },
        "FIGREF7": {
            "text": "then we are done. Otherwise, again replace the edge v a v 2 by v 1 v 2 in M .By Observation 6 and Lemma 3, it is easy to see that we can replace the edge v a v b with the desired edges in the cases mentioned above. \u2666 Let \u03c3 = (v 1 , v 2 , . . . , v n ) be a BCO of a proper interval graph G and let \u03c3",
            "latex": null,
            "type": "figure"
        },
        "FIGREF8": {
            "text": "proper interval graph G, then the edge v a v b is contained in some maximum acyclic matching of G .Based on the above lemmas, we now present a linear time algorithm AM-PIG(G), which computes an acyclic matching of maximum size in a given proper interval graph G. The pseudocode of the algorithm is given below:Algorithm 1. AM-PIG(G) Input: A proper interval graph G1 with BCO \u03c3(G1) = (v1,v2, . . . , vn); Output: A Maximum Acyclic Matching M ; M = \u2205, i = 1, v + 1=vertex next to vertex v in \u03c3(Gi) for i \u2265 1; F [Gi]= first vertex in the BCO \u03c3(Gi) of graph Gi for i \u2265 1; L[v] = last neighbor of vertex v in \u03c3(Gi) for i \u2265 1; while (|Gi| \u2265 2) do M = M \u222a {F [Gi](F [Gi] + 1)}; if (L[F [Gi]] = L[F [Gi] + 1]) or (L[F [Gi]] + 1 = L[F [Gi] + 1]) then i = i + 1; Gi = Gi\u22121 \\ {F [Gi\u22121], . . . , L[F [Gi\u22121]]}; else if ((L[F [Gi]] + 1 = v k ) < L[F [Gi] + 1] < L[v k ]) then i = i + 1; Gi = Gi\u22121 \\ ({F [Gi\u22121], . . . , L[F [Gi\u22121]]} \u222a {v k+1 , . . . , L[F [Gi\u22121] + 1]});",
            "latex": null,
            "type": "figure"
        },
        "FIGREF9": {
            "text": ". . . , L[F [Gi] + 1]}; return M ; Theorem 8. Given a proper interval graph G 1 with BCO \u03c3(G 1 ), AM-PIG(G 1 ) correctly computes a maximum size acyclic matching in G 1 .",
            "latex": null,
            "type": "figure"
        },
        "FIGREF10": {
            "text": "be an instance of the Maximum Independent Set Problem. We construct a graph H = (V H , E H ), an instance of the Acyclic Matching Problem, in the following way:",
            "latex": null,
            "type": "figure"
        },
        "FIGREF11": {
            "text": "Let H be the graph obtained from a given graph G by Construction 1. If M is an acyclic matching in H, then there exists an acyclic matching M in H such that |M | = |M | and M contains edges of T ype-I and T ype-II only. Proof. First, let us suppose that M is an acyclic matching in H and let M contains an edge (say v i v j ) of T ype-IV . Since M is acyclic and v i v j \u2208 M , both v i and v j are unsaturated by M . Let M = (M \\ {v i v j }) \u222a {v i v j }. If G[V H (M )] is acyclic, then we are done. So, assume that G[V H (M )] contains a cycle C. If C does not contain the vertex v j , then C is also a cycle in G[V H (M )]. This contradicts the fact that M is an acyclic matching. So, C contains the ver-",
            "latex": null,
            "type": "figure"
        },
        "FIGREF12": {
            "text": "Let H be the graph obtained from a given graph G by Construction 1. If M is an acyclic matching in H containing edges of T ype-I and T ype-II only, then there exists an acyclic matching M in H such that |M | = |M | and M contains edges of T ype-I only.",
            "latex": null,
            "type": "figure"
        },
        "FIGREF13": {
            "text": "Let H be the graph obtained from a given graph G by Construction 1. Then, G has an independent set of size at least k if and only if H has an acyclic matching of size at least k. Proof. Necessity: Let I = {v 1 , v 2 , . . . , v l } be an independent set in G of size at least k. Define a matching M = {v 1 v 1 , v 2 v 2 , . . . , v l v l } in H. It is easy to see that M is an acyclic matching as G[V (M )] is a disjoint union of K 2 s. Sufficiency: Let M = {e 1 , e 2 , . . . , e l } be an acyclic matching in H of size at least k. By Lemma 6, there exists an acyclic matching M in H such that |M | = |M | and M contains edges of T ype-I only. Define a set I = {v i | v i v i \u2208 M }. It is easy to see that I is an independent set of graph G. \u2666 Corollary 3. G has a maximum independent set of size k if and only if H has a maximum acyclic matching of size k. Theorem 10. The Acyclic Matching Problem for a graph G cannot be approximated within a factor of n 1\u2212 for any > 0, unless P = NP . Proof. Let G = (V, E) be a graph with n vertices. Construct a graph H = (V H , E H ) with |V H | =n from G using Construction 1. Let I * denotes a maximum independent set in G and M * denotes a maximum acyclic matching in H. Now, let us suppose that the Acyclic Matching Problem can be approximated within a ratio \u03b1 \u2265 1 by using an algorithm ALG, where \u03b1 = n 1\u2212 for some fixed > 0. If M ALG (H) is an acyclic matching in H obtained by applying algorithm ALG, then |M * (H)| \u2264 \u03b1|M ALG (H)|. By Corollary 3, |I * (G)| = |M * (H)|. By Lemma 7, we can construct an independent set I ALG of G corresponding to M ALG of H such that |M ALG (H)| = |I ALG (G)|.",
            "latex": null,
            "type": "figure"
        },
        "FIGREF14": {
            "text": "Approx-AM(G) Input: A graph G = (V, E); Output: An acyclic matching Mac in G; Mac = \u2205; while (E = \u2205) do Choose an edge e = uv from E; Mac = Mac \u222a {uv}; V = V \\ (NG(u) \u222a NG(v)); return Mac. Lemma 8. The algorithm Approx-AM(G) produces an acyclic matching of G in polynomial time. Proof. For any pair of edges in M ac , say e i =a i b i and e j = a j b j , G[{a i , b i , a j , b j }]is a disjoint union of K 2 s. \u2666 Lemma 9. The Acyclic Matching Problem for a k-regular graph G can be approximated with an approximation ratio of 2k(k\u22121)+1 k , where k is a constant.",
            "latex": null,
            "type": "figure"
        },
        "TABREF0": {
            "text": "Let M be an acyclic matching in H of size at least k. If M does not have an edge from the edge set E then M is a required acyclic matching in G. Otherwise, note that M can include at most one edge from the edge set E . To the contrary, if {x i",
            "latex": null,
            "type": "table"
        }
    },
    "back_matter": []
}