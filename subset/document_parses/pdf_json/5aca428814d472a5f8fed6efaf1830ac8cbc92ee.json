{
    "paper_id": "5aca428814d472a5f8fed6efaf1830ac8cbc92ee",
    "metadata": {
        "title": "Threat Modeling and Security Analysis of Containers: A Survey",
        "authors": [
            {
                "first": "Ann",
                "middle": [
                    "Yi"
                ],
                "last": "Wong",
                "suffix": "",
                "affiliation": {
                    "laboratory": "",
                    "institution": "Singapore University of Technology and Design",
                    "location": {
                        "postCode": "487372",
                        "country": "Singapore, Singapore"
                    }
                },
                "email": "annyi_wong@mymail.sutd.edu.sg"
            },
            {
                "first": "Eyasu",
                "middle": [
                    "Getahun"
                ],
                "last": "Chekole",
                "suffix": "",
                "affiliation": {
                    "laboratory": "",
                    "institution": "Singapore University of Technology and Design",
                    "location": {
                        "postCode": "487372",
                        "country": "Singapore, Singapore"
                    }
                },
                "email": ""
            },
            {
                "first": "Mart\u00edn",
                "middle": [],
                "last": "Ochoa",
                "suffix": "",
                "affiliation": {
                    "laboratory": "",
                    "institution": "ETH Zurich",
                    "location": {
                        "postCode": "8092",
                        "settlement": "Zurich",
                        "country": "Switzerland"
                    }
                },
                "email": "martin.ochoa@inf.ethz.ch"
            },
            {
                "first": "Jianying",
                "middle": [],
                "last": "Zhou",
                "suffix": "",
                "affiliation": {
                    "laboratory": "",
                    "institution": "Singapore University of Technology and Design",
                    "location": {
                        "postCode": "487372",
                        "country": "Singapore, Singapore"
                    }
                },
                "email": "jianying_zhou@sutd.edu.sg"
            }
        ]
    },
    "abstract": [
        {
            "text": "Traditionally, applications that are used in large and small enterprises were deployed on \"bare metal\" servers installed with operating systems. Recently, the use of multiple virtual machines (VMs) on the same physical server was adopted due to cost reduction and flexibility. Nowadays, containers have become popular for application deployment due to smaller footprints than the VMs, their ability to start and stop more quickly, and their capability to pack the application binaries and their dependencies/libraries in standalone units for seamless portability. A typical container ecosystem includes a code repository (e.g., GitHub) where the container images are built from the codes and libraries and then pushed to the image registry (e.g., Docker Hub) for subsequent deployment as application containers. However, the pervasive use of containers also leads to a wide-range of security breaches such as attackers stealing credentials, source codes and sensitive data from image registry and code repository, carrying out DoS attacks on application containers, and gaining root access to misuse the underlying host resources, among others. In this paper, we first perform threat modeling on the containers ecosystem using the popular threat modeling framework, called STRIDE. Using STRIDE, we identify the vulnerabilities in each system component, and investigate potential security threats and their consequences. Then, we conduct a comprehensive survey on the existing countermeasures designed against the identified threats and vulnerabilities in containers. In particular, we assess the strengths and weaknesses of the existing mitigation strategies designed against such threats. We believe that this work will help researchers and practitioners to gain a deeper understanding of the threat landscape in containers and the state-of-the-art countermeasures. We also discuss open research problems, the research gaps and future research directions in containers security, which may ignite further research to be done in this area.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Abstract"
        }
    ],
    "body_text": [
        {
            "text": "Many enterprises have started to deploy applications in containers. Some popular examples are Gmail, YouTube, Google Search [74], Netflix [78] , and PayPal financial services [5] , among others. Running an application in a container allows its binaries, libraries, and other dependencies to be abstracted from the operating environment and hence be portable from a developer notebook to the on-prem data centre and the public cloud. Therefore, containerization allows an application to be deployed efficiently and scaled easily. Gartner, a leading research and advisory company in information technology and cybersecurity forecasts that 15% of all applications will be running in containers by 2024, up from 5% in 2020 [165] . Gartner also forecasts that 75% of large enterprises globally will deploy production application in containers by 2022, up from less than 30% in 2020 [165] . The most widely employed container runtime is Docker at 79% share of the market [160] .",
            "cite_spans": [
                {
                    "start": 138,
                    "end": 142,
                    "text": "[78]",
                    "ref_id": null
                },
                {
                    "start": 175,
                    "end": 178,
                    "text": "[5]",
                    "ref_id": "BIBREF4"
                },
                {
                    "start": 719,
                    "end": 724,
                    "text": "[165]",
                    "ref_id": null
                },
                {
                    "start": 877,
                    "end": 882,
                    "text": "[165]",
                    "ref_id": null
                },
                {
                    "start": 965,
                    "end": 970,
                    "text": "[160]",
                    "ref_id": null
                }
            ],
            "ref_spans": [],
            "section": "Introduction"
        },
        {
            "text": "Although containers are revolutionizing enterprises and other systems, they also have several weaknesses and vulnerabilities that expose them to a wide-range of cyberattacks. A recent report [8] revealed that about 51% of around 4 million images in Docker Hub have exploitable vulnerabilities of which 0.16% or 6,432 images had malicious software which were primarily cryptocurrency miner. The attackers could insert malicious images directly on misconfigured hosts [8] , [60] or into Docker Hub due to the ease of pushing and pulling images to and from it without controls [8] . In another report [25] , a cybersecurity team discovered through its regular monitoring that by the end of 2019, a hacker group scanned more than 59,000 IP networks on a large scale to find exposed Docker API endpoints. Most containers are also configured with default network settings, making it easy to establish remote connections . This was discovered by TeamTNT (a cybercrime group) and used it as a backdoor to run crypto-mining malware on the underlying system to generate cryptocurrencies [161] . As of the date of this paper, there are 428 container related security vulnerabilities listed in MITRE CVE [109] .",
            "cite_spans": [
                {
                    "start": 191,
                    "end": 194,
                    "text": "[8]",
                    "ref_id": "BIBREF6"
                },
                {
                    "start": 466,
                    "end": 469,
                    "text": "[8]",
                    "ref_id": "BIBREF6"
                },
                {
                    "start": 472,
                    "end": 476,
                    "text": "[60]",
                    "ref_id": "BIBREF31"
                },
                {
                    "start": 574,
                    "end": 577,
                    "text": "[8]",
                    "ref_id": "BIBREF6"
                },
                {
                    "start": 598,
                    "end": 602,
                    "text": "[25]",
                    "ref_id": "BIBREF21"
                },
                {
                    "start": 1077,
                    "end": 1082,
                    "text": "[161]",
                    "ref_id": null
                },
                {
                    "start": 1192,
                    "end": 1197,
                    "text": "[109]",
                    "ref_id": null
                }
            ],
            "ref_spans": [],
            "section": "Introduction"
        },
        {
            "text": "Several real-world cyberattacks have also been reported on containers. In 2018, attackers hacked into Tesla's container orchestration console of Kubernetes and installed crypto-mining software to mine cryptocurrency using its cloud computing resources [135] . Consequently, the U.S. government National Security Agency (NSA) also alerted industries over a foreign-based cybercrime group APT28's massive attacks on containers that run in Kubernetes clusters [113] . In 2019, other attackers hacked into Docker Hub and gained access to usernames and passwords of 190,000 user accounts [104] . An attacker can then use the compromised Docker instance as a backdoor to spin the container, which will install the XMRRig cryptocurrency miner for illegal mining [25] . There were also many other critical attacks that had been launched on containers and their subsystems [154] , [83] , [110] , [128] , [130] , [19] , [103] , [90] , [101] , [138] , [102] , [127] , [103] , [65] , [118] . These and other real-world examples show how security is a critical concern in container systems, beyond the conventional IT systems.",
            "cite_spans": [
                {
                    "start": 252,
                    "end": 257,
                    "text": "[135]",
                    "ref_id": "BIBREF88"
                },
                {
                    "start": 457,
                    "end": 462,
                    "text": "[113]",
                    "ref_id": "BIBREF65"
                },
                {
                    "start": 583,
                    "end": 588,
                    "text": "[104]",
                    "ref_id": "BIBREF59"
                },
                {
                    "start": 755,
                    "end": 759,
                    "text": "[25]",
                    "ref_id": "BIBREF21"
                },
                {
                    "start": 864,
                    "end": 869,
                    "text": "[154]",
                    "ref_id": null
                },
                {
                    "start": 872,
                    "end": 876,
                    "text": "[83]",
                    "ref_id": null
                },
                {
                    "start": 879,
                    "end": 884,
                    "text": "[110]",
                    "ref_id": "BIBREF63"
                },
                {
                    "start": 887,
                    "end": 892,
                    "text": "[128]",
                    "ref_id": "BIBREF82"
                },
                {
                    "start": 895,
                    "end": 900,
                    "text": "[130]",
                    "ref_id": null
                },
                {
                    "start": 903,
                    "end": 907,
                    "text": "[19]",
                    "ref_id": null
                },
                {
                    "start": 910,
                    "end": 915,
                    "text": "[103]",
                    "ref_id": "BIBREF58"
                },
                {
                    "start": 918,
                    "end": 922,
                    "text": "[90]",
                    "ref_id": "BIBREF45"
                },
                {
                    "start": 925,
                    "end": 930,
                    "text": "[101]",
                    "ref_id": "BIBREF56"
                },
                {
                    "start": 933,
                    "end": 938,
                    "text": "[138]",
                    "ref_id": "BIBREF89"
                },
                {
                    "start": 941,
                    "end": 946,
                    "text": "[102]",
                    "ref_id": "BIBREF57"
                },
                {
                    "start": 949,
                    "end": 954,
                    "text": "[127]",
                    "ref_id": "BIBREF81"
                },
                {
                    "start": 957,
                    "end": 962,
                    "text": "[103]",
                    "ref_id": "BIBREF58"
                },
                {
                    "start": 965,
                    "end": 969,
                    "text": "[65]",
                    "ref_id": "BIBREF35"
                },
                {
                    "start": 972,
                    "end": 977,
                    "text": "[118]",
                    "ref_id": "BIBREF71"
                }
            ],
            "ref_spans": [],
            "section": "Introduction"
        },
        {
            "text": "To alleviate the security concerns, several research works have been done on containers security, some focusing on vulnerability analysis [32] , [58] , [166] , [63] , [150] , [98] , [18] , [108] , and others on mitigation strategies [114] , [126] , [17] , [ [11] , [13] , [148] , [103] , [30] , [47] , [96] . However, most of the related works only focus on a specific vulnerability, threat, use-case or subsystem of containers. Hence, they do not provide a comprehensive security analysis on the entire container ecosystem (spanning image creation to distribution processes). In addition, most of the existing mitigation strategies already have certain flaws and limitations. For example, recent studies revealed that the existing Linux-based mitigation strategies used in containers, such as cgroups, namespaces and capabilities, are subjected to attacks resulting in resources exploitations and denials of services [65] , [103] . Furthermore, some are probably outdated and may not reflect the latest threat landscape as shown in the example of [17] , which suggests that the Docker container is fairly secure with the default configuration but it is in fact exploitable in today's context [149] . Therefore, the existing works might not provide a comprehensive security analysis and state-of-the-art information on the security landscape of the containers ecosystem.",
            "cite_spans": [
                {
                    "start": 138,
                    "end": 142,
                    "text": "[32]",
                    "ref_id": "BIBREF26"
                },
                {
                    "start": 145,
                    "end": 149,
                    "text": "[58]",
                    "ref_id": "BIBREF29"
                },
                {
                    "start": 152,
                    "end": 157,
                    "text": "[166]",
                    "ref_id": null
                },
                {
                    "start": 160,
                    "end": 164,
                    "text": "[63]",
                    "ref_id": "BIBREF34"
                },
                {
                    "start": 167,
                    "end": 172,
                    "text": "[150]",
                    "ref_id": null
                },
                {
                    "start": 175,
                    "end": 179,
                    "text": "[98]",
                    "ref_id": "BIBREF53"
                },
                {
                    "start": 182,
                    "end": 186,
                    "text": "[18]",
                    "ref_id": "BIBREF16"
                },
                {
                    "start": 189,
                    "end": 194,
                    "text": "[108]",
                    "ref_id": null
                },
                {
                    "start": 233,
                    "end": 238,
                    "text": "[114]",
                    "ref_id": "BIBREF66"
                },
                {
                    "start": 241,
                    "end": 246,
                    "text": "[126]",
                    "ref_id": "BIBREF80"
                },
                {
                    "start": 249,
                    "end": 253,
                    "text": "[17]",
                    "ref_id": "BIBREF15"
                },
                {
                    "start": 256,
                    "end": 257,
                    "text": "[",
                    "ref_id": null
                },
                {
                    "start": 258,
                    "end": 262,
                    "text": "[11]",
                    "ref_id": "BIBREF9"
                },
                {
                    "start": 265,
                    "end": 269,
                    "text": "[13]",
                    "ref_id": "BIBREF11"
                },
                {
                    "start": 272,
                    "end": 277,
                    "text": "[148]",
                    "ref_id": "BIBREF98"
                },
                {
                    "start": 280,
                    "end": 285,
                    "text": "[103]",
                    "ref_id": "BIBREF58"
                },
                {
                    "start": 288,
                    "end": 292,
                    "text": "[30]",
                    "ref_id": null
                },
                {
                    "start": 295,
                    "end": 299,
                    "text": "[47]",
                    "ref_id": null
                },
                {
                    "start": 302,
                    "end": 306,
                    "text": "[96]",
                    "ref_id": "BIBREF51"
                },
                {
                    "start": 918,
                    "end": 922,
                    "text": "[65]",
                    "ref_id": "BIBREF35"
                },
                {
                    "start": 925,
                    "end": 930,
                    "text": "[103]",
                    "ref_id": "BIBREF58"
                },
                {
                    "start": 1048,
                    "end": 1052,
                    "text": "[17]",
                    "ref_id": "BIBREF15"
                },
                {
                    "start": 1193,
                    "end": 1198,
                    "text": "[149]",
                    "ref_id": null
                }
            ],
            "ref_spans": [],
            "section": "Introduction"
        },
        {
            "text": "In this work, we make a systematic and comprehensive survey on the security of containers, covering vulnerabilities, threats, threat consequences and existing mitigation strategies, to provide a comprehensive and state-of-the-art information on the security landscape of containers. To be able to specify the scope of our survey and map existing literature, we first perform threat modeling on the containers ecosystem. In particular, we study the threat landscape of the containers supply chain process -spanning code repository to image registry and then deployment processes -using the STRIDE (Spoofing, Tampering, Repudiation, Information disclosure, Denial of service, and Elevation of privilege) threat modeling framework. We choose STRIDE as it is one of the most mature threat modeling framework, which has also been widely used in the Microsoft Secure Development Lifecycle [139] [134] . STRIDE has also been successfully adopted by several research works [91] , [144] , [106] , [88] . Using STRIDE, we first design a data flow diagram (DFD) of the container system to map its components and their relationship via the flow of data. We then conduct a wide-range of security analysis on each component to discover the vulnerabilities, the associated threat actions and the resulting consequences.",
            "cite_spans": [
                {
                    "start": 883,
                    "end": 888,
                    "text": "[139]",
                    "ref_id": "BIBREF90"
                },
                {
                    "start": 889,
                    "end": 894,
                    "text": "[134]",
                    "ref_id": "BIBREF87"
                },
                {
                    "start": 965,
                    "end": 969,
                    "text": "[91]",
                    "ref_id": "BIBREF46"
                },
                {
                    "start": 972,
                    "end": 977,
                    "text": "[144]",
                    "ref_id": "BIBREF95"
                },
                {
                    "start": 980,
                    "end": 985,
                    "text": "[106]",
                    "ref_id": "BIBREF61"
                },
                {
                    "start": 988,
                    "end": 992,
                    "text": "[88]",
                    "ref_id": "BIBREF43"
                }
            ],
            "ref_spans": [],
            "section": "Introduction"
        },
        {
            "text": "After completing our threat modeling, we then conduct a comprehensive survey on the vulnerabilities and security threats identified. In particular, we analyze and discuss the effectiveness and limitations of existing mitigation strategies designed against the vulnerabilities and threats identified through our threat modeling. Furthermore, we highlight open security problems and future research directions in containers security, which may motivate the community to carry out further research in this area.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Introduction"
        },
        {
            "text": "In sum, we believe that this work would provide a comprehensive and state-of-the-art information to researchers and practitioners on the latest security landscape of container systems. This can help the community to better understand the latest security issues in containers and the available mitigation strategies to counter them.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Introduction"
        },
        {
            "text": "Organization: The rest of the paper is structured as follows: Section 2 provides relevant background information on containers, STRIDE framework, and related works on containers security. Section 3 discusses our threat modeling of the container ecosystem using the STRIDE framework. Section 4 investigates the existing mitigation solutions and analyses their limitations. In Section 5, we summarize the results of our survey, and highlight future research directions. Finally, Section 6 concludes our paper.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Introduction"
        },
        {
            "text": "A container is an independent, self-sufficient package for running an application or service. It includes the application binaries, the software libraries or dependencies, and the hardware requirements needed to run it, all combined into a self-contained unit. The key capabilities which enable a container to perform its function securely and efficiently (i.e., without resource constraints) are namespaces and control groups (cgroups). Namespaces provide process isolation and enable multiple application processes in containers to share a single host instance. On the other hand, cgroups allocate the host resources, such as CPU and memory, among the processes [79] .",
            "cite_spans": [
                {
                    "start": 664,
                    "end": 668,
                    "text": "[79]",
                    "ref_id": null
                }
            ],
            "ref_spans": [],
            "section": "Overview of Containers"
        },
        {
            "text": "Containers are receiving high popularity and being widely adopted by various enterprises. This is mainly because of the following reasons: (a) a container is more lightweight than a virtual machine and therefore starts and stops much faster; (b) a container is portable as it includes the application and all its dependencies, libraries and binaries packaged into a runtime environment, therefore allowing it to run anywhere from a desktop to a datacentre; (c) a containerized application is scalable and can easily add or reduce the number of containers to meet varying demands.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Overview of Containers"
        },
        {
            "text": "The industry's main use of containers are often tied to microservices and the cloud. Containerization supports the microservices architecture very well [72] . Microservices structure an application into a set of loosely coupled software services that run in containers [100] . The entire container platform and the microservice architecture are typically deployed in the cloud infrastructure as it is scalable and resilient. IBM forecasts that within the next two years, 59% of all enterprise applications will be developed with microservices [80], further spurring the growth of container usage. There are many enterprise-level implementations of microservices on containers, and some prominent examples are Amazon, Netflix, The Guardian, Twitter, PayPal, Tencent, Baidu, Taobao, etc. [100] .",
            "cite_spans": [
                {
                    "start": 152,
                    "end": 156,
                    "text": "[72]",
                    "ref_id": "BIBREF41"
                },
                {
                    "start": 269,
                    "end": 274,
                    "text": "[100]",
                    "ref_id": "BIBREF55"
                },
                {
                    "start": 786,
                    "end": 791,
                    "text": "[100]",
                    "ref_id": "BIBREF55"
                }
            ],
            "ref_spans": [],
            "section": "Overview of Containers"
        },
        {
            "text": "STRIDE is a threat modeling framework developed by Microsoft to be used by its developers during the software development life cycle. More specifically, it is used to identify and analyze vulnerabilities and threats with respect to the authentication, authorization, confidentiality, integrity, non-repudiation and availability security properties. The STRIDE threat modeling can be performed using the STRIDE-per-element or STRIDE-per-interaction approaches [91] . The former is used to analyze threats on system components, and the latter is used to analyse threats on the interaction between a pair of components. A STRIDE threat modeling is performed using the data flow diagram (DFD) of the system. A DFD is a visual representation to show the flow of information or data through a process or system [162] . It uses four symbols to represent system components and their relationship with others: (a) external entity such as the developer, endpoints, attacker, (b) process such as the application, a functionality, (c) data flow, which is the communication data, and (d) data store such as database, logs, and files [91] .",
            "cite_spans": [
                {
                    "start": 459,
                    "end": 463,
                    "text": "[91]",
                    "ref_id": "BIBREF46"
                },
                {
                    "start": 805,
                    "end": 810,
                    "text": "[162]",
                    "ref_id": null
                },
                {
                    "start": 1120,
                    "end": 1124,
                    "text": "[91]",
                    "ref_id": "BIBREF46"
                }
            ],
            "ref_spans": [],
            "section": "Overview of STRIDE"
        },
        {
            "text": "In general, threat modeling using the STRIDE framework involves the following main steps: (a) drawing the DFD of the system; (b) identifying vulnerabilities on each DFD component; (c) analyzing potential threats that exploit the vulnerabilities; (d) proposing mitigation strategies for the vulnerabilities and threats identified [91] .",
            "cite_spans": [
                {
                    "start": 329,
                    "end": 333,
                    "text": "[91]",
                    "ref_id": "BIBREF46"
                }
            ],
            "ref_spans": [],
            "section": "Overview of STRIDE"
        },
        {
            "text": "As highlighted in the introduction, containers are vulnerable to a wide-range of cyber threats. The threats may target various attack surfaces in containers and their subsystems. The main attack surfaces of containers are user credentials, application codes, container images, container privileges, repositories, and network channels [64] . For example, stolen user credentials at the GitHub and Docker Hub can lead to user's account being hijacked or spoofed, resulting in malicious codes and images to be uploaded into these registries. An attacker may also use a compromised container as a backdoor to do illegal activities on other containers. This means that if the attacker gets access to the compromised container, it can penetrate to the host kernel and launch other containers for illegitimate purposes, e.g., crypto-mining [25] . The application code is another attack surface where bad coding practices can result in vulnerabilities like SQL injection, cross-site scripting, and server-side request forgery, among others. The Docker Hub is a popular registry for about four million of images and there are almost half which contain malware [8] . Some malicious images can stay online in Docker Hub for a year and while some have been installed for more than a million times [23] . Therefore, if a developer creates a multi-stage Dockerfile and uses multiple images without proper scanning, he may create a container with embedded vulnerabilities. An attacker can then gain access to a compromised container and raises its privilege to gain root access to the host kernel. Lastly, there are network-related threats in the virtual ethernet bridge connected between the containers and from the internet into the container.",
            "cite_spans": [
                {
                    "start": 334,
                    "end": 338,
                    "text": "[64]",
                    "ref_id": null
                },
                {
                    "start": 833,
                    "end": 837,
                    "text": "[25]",
                    "ref_id": "BIBREF21"
                },
                {
                    "start": 1151,
                    "end": 1154,
                    "text": "[8]",
                    "ref_id": "BIBREF6"
                },
                {
                    "start": 1285,
                    "end": 1289,
                    "text": "[23]",
                    "ref_id": "BIBREF19"
                }
            ],
            "ref_spans": [],
            "section": "Literature Review on Security of Containers"
        },
        {
            "text": "There are a wide-range of related works on containers security. Below, we discuss the most relevant ones. To simplify our discussion, we categorize them as \"vulnerability analysis\" and \"mitigation strategies\".",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Literature Review on Security of Containers"
        },
        {
            "text": "There are several existing works focusing mainly on the investigation and analysis of threats and vulnerabilities around the container ecosystem. One research initiative [98] gathered 223 container related exploits from a public database 3 and classified them into a two-dimensional attack taxonomy. One dimension was the hierarchical layers of web app, server, library and kernel, and the other dimension was the consequences of attacks, such as sensitive information leakage, remote control, denial of service, and kernel privilege escalation. However, the main emphasis of this work was on the privilege escalation exploits and how to configure the kernel security mechanisms to defend against them.",
            "cite_spans": [
                {
                    "start": 170,
                    "end": 174,
                    "text": "[98]",
                    "ref_id": "BIBREF53"
                }
            ],
            "ref_spans": [],
            "section": "Vulnerability analysis"
        },
        {
            "text": "Another study [32] was conducted on attacks that mainly target the Docker platform and the image distribution process. The study revealed that insecure configurations and weak access controls of the Docker platform can lead to unauthorised access to the host filesystems and network stack of the container. Automated builds and the use of webhooks during image distribution was shown to allow a tampered code to be deployed in a production server within minutes. However, this study only focuses on threats to the Docker platform in containers. Therefore, it is not comprehensive enough to cover the multifaceted threats facing the container ecosystem from image creation to image distribution.",
            "cite_spans": [
                {
                    "start": 14,
                    "end": 18,
                    "text": "[32]",
                    "ref_id": "BIBREF26"
                }
            ],
            "ref_spans": [],
            "section": "Vulnerability analysis"
        },
        {
            "text": "MITRE recently released the Adversarial Tactics, Techniques, and Common Knowledge (ATT&CK) for containers. It categorized the attacks techniques on containers and the orchestration manager (Kubernetes) under initial access, execution, persistence, privilege escalation, defense evasion, credential access, discovery and impact [18] , [108] . However, the MITRE framework only focuses on the adversary techniques and does not trace the use-case of containers nor recommends context-relevant mitigation actions.",
            "cite_spans": [
                {
                    "start": 327,
                    "end": 331,
                    "text": "[18]",
                    "ref_id": "BIBREF16"
                },
                {
                    "start": 334,
                    "end": 339,
                    "text": "[108]",
                    "ref_id": null
                }
            ],
            "ref_spans": [],
            "section": "Vulnerability analysis"
        },
        {
            "text": "Another research was conducted on the security of the Docker platform by analyzing the vulnerabilities listed in Common Vulnerabilities and Exposure (CVE) [58] . In this work, the authors used static code analysis (SCA) tools on the vulnerable and patched versions of the Docker's code-base in order to study the differences between the two and the effectiveness of SCA tools in detecting the vulnerabilities. This study primarily used static code analysis tools to analyze Docker's source-code and did not relate them to real use-cases nor recommend practical mitigation plans. A survey by Sultan et al. [150] was also conducted on the security of containers based on a four-dimensional risk analysis: risks from the application in the container, risks from another container, risks from a container to the host, and risks from the host to the container.",
            "cite_spans": [
                {
                    "start": 155,
                    "end": 159,
                    "text": "[58]",
                    "ref_id": "BIBREF29"
                },
                {
                    "start": 605,
                    "end": 610,
                    "text": "[150]",
                    "ref_id": null
                }
            ],
            "ref_spans": [],
            "section": "Vulnerability analysis"
        },
        {
            "text": "Wist et al.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Vulnerability analysis"
        },
        {
            "text": "[166] scanned 2,500 Docker Hub images, mapped their vulnerabilities using the Common Vulnerability Scoring System (CVSS), and compared the vulnerabilities across the types of images, the types of scripting languages, and packages. In another research, Flauzac et al. [63] reviewed the native containers security by conducting a static comparison of 6 container runtime solutions, namely LXC (Linux Containers), LXD (an open-source container management extension for LXC), Singularity, Docker (runc), Kata-containers (kata-runtime) and gVisor(runsc), in terms of their abilities to isolate system resources such as storage, network, processor, and memory. However, this is carried out in the container's default and standalone state and therefore does not reflect a real operating environment that is used by a container.",
            "cite_spans": [
                {
                    "start": 267,
                    "end": 271,
                    "text": "[63]",
                    "ref_id": "BIBREF34"
                }
            ],
            "ref_spans": [],
            "section": "Vulnerability analysis"
        },
        {
            "text": "While there are several vulnerabilities and threats in the container ecosystem, there are also certain mitigation strategies developed against them. Some of the mitigation strategies, e.g., namespaces and cgroups, are built-in to the container's host operating system. The container's namespaces isolate the resources of inter-process communication (IPC), mount (or filesystems), process identifier (PID), network, user (User and Group IDs), and UTS (hostnames and domain names). The cgroups control the amount of resources (like the CPU, memory, disk I/O) a container can use so that other co-resident containers can obtain their fair share of the resources [75] .",
            "cite_spans": [
                {
                    "start": 659,
                    "end": 663,
                    "text": "[75]",
                    "ref_id": null
                }
            ],
            "ref_spans": [],
            "section": "Mitigation strategies"
        },
        {
            "text": "The other mitigation strategies are the underlying security features of the host kernel. These include capabilities, secure computing mode (seccomp), security-enhanced Linux (SELinux) and AppArmor [75]. The \"capabilities\" are list of privileges that can be enabled or disabled for a process, and they serve to limit a root-enabled process from getting more than the minimum permissions required for it to perform its function. The secure computing mode (seccomp) helps to filter the system calls to the kernel from the container [96] . It provides a finer control than capabilities and restricts the number of system calls an attacker may perform from the container to the kernel [126] . SELinux is integrated in Centos/RHEL/Fedora distros, and it provides mandatory access control (MAC) policy setting for the applications, processes, and files in a container such that it can prevent root-enabled process within a container to illegitimately access objects outside. AppArmor is integrated in Debian/Ubuntu distros, and it is an alternative MAC to SELinux. While SELinux applies security rules on files, AppArmor applies the rules on file paths.",
            "cite_spans": [
                {
                    "start": 529,
                    "end": 533,
                    "text": "[96]",
                    "ref_id": "BIBREF51"
                },
                {
                    "start": 680,
                    "end": 685,
                    "text": "[126]",
                    "ref_id": "BIBREF80"
                }
            ],
            "ref_spans": [],
            "section": "Mitigation strategies"
        },
        {
            "text": "However, recent studies revealed that most of the existing mitigation strategies of containers have certain flaws and limitations. For example, the Linux-based mitigation strategies used in containers, such as cgroups, namespaces and capabilities, are subjected to attacks resulting in resources exploitations, denials of services, and privilege escalation [65] , [103] , [149] . Thanh Bui [17] discovered that a container cannot achieve effective security by using only the built-in security features of the host operating system, such as namespaces and cgroups. But, it should also use firewall rules (e.g., ebtables), MAC measures (e.g., SELinux or AppArmor), and run in a \"non-privileged\" mode. A detailed discussion of other existing mitigation strategies is also provided in Section 4.",
            "cite_spans": [
                {
                    "start": 357,
                    "end": 361,
                    "text": "[65]",
                    "ref_id": "BIBREF35"
                },
                {
                    "start": 364,
                    "end": 369,
                    "text": "[103]",
                    "ref_id": "BIBREF58"
                },
                {
                    "start": 372,
                    "end": 377,
                    "text": "[149]",
                    "ref_id": null
                },
                {
                    "start": 390,
                    "end": 394,
                    "text": "[17]",
                    "ref_id": "BIBREF15"
                }
            ],
            "ref_spans": [],
            "section": "Mitigation strategies"
        },
        {
            "text": "In general, most of the existing works (both in vulnerability analysis and mitigation strategies) focus only on certain security issues, and do not provide a comprehensive security analysis on the overall container ecosystem. As discussed above, some of the existing mitigation strategies have also their own limitations. Some of the related works are also likely outdated, and they might not show the current threat landscape in containers. Therefore, it would be difficult to get a comprehensive and state-of-the-art information on the security landscape of containers. In this work, we perform threat modeling and a systematic survey on the security of containers, covering vulnerabilities, threats, threat consequences and existing mitigation strategies, to provide a comprehensive and latest information on the threat and security landscape of containers.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Mitigation strategies"
        },
        {
            "text": "This section discusses our STRIDE threat modeling for containers. As highlighted in the preceding sections, we first perform threat modeling using the STRIDE framework, particularly using the STRIDE-per-element approach, to identify potential vulnerabilities and threats that may exist in each component of the container ecosystem. The main purposes of doing the threat modeling are to specify the scope of our survey based on the threats identified, map existing literature to those threats and highlight missing research angles.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Threat Modeling using STRIDE"
        },
        {
            "text": "As discussed in Section 2.2, plotting the DFD of the system is the first step in the STRIDE threat modeling. In the context of containers, a common use-case is that the developer develops his application code and upload it to a code repository, such as GitHub [31] . He will then build the app image from the sourcecode in GitHub by creating the Dockerfile [31] and pushes it to the Docker repositories in the Docker Hub registry. The image is finally pulled to a Docker Host and deployed as a container application. We plot the DFD of the above process in Figure 1 , illustrating the container creation and deployment processes and its system components. More specifically, the developer (an external entity) performs the process of coding and Dockerfile creation (P-1). Then, the completed code and Dockerfile is committed and uploaded (DF-1) to the code repository GitHub (DS-1). Thereafter, the code and its libraries are packaged into a docker image (P-2) which will be pushed (DF-3) to the Docker Hub registry (DS-2). The docker image will then be subsequently pulled and run (P-3) via DF-5 into the Docker Host and deployed in container.",
            "cite_spans": [
                {
                    "start": 260,
                    "end": 264,
                    "text": "[31]",
                    "ref_id": "BIBREF25"
                },
                {
                    "start": 357,
                    "end": 361,
                    "text": "[31]",
                    "ref_id": "BIBREF25"
                }
            ],
            "ref_spans": [
                {
                    "start": 557,
                    "end": 565,
                    "text": "Figure 1",
                    "ref_id": "FIGREF0"
                }
            ],
            "section": "Plotting the DFD of Containers"
        },
        {
            "text": "In our example, the Docker Host comprises of 4 functional components with two containers (a and b). The container is a wrapped and controlled environment and contains the application component (P-4a and P-4b) and the dependent libraries and binaries component (P-5a and P-5b). The Docker engine or daemon component (P-6) is responsible for launching the containers and to control their isolation level, capabilities restrictions and security profiles. The host OS kernel component (P-7) manages functions such as memory, files system, network, and process management. The Docker engine communicates with the host OS kernel using system calls.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Plotting the DFD of Containers"
        },
        {
            "text": "Vulnerabilities are the weaknesses in a system that allow an attacker to gain access into it via malicious techniques. In containers, vulnerabilities can occur during image creation, in its push and pull connections, verification, during the registry storage process, communications between the container and the OS kernel, and during the communications between two different containers. Vulnerabilities can also occur because of misconfigurations of the Docker Host and the Linux kernel.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Identifying Vulnerabilities in Containers"
        },
        {
            "text": "Using the STRIDE framework, we discovered several vulnerabilities on the DFD (cf. Fig. 1 ) of the container systems. To save space and simplify our presentation, we only discuss the most relevant ones, as shown below. . Both Docker Hub and GitHub also do not enforce the additional protection of multi-factor authentication. Therefore, a determined attacker can deploy a variety of password attack techniques like brute-force, dictionary, password spraying, and many others [131] to steal account IDs and passwords. 2. V2: Docker Hub allows a developer to upload (or push) an image that is not signed. This allows an image to be downloaded (or pulled) without validating its authenticity [46] . This means that even tampered images can also be successfully stored in Docker Hub and used for deployment by unsuspecting developers. 3. V3: Both Docker Hub and GitHub store software images and codes as they are, and they do not scan them for sensitive parameters, such as hard-coded passwords, access keys and other credentials. Inexperienced developers may include such sensitive information within the images and codes. On the other hand, industry practitioners have developed open-source tools, e.g., Docker Images Explorer 4 and Whispers 5 , to scan repositories and registries for passwords, API tokens, access keys, hashed credentials and others [137] . Hence, attackers may use these tools to discover exposed credentials. 4. V4: Docker images are not always safe and patched for use and Docker Hub does not check if the latest patches are applied. A recent study [8] was conducted on 4 million Docker Hub images and discovered that 51% of them had at least one critical vulnerability. Among them, about 6,400 were classified as malicious, of which 44% were related to cryptocurrency mining, 23% were due to flatmap-stream malware, and 20% were a variety of hacking tools. Another study of more than 2 million images from Docker Hub found that it took 181 days on average for a software originator to fix a software vulnerability, but it took an extra 422 days on average for the developer to patch the fix in the image containing the software [101] . Therefore, a software with security vulnerabilities can remain in an image for more than 600 days on average and has a high probability to be downloaded and potentially exploited by the attackers. 5. V5: The distribution of images from Docker Hub requires only the HTTP API [41]. This could allow an attacker to carry out a man-in-the-middle (MITM) attack. In fact, a recent CVE report 6 revealed that a critical vulnerability was detected on LXC (i.e., the Linux container namespace isolation technology used by Docker) that allowed a code to be download over cleartext HTTP and to omit digital-signature checks [34] . This vulnerability would allow a man-in-the-middle attacker to install malicious code into the container that will run as root. 6. V6: Container allows API endpoints to be publicly accessible on the internet, without any firewall or password protection. This can allow attackers to successfully scan the exposed APIs and access the containers to launch attacks [43]. 7. V7: According to [36], 44% of developers use Continuous Integration/Continuous Delivery (CI/CD) process to deploy containers. The continuous integration stage pushes the application code through the commit, build and test phases to the code repository and subsequently to the image registry. The continuous delivery stage then deploys the application in a container with environment-specific parameters. The entire CI/CD process presents wider attack vectors for attackers to exploit. While the automatic CI/CD process yields efficiency, the speed and lack of manual oversight creates security risks. A successful exploit in any part of the pipeline will allow an attacker to permeate its control to the rest of the pipeline. 8. V8: A container is immutable and when it is deployed and run, it cannot be changed or patched.",
            "cite_spans": [
                {
                    "start": 688,
                    "end": 692,
                    "text": "[46]",
                    "ref_id": null
                },
                {
                    "start": 1349,
                    "end": 1354,
                    "text": "[137]",
                    "ref_id": null
                },
                {
                    "start": 1568,
                    "end": 1571,
                    "text": "[8]",
                    "ref_id": "BIBREF6"
                },
                {
                    "start": 2148,
                    "end": 2153,
                    "text": "[101]",
                    "ref_id": "BIBREF56"
                },
                {
                    "start": 2769,
                    "end": 2773,
                    "text": "[34]",
                    "ref_id": "BIBREF28"
                }
            ],
            "ref_spans": [
                {
                    "start": 82,
                    "end": 88,
                    "text": "Fig. 1",
                    "ref_id": "FIGREF0"
                }
            ],
            "section": "Identifying Vulnerabilities in Containers"
        },
        {
            "text": "A developer will need to ensure that the base image, application binaries and libraries are regularly updated to rebuild and redeploy the whole image. 9. V9: Containers are typically stateless and not appropriate to store persistent data, hence the logs that record the containers' activities are stored in the local disk in the Docker host and in JSON file format. Each JSON log file contains only one container information [136] . Over time and as more logs are created, unless the old logs are cleared or log rotation is performed, the local disk will fill up and face exhaustion [37]. 10. V10: One feature of the container is that it can directly connect with the host kernel, unlike a virtual machine (VM) which requires an application to bypass the VM kernel and hypervisor. Consequently, it is easier for an attacker to access the host kernel if it can breach into an application within a container that resides on the host [20]. 11. V11: Container is reliance on Linux kernel and there are many vulnerabilities that are related to the Linux kernel that may affect the security of container, such as the vulnerability in runc module 7 that allows a malicious container to gain root-level access to the host machine [124] . To date, there are close to 3,000 Linux CVE vulnerabilities listed by MITRE [35] . However, there has not been much in-depth research done on the number and types of Linux vulnerabilities that directly impact containers. 12. V12: The efficient architecture design of multiple containers on a host and sharing its CPU, memory, network, UIDs and other resources from the same kernel is also a security risk and a vulnerability. This is because, if the kernel is attacked, malicious attackers can gain root privilege of the host and from there, they can attack other containers and the entire system [85].",
            "cite_spans": [
                {
                    "start": 425,
                    "end": 430,
                    "text": "[136]",
                    "ref_id": null
                },
                {
                    "start": 1222,
                    "end": 1227,
                    "text": "[124]",
                    "ref_id": "BIBREF78"
                },
                {
                    "start": 1306,
                    "end": 1310,
                    "text": "[35]",
                    "ref_id": null
                }
            ],
            "ref_spans": [],
            "section": "Identifying Vulnerabilities in Containers"
        },
        {
            "text": "Before we perform the threat analysis, we first outline the possible threat consequences as we will refer them in the threat analysis sections below. A threat consequence is a security violation that happens as a result of an attack. This includes unauthorized disclosure, deception, disruption and usurpation [142] . \"Unauthorized disclosure\" is when an unauthorized entity gains access to the data. \"Deception\" is when the victim believes that a false data is true. \"Disruption\" is when an normal operation is disrupted and cannot carry on. \"Usurpation\" is when an unauthorized entity takes control of the system and operation. For simplicity, we assign short notations for the threat consequences as follows: TC-1 for \"unauthorized disclosure\", TC-2 for \"deception\", TC-3 for \"disruption\" and TC-4 for \"usurpation\".",
            "cite_spans": [
                {
                    "start": 310,
                    "end": 315,
                    "text": "[142]",
                    "ref_id": "BIBREF93"
                }
            ],
            "ref_spans": [],
            "section": "Analyzing Threats in Containers"
        },
        {
            "text": "Spoofing identity is an attack in which the attacker impersonates the victim (which can be a user, file, process, or role) to gain access into a system without the rightful consent. This attack compromises the authenticity security property, and the threat consequence is primarily TC-2. Below, we discuss a list of potential spoofing threats in the containers ecosystem. Spoofing the user's GitHub account: By exploiting vulnerability V1 listed in section 3.2, the attacker can gain access to a developer's credential in the GitHub repo at DS-1 and to embed malware into the code. Some techniques to \"steal\" credentials are through spearphishing email, password-spraying, brute force, scraping published credentials in repositories [145] , [133] . Applying the automated deployment pipeline, the malicious code will be built into a container image at P-2. The image is then pushed into Docker Hub at DS-2 and automatically pulled and deployed at P-3 as container into the user's docker host. The entire process can take place within minutes and may infect many other machines [103] . The threat consequences are TC-2 followed by TC-1. Spoofing the GitHub or Docker Hub: The GitHub repository can be spoofed by an attacker and may mislead the victim to upload his code to the attacker's repository. The attacker can then add malicious elements into the code and upload it to the real GitHub repository. The threat consequence is TC-2. The techniques can be in the form of DNS server spoofing where the attacker diverts the victim's traffic to a malicious IP address [121] and this is achieved by using DNS cache poisoning, Kaminsky attack, or DNS hijacking (DNSpionage) [92] . The same spoofing technique can be used on the Docker Hub (DS-2) and can lead to a malicious image being pulled to the Docker Host. So far, we have not found any article that reports about this attack vector in GitHub or Docker Hub. Spoofing the Docker Account: A Docker account in Docker Hub at DS-2 can be spoofed by an attacker and lead developers to go to a \"fake\" account to download a malicious image. The investigation team from security firm Aqua Security found that a cybercrime group created an account called \"portaienr\" in order to masquerade a legitimate account called \"pontainer\" [110] . The idea was to exploit typosquatting when a victim mistyped the account name and be transferred to the attacker's account to pull malicious images [110] , resulting in the threat consequence of TC-2. Due to vulnerability V5, a Docker image is not scanned for vulnerability nor verified for legitimacy, hence the attack can be successful. Spoofing the Docker Image: A Docker image can be spoofed by an attacker and lead to an incorrect image being pulled to the Docker Host. Security firm Trend Micro discovered that attackers uploaded two malicious images and labelled them as \"alpine\" and \"alpine2\" to fake it with the popular Alpine Linux and trick unsuspecting developers [128] . Due to vulnerability V5, the image was successfully pulled without scanning. Running these images resulted in spawning of containers that installed the XMRIG crypto-mining applications. The attackers could tap on the victim's computing resources to mine crypto-currency [128] , resulting in threat consequence TC-4. Spoofing the DNS responses to a cluster of containers: Most application containers are deployed in Kubernetes clusters (RedHat's survey shows that 88% of customers use Kubernetes to manage the containers [125] ) and reside in pods. Each pod communicates with each other via a bridge that runs in the root network namespace. This is made possible due to the default enablement of the capability NET_RAW, which allows traffic (e.g., ICMP, ARP, DNS) to flow between containers. This is a characteristic of vulnerability V12 where multiple containers share the same host. An attacker can launch a DNS spoofing attack from a compromised container in a pod and return fake answers to DNS queries sent from a co-located victim container pod. Subsequently, the attacker can execute MITM attack on the network traffic between the containers [130], [19] , resulting in threat consequence TC-2.",
            "cite_spans": [
                {
                    "start": 733,
                    "end": 738,
                    "text": "[145]",
                    "ref_id": "BIBREF96"
                },
                {
                    "start": 741,
                    "end": 746,
                    "text": "[133]",
                    "ref_id": "BIBREF86"
                },
                {
                    "start": 1077,
                    "end": 1082,
                    "text": "[103]",
                    "ref_id": "BIBREF58"
                },
                {
                    "start": 1566,
                    "end": 1571,
                    "text": "[121]",
                    "ref_id": "BIBREF74"
                },
                {
                    "start": 1670,
                    "end": 1674,
                    "text": "[92]",
                    "ref_id": "BIBREF47"
                },
                {
                    "start": 2272,
                    "end": 2277,
                    "text": "[110]",
                    "ref_id": "BIBREF63"
                },
                {
                    "start": 2428,
                    "end": 2433,
                    "text": "[110]",
                    "ref_id": "BIBREF63"
                },
                {
                    "start": 2956,
                    "end": 2961,
                    "text": "[128]",
                    "ref_id": "BIBREF82"
                },
                {
                    "start": 3234,
                    "end": 3239,
                    "text": "[128]",
                    "ref_id": "BIBREF82"
                },
                {
                    "start": 3484,
                    "end": 3489,
                    "text": "[125]",
                    "ref_id": "BIBREF79"
                },
                {
                    "start": 4119,
                    "end": 4123,
                    "text": "[19]",
                    "ref_id": null
                }
            ],
            "ref_spans": [],
            "section": "Spoofing"
        },
        {
            "text": "Tampering is an attack in which the attacker modifies the data, memory space, or network and violates the security property of integrity. The main tampering threats in containers are discussed as below.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Tampering"
        },
        {
            "text": "Tampering the network between Docker Hub and Docker Host: Due to vulnerability V5, an attacker can tamper DF-4 and DF-5 ( Fig. 1) , which are the data flow channels between Docker Hub and Docker Host. The attacker can insert his malicious images and be downloaded on the docker host. For example, an attacker can craft an image to contain a large file filled with garbage and when it is extracted, it would fill the host storage to cause a consequence of disruption (TC-3) [103] . In another example, when the malicious image is extracted on the host filesystem, path traversals can allow the attacker to replace binaries on the host with binaries from the image [103] causing the consequences of TC-1 and TC-2. Tampering the CI/CD pipeline: This threat is due to vulnerability V7. CI/CD pipelining is a popular software development and deployment pattern used by many enterprises. The two distinct processes automate the entire flow of software build to deployment. It starts with code build, test and commit to the code repository (GitHub), to building container image based on the code, tags and pushes the container image to the container registry (Docker Hub), and finally to deploy the image as a container in the Docker host. Attacks to the network in each \"pipeline\" situated in DF-1, DF-2, DF-3, DF-4, and DF-5 can result in tampered software artifact and image. There are limited in-depth studies of the threats and attacks that can occur during the transportation of the codes and images along the pipelines in an automated CI/CD workflow. Martin et al. [103] did a comprehensive study in the vulnerability analysis of container in three use-cases -microservices architecture, virtual environment deployment, and cloud provider using it as container-asa-service. Somya Garg and Satvik Garg [66] described the mechanism of CI/CD using Docker and listed some common container security best practices in the use of namespaces, cgroups, and Linux capabilities. There is an opportunity for more research works around the security aspect of the entire CI/CD process. The consequences of this threat are TC-1, and potentially TC-3 if the network connection of any of the pipelines is disrupted.",
            "cite_spans": [
                {
                    "start": 473,
                    "end": 478,
                    "text": "[103]",
                    "ref_id": "BIBREF58"
                },
                {
                    "start": 663,
                    "end": 668,
                    "text": "[103]",
                    "ref_id": "BIBREF58"
                },
                {
                    "start": 1565,
                    "end": 1570,
                    "text": "[103]",
                    "ref_id": "BIBREF58"
                },
                {
                    "start": 1801,
                    "end": 1805,
                    "text": "[66]",
                    "ref_id": "BIBREF36"
                }
            ],
            "ref_spans": [
                {
                    "start": 122,
                    "end": 129,
                    "text": "Fig. 1)",
                    "ref_id": "FIGREF0"
                }
            ],
            "section": "Tampering"
        },
        {
            "text": "Tampering application codes at Docker Hub: The application code on DS-2 may be tampered with by attackers to include vulnerabilities. Docker Hub was attacked in such way before, and the usernames and hashed passwords of 190,000 users were exposed [90] . The breach can result in the attacker accessing a user's application image and tamper with its codes. If the image is not signed, the change will not be detected during download. In addition, Docker images may contain inherent vulnerabilities which the developers are not aware of until they are deployed in production environment. A study has shown that the official and community images contain an average of 180 vulnerabilities and 50% of these images have not been updated [143] . It takes an average of 181 days to fix the vulnerability and an additional 422 days on average to update the image [101] , and this presents a window for an attacker to exploit the vulnerability. This threat is attributed to vulnerabilities of V2 and V4. The consequences are TC-1 and TC-2. Tampering image during image build: Due to the vulnerabilities of V2 and V3 where an image is freely uploaded without any checks and controls, it can be tampered without being discovered. During the image build at P2, an attacker may inject malicious commands or vulnerable components into the image file. The image may continue to be signed and appear legitimate to the developer [138] . The tampered image can cause the deployed container at P-4 and P-5 to perform malicious acts to the host or other containers residing in the same host causing the consequences of TC-1, TC-2 or even TC-4. Developers rely on open source libraries when developing their applications. A commercial study finds that seven in ten applications use at least one open-source library with a security flaw [122] , and that the library vulnerabilities increase by 88% over a two year period [152] . Palo Alto Networks conducted a study which found that 96% of third-party container applications deployed in the cloud contain known vulnerabilities [76] . The attack surface is further expanded if the libraries have their own dependencies on codes from other libraries. The malicious libraries in a deployed container at P-4 and P-5 will interact via the Docker daemon at P-6 to gain unauthorised access to the OS kernel. These threats will lead to the consequence of TC-1, TC2, and even TC-4 when the host kernel is under control.",
            "cite_spans": [
                {
                    "start": 247,
                    "end": 251,
                    "text": "[90]",
                    "ref_id": "BIBREF45"
                },
                {
                    "start": 731,
                    "end": 736,
                    "text": "[143]",
                    "ref_id": "BIBREF94"
                },
                {
                    "start": 854,
                    "end": 859,
                    "text": "[101]",
                    "ref_id": "BIBREF56"
                },
                {
                    "start": 1411,
                    "end": 1416,
                    "text": "[138]",
                    "ref_id": "BIBREF89"
                },
                {
                    "start": 1814,
                    "end": 1819,
                    "text": "[122]",
                    "ref_id": "BIBREF75"
                },
                {
                    "start": 1898,
                    "end": 1903,
                    "text": "[152]",
                    "ref_id": null
                },
                {
                    "start": 2054,
                    "end": 2058,
                    "text": "[76]",
                    "ref_id": null
                }
            ],
            "ref_spans": [],
            "section": "Tampering"
        },
        {
            "text": "Repudiation is associated with an attacker claiming that something which is done is not performed by him. This attack violates the security property of non-repudiation. In the following, we discuss the main repudiation threats in container systems. Disabling logging functions: An experienced attacker will cover his track to avoid detection and attribution. The attacker may attack the audit mechanism and attempt to delete or modify the logs stored in element P7 in Fig. 1 . He may disable the logging function using \"Auditpol\" in Windows systems or \"auditctl\" in Linux systems. He may delete the logs with clearlogs.exec in Windows systems and shred tools in Linux systems [10] . The consequence is the disruption of logging activity.",
            "cite_spans": [
                {
                    "start": 676,
                    "end": 680,
                    "text": "[10]",
                    "ref_id": "BIBREF8"
                }
            ],
            "ref_spans": [
                {
                    "start": 468,
                    "end": 474,
                    "text": "Fig. 1",
                    "ref_id": "FIGREF0"
                }
            ],
            "section": "Repudiation"
        },
        {
            "text": "Modifying log data: The log files in Docker can be found in /var/lib/docker/containers directory on the host system [120] and they can be modified by the attacker. This threat is possible due to the vulnerability of V9 and V10 as the container is dependent on the Linux host for logging activities and storage. At this point we have not found any reports that describe a real attack event on Docker logs. The consequence is deception by modifying the log data. Overwriting log disk space: A container utilizes the memory and storage space of the host and this vulnerability is aligned with V9 and V10. A container is enabled with the capability CAP_AUDIT_WRITE to record activities and events into the kernel audit log [61] . The kernel audit log is stored on the disk in the host at P-7 and the attacker container can write massive amount of junk data onto the disk and overwrite the valid logs recorded by the victim container [102] . This attack can cover the tracks of a malicious action and prevent the victim from accessing valid logs to perform investigation. This threat will result in deception as the real logs are overwritten.",
            "cite_spans": [
                {
                    "start": 116,
                    "end": 121,
                    "text": "[120]",
                    "ref_id": "BIBREF73"
                },
                {
                    "start": 719,
                    "end": 723,
                    "text": "[61]",
                    "ref_id": "BIBREF32"
                },
                {
                    "start": 929,
                    "end": 934,
                    "text": "[102]",
                    "ref_id": "BIBREF57"
                }
            ],
            "ref_spans": [],
            "section": "Repudiation"
        },
        {
            "text": "Information disclosure is allowing unauthorized entity to access data, information, processes or networks which he is not allowed to. This attack compromises the security property of confidentiality, and the following are a list of information disclosure threats in containers. Weak access control of GitHub and Docker Hub: Weak access control of GitHub (DS-1) and Docker Hub (DS-2) allows an attacker to access information which he is not authorised to do so. There have been several security breaches in GitHub where identity keys and data information have been stolen. For example, developers from Starbucks expose API keys in GitHub, which can allow an attacker to access its active directory management platform [81] . Starbucks later removed the repository and revoked the API keys. Another attacker got access into CircleCI's user data which include their GitHub's usernames, emails, repo URLs, branch names, organization names and repo owners [86] . This prompted CircleCI to enforce twofactor authentication (2FA) for their account holders. Another attack involved gaining access into all the Git hosting services including GitHub, GitLab, etc. to steal source-codes and demanding ransoms from the owners [24] . Some of the victims had admitted to using weak passwords and forgetting to remove access tokens for old apps. Recently, millions of Brazilian COVID-19 patients' personal private information (including the Brazil's President, ministers and provincial governors) were exposed when a spreadsheet which stored the login credentials of the government healthcare systems were exposed by a GitHub user [29] . The source codes of Nissan were leaked and exposed from a Git server when its developer secure it with its default username and password combo of admin/admin and they were easily cracked by attackers [27] . Mercedes Benz's smart car components source code were leaked when an outsider successfully signed up for an account in its Git web portal using a non-existent Daimler corporate email [28] . In addition to the easy access into GitHub account, an inexperienced developer may make a change in a source code file and unknowingly commit and upload all other files (which include sensitive ones) in the same folder into GitHub. An attacker who breaches a Github account can access these sensitive files. The access control of Docker Hub at DS-2 can be exploited and sensitive data be exposed. In 2019, a database of 190,000 users' usernames and their hashed passwords in Docker Hub was hacked into by attackers [104] . On separate occasions, attackers managed to steal the credentials from the cloud providers and took control of the container instances which were owned by Aviva, Gemalto and Tesla and used them for crypto-currency mining [127] . This threat can be attributed to vulnerability V1 which is due to a non-stringent credential and access control measures. The consequence is the unauthorized disclosure of sensitive information. Sensitive parameters to access the host: The run-commands used in P-3 to run a container may contain sensitive parameters which allows an attacker that develops the container image to gain access to the user's host and its data. These parameters are not usually detected by the security scanner as they are not malicious in nature. For example, a user may run a container command with \"--privileged\" to access certificate on the host to spawn a container [83] . The use of such \"sensitive\" parameter will allow the container to gain root access to the host and this can be exploited by an attacker [101] . Another example is the use of \"--volume\" and \"-v src:dest\" that allows a container to gain access to \"src\", which is a volume in the host and as a result allows an attacker to upload data in the host to a online repository [101] , resulting in threat consequence of TC-1. In some instances, there may be a need to configure the parameter of \"--pid=host\" within a container in order to run debugging tools, like strace or gdb [42] . Such configuration allows the container to share the host's PID (process ID) namespace. If an attacker gains control of the container, he will be able to view all the other processes running on the host. Armed with info of the PID, along with \"owner\" and path of the executable file, the attacker can conduct attack to other containers and the host [101] . This threat is attributed to vulnerabilities V10 and V12 which is due to the common Linux kernel shared by multiple containers. Due to vulnerability V10, the configuration options of the Docker engine/daemon at P-6 can provide access to the host OS kernel. This can be achieved with the options of \"-net=host\", \"-uts=host\", \"-privileged\", and additional \"capabilities\". The option \"-uts=host\" can allocate the same UTS namespace for the container and the host which allows the container to see and change the host's name and domain [103] . The capability \"-cap-add=SYS_ADMIN\" can enable a container to remount /proc and /sys sub-directories in read/write mode, and change the host's kernel parameters [103] , leading to potential threat consequences of TC-1 and TC-4. Leakage of information between containers: Containers that reside in the same Linux host and share the OS kernel (P-7) can leak information to each other via storage path mapping, port mapping, layer-2 network connection, and covert channels. This can enable an attacker of one container to gain access into another co-locating container [102] . Some of the methods include exploiting the openly observed globally used memory (GUM), which an attacker can obtain visibility of the victim container's memory information [102] ; accessing the global variable of inode number (or index node) allows an attacker container to know the metadata of a victim container's process file [102] ; and an attacker container can read into the kernel message buffer (KMB) which is written into by a victim container with the CAP_SYSLOG enabled [102] . This is again due to the vulnerabilities V10 and V12 and the consequence is the leakage of unauthorized information (TC-1).",
            "cite_spans": [
                {
                    "start": 717,
                    "end": 721,
                    "text": "[81]",
                    "ref_id": null
                },
                {
                    "start": 951,
                    "end": 955,
                    "text": "[86]",
                    "ref_id": null
                },
                {
                    "start": 1214,
                    "end": 1218,
                    "text": "[24]",
                    "ref_id": "BIBREF20"
                },
                {
                    "start": 1616,
                    "end": 1620,
                    "text": "[29]",
                    "ref_id": "BIBREF24"
                },
                {
                    "start": 1823,
                    "end": 1827,
                    "text": "[27]",
                    "ref_id": "BIBREF22"
                },
                {
                    "start": 2013,
                    "end": 2017,
                    "text": "[28]",
                    "ref_id": "BIBREF23"
                },
                {
                    "start": 2535,
                    "end": 2540,
                    "text": "[104]",
                    "ref_id": "BIBREF59"
                },
                {
                    "start": 2764,
                    "end": 2769,
                    "text": "[127]",
                    "ref_id": "BIBREF81"
                },
                {
                    "start": 3422,
                    "end": 3426,
                    "text": "[83]",
                    "ref_id": null
                },
                {
                    "start": 3565,
                    "end": 3570,
                    "text": "[101]",
                    "ref_id": "BIBREF56"
                },
                {
                    "start": 3796,
                    "end": 3801,
                    "text": "[101]",
                    "ref_id": "BIBREF56"
                },
                {
                    "start": 3998,
                    "end": 4002,
                    "text": "[42]",
                    "ref_id": null
                },
                {
                    "start": 4354,
                    "end": 4359,
                    "text": "[101]",
                    "ref_id": "BIBREF56"
                },
                {
                    "start": 4894,
                    "end": 4899,
                    "text": "[103]",
                    "ref_id": "BIBREF58"
                },
                {
                    "start": 5063,
                    "end": 5068,
                    "text": "[103]",
                    "ref_id": "BIBREF58"
                },
                {
                    "start": 5468,
                    "end": 5473,
                    "text": "[102]",
                    "ref_id": "BIBREF57"
                },
                {
                    "start": 5648,
                    "end": 5653,
                    "text": "[102]",
                    "ref_id": "BIBREF57"
                },
                {
                    "start": 5805,
                    "end": 5810,
                    "text": "[102]",
                    "ref_id": "BIBREF57"
                },
                {
                    "start": 5957,
                    "end": 5962,
                    "text": "[102]",
                    "ref_id": "BIBREF57"
                }
            ],
            "ref_spans": [],
            "section": "Information Disclosure"
        },
        {
            "text": "The denial of service causes a service to be disrupted or degraded such that users cannot access the service. This attack violates the security property of availability. Most of the threats listed below are attributed to the vulnerability V10 which is the close connection between the container and the host kernel unlike a virtual machine which is separated by the VM kernel and the hypervisor. The attack involves abnormally consuming resources such as CPU, memory, storage, networks, etc. The threat consequence is mainly TC-3. Below, we discuss the main DoS-related threats in the containers context. Inaccessibility of GitHub or Docker Hub: The attacker may cause GitHub (DS-1) or Docker Hub (DS-2) to be inaccessible to developers for code updates and container deployments. While the infrastructure facilities of GitHub and Docker Hub are not publicly known, it is assumed that they are highly resilient, secured and are distributed across multiple sites like the commercial cloud computing services, such as AWS, Microsoft Azure or Google Cloud. Therefore, at this point there is little evidence to show that the services from GitHub or Docker Hub have been disrupted due to attacks on their server infrastructures. An article was written that painted a scenario where a DDoS attack targeted at the control traffic between the Network Operations Center (NOC) and the data center's Heating, ventilation, and airconditioning (HVAC) could potentially result in overheating and to cause a data center outage [2] . However, in reality, there had also been data center outages that resulted from overheating due to equipment failures [158], service component failures such as the DNS outage in Azure [159], Kinesis disruption in AWS [157] , and other non-attack related causes. Service disruption at host via OS kernel: From Fig. 1 , the container via the Docker engine (P6) communicates with host OS kernel (P7) via a series of system calls. By default, each container has access to the host's CPU cycles and memory without limit [48] . An attack on the OS kernel will cause the disruption of services to the host's computing resources like the CPU, memory, storage, and others resulting in the threat consequence TC-3. Attacks utilizing exceptions handling, logs writing, and disk write-backs can impact CPU, disk I/Os and memory performances. The Linux kernel will trigger an exception handler when exceptions such as faults (e.g., divide error) and traps (e.g., overflow) occur. When one of them happens, the kernel will send a signal to the process which generates it, and it will take steps to recover or to abort [12] . The exception will trigger the core dump kernel function to generate a core dump file which is used for debugging. It is shown that when a container keeps raising exceptions (example div 0) and triggers the core dump, the host system CPU and memory performances are reduced by 95% [65] . Therefore, an attacker can create a DoS attack on a host using this exploitation and thereby impacting the performance of all containers which run on this host. System logging in Linux at P-7 is typically performed by journald which is a part of systemd, an init system and system manager [67] . As a system service, journald not only collects system and kernel log messages, but it also collects three types of log messages in a container. They are switch user (su), add user/group, and exception [65] . As journald is a system service, its resource utilization will be taxed on the host and is not controlled by the container cgroups. It is shown that the three container logging operations performed by journald can cost up to 20% extra CPU utilization and an average of 2MB/s IO throughput [65] . Therefore, this is an exploit which an attacker can use in a container to overwhelm the host resources which in turn impact the performance of the other containers causing a TC-3 consequence. To improve performance, the Linux kernel writes data in the cache memory and later performs a disk writeback of the data into the disk at the host. However, data may be lost or corrupted when the system crashes, and one way for a user to invoke a writeback is to run a system call \"sync\", which writes any data stored in the cache memory out to the disk [77]. It is shown that when a malicious container keeps calling \"sync\" while another victim container performs write operations, it leads to high CPU wait time due to the combination of sync and write operation. The victim I/O performances (such as sequential read /write and random read/write) are reduced to almost 1% [65] . This shows that an attacker can launch a DoS attack on the host and hence on another container by exploiting the data writeback mechanism to the disk. Inaccessibility of the data flows: As shown in prior threats targeting the CI/CD automated integration and deployment process (due to vulnerability V7), an attack in any of the data flow connections at DF-1, DF-2, DF-3, DF-4, and DF-5 will cause disruptions to one or more of the processes of code commits, images build and upload, images download and containers deployment.",
            "cite_spans": [
                {
                    "start": 1512,
                    "end": 1515,
                    "text": "[2]",
                    "ref_id": "BIBREF1"
                },
                {
                    "start": 1735,
                    "end": 1740,
                    "text": "[157]",
                    "ref_id": null
                },
                {
                    "start": 2033,
                    "end": 2037,
                    "text": "[48]",
                    "ref_id": null
                },
                {
                    "start": 2622,
                    "end": 2626,
                    "text": "[12]",
                    "ref_id": "BIBREF10"
                },
                {
                    "start": 2910,
                    "end": 2914,
                    "text": "[65]",
                    "ref_id": "BIBREF35"
                },
                {
                    "start": 3206,
                    "end": 3210,
                    "text": "[67]",
                    "ref_id": "BIBREF37"
                },
                {
                    "start": 3415,
                    "end": 3419,
                    "text": "[65]",
                    "ref_id": "BIBREF35"
                },
                {
                    "start": 3711,
                    "end": 3715,
                    "text": "[65]",
                    "ref_id": "BIBREF35"
                },
                {
                    "start": 4584,
                    "end": 4588,
                    "text": "[65]",
                    "ref_id": "BIBREF35"
                }
            ],
            "ref_spans": [
                {
                    "start": 1822,
                    "end": 1833,
                    "text": "From Fig. 1",
                    "ref_id": "FIGREF0"
                }
            ],
            "section": "Denial of Service (DoS)"
        },
        {
            "text": "Elevation of privilege increases the level of authorization of an attacker such that he can perform operations or access information which he is not allowed to do so. This attack violates the authorization property of security and leads to the consequence of TC-4. A container is vulnerable to a host take-over attack because of vulnerabilities V10, V11, and V12. This is due to its tight integration with the Linux kernel, sharing it with other containers, and inheriting vulnerabilities that frequently discovered in the Linux operating system. Below, we discuss the specific elevation of privilege threats in containers. Run container as root: At P-2 in Fig. 1 , there are some considerations when configuring the Dockerfile to build a Docker image. By default, the Docker container runs as root since the Docker daemon needs root privileges to modify the host filesystems to run [129] , unless a developer intentionally configures it otherwise. As such, an inexperience developer may pull and deploy container at P-3 in a root privilege mode. This allows an attacker to copy files from the host to the container and access them, and launch a remote command execution (RCE) attack [118] . Gain root access via misconfigured networking: A newly created container will be configured with the default bridge network at the Docker daemon networking stack at P-6. The default bridge network allows other unrelated containers or services to communicate with it remotely [49] . An attacker can exploit this container and open a listening port to other containers in the same network. When it discovers an open port, it will connect to its Docker daemon and instruct it to download and run a malicious script [140] . The malicious script can potentially disable the security system of the host, create a root user, and download and install a malicious program such as a crypto-miner to perform crypto currency mining [140] . Use of system calls to gain privilege: During the starting and running of application containers, system calls are made from the containers to the host kernel at P-7. It is noted that 331 system calls are allowed by default, but an experiment with a MySQL database container show that only 116 system calls are needed in the booting phase and 58 system calls are used in the running phase [96] . In another experiment using the Apache web server, 47 unnecessary system calls are enabled in the container, and they are found to be vulnerable to exploitation with CVE security level of medium and above, e.g., signalstack() 8 and setsockopt() 9 [96] . Therefore, a high default number of system calls increases the attack surface and the unnecessary system calls can be used by malicious processes to gain elevated privilege in the host. Kernel privilege escalation attack: A study has shown that an attacker can make use of a compromised container to launch attack on the host kernel at P-7 to escalate its privilege. Exploits contained in CVE-2017-7308, CVE-2017-5123 and CVE-2016-8655 (or Exploit-DB IDs of 41994, 43127, 43029 and 40871) show that privilege escalation exploits can overcome the default security mechanisms in \"Namespace\", \"Cgroup\", \"Capability\", \"Seccomp\" and \"MAC\" to launch a malicious shellcode in the kernel and in supervisor mode [98] . This is carried out by bypassing the KASLR (Kernel Address Space Layout Randomization) to obtain the address of the critical kernel static functions, and to launch attacks like \"use after free\", race condition, buffer flow etc., to enable the overwriting of the pointers of the kernel functions. The attacker then overwrites the kernel functions' pointers to disable the CPU protections of SMEP (Supervisor Mode Execution Protection) and SMAP (Supervisor Mode Access Protection) and to point to a malicious user space function or shellcode, which invokes a kernel function commit_creds() to apply for root credential [98] . Another attack leverages the \"time of check to time of use\" (TOCTOU) vulnerability to gain root access to the host. This happens when a user executes a \"docker cp\" command to copy contents from the container to the host filesystem and the attacker adds a symlink component to the path after the resolution and before the operation. This results in resolving the symlink path component on the host as root allowing it to read and write to any path on the host [62] .",
            "cite_spans": [
                {
                    "start": 883,
                    "end": 888,
                    "text": "[129]",
                    "ref_id": "BIBREF83"
                },
                {
                    "start": 1184,
                    "end": 1189,
                    "text": "[118]",
                    "ref_id": "BIBREF71"
                },
                {
                    "start": 1467,
                    "end": 1471,
                    "text": "[49]",
                    "ref_id": null
                },
                {
                    "start": 1704,
                    "end": 1709,
                    "text": "[140]",
                    "ref_id": "BIBREF91"
                },
                {
                    "start": 1912,
                    "end": 1917,
                    "text": "[140]",
                    "ref_id": "BIBREF91"
                },
                {
                    "start": 2309,
                    "end": 2313,
                    "text": "[96]",
                    "ref_id": "BIBREF51"
                },
                {
                    "start": 2563,
                    "end": 2567,
                    "text": "[96]",
                    "ref_id": "BIBREF51"
                },
                {
                    "start": 3273,
                    "end": 3277,
                    "text": "[98]",
                    "ref_id": "BIBREF53"
                },
                {
                    "start": 3897,
                    "end": 3901,
                    "text": "[98]",
                    "ref_id": "BIBREF53"
                },
                {
                    "start": 4363,
                    "end": 4367,
                    "text": "[62]",
                    "ref_id": "BIBREF33"
                }
            ],
            "ref_spans": [
                {
                    "start": 657,
                    "end": 663,
                    "text": "Fig. 1",
                    "ref_id": "FIGREF0"
                }
            ],
            "section": "Elevation of Privilege"
        },
        {
            "text": "In Section 3, we discussed the potential threats and vulnerabilities we have identified using the STRIDE framework. This helped us to also explore the respective mitigation strategies mentioned in the literature as well as to identify research areas that have not yet been explored. Below, we will discuss the identified mitigation strategies and their limitations to address the corresponding security threats in containers.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Existing Mitigation Strategies and Their Limitations"
        },
        {
            "text": "One of the practices to harden access to an account is using multi-factor authentication (MFA) systems. It is found that 99.9% of the accounts that were breached before did not use MFA, and that a basic 2FA using SMS could stop 100% of automated attacks and 96% of phishing attacks [111] . Docker Hub offers 2FA using mobile phone authenticator application (e.g., Google Authenticator) or Yubico Authenticator with a Yubikey [44], while GitHub offers 2FA with applications like Authy, Duo Mobile, Google Authenticator, Microsoft Authenticator, etc. [69] . In addition, we should enforce policies like strong passwords and regular rotation of passwords. Microsoft has listed useful password guidelines like banning common passwords, not to re-use organization passwords for non-work related purposes, enable risk-based MFA, and others [107] . These measures can help prevent attackers from using stolen credentials to access codes and images in containers. Limitations: While 2FA improves the security by adding a layer of authentication to the password controls, it does have several disadvantages. 2FA increases the time and cost to access the accounts and this can be significant if an organization has thousands of employees [56] . By default, 2FA uses SMS to text the verification code to a user's phone. An attacker can easily perform SMS attack on a compromised phone or the messaging center to retrieve the verification code that is not encrypted [56] . While using a mobile authenticator app is safer than 2FA with SMS, there is a report that shows attackers stealing one-time passcodes generated by Google Authenticator on a mobile phone [26].",
            "cite_spans": [
                {
                    "start": 282,
                    "end": 287,
                    "text": "[111]",
                    "ref_id": "BIBREF64"
                },
                {
                    "start": 549,
                    "end": 553,
                    "text": "[69]",
                    "ref_id": "BIBREF38"
                },
                {
                    "start": 834,
                    "end": 839,
                    "text": "[107]",
                    "ref_id": "BIBREF62"
                },
                {
                    "start": 1228,
                    "end": 1232,
                    "text": "[56]",
                    "ref_id": null
                },
                {
                    "start": 1454,
                    "end": 1458,
                    "text": "[56]",
                    "ref_id": null
                }
            ],
            "ref_spans": [],
            "section": "Multi-Factor Authentication Systems"
        },
        {
            "text": "Securing container images is one of the existing mitigation strategies against threats in containers. Below, we discuss the main image security strategies applicable in container systems. Reducing attack surfaces: It is recommended that an image be kept minimal so that the attack surfaces can be reduced. A couple of best practices in this regard include using multi-stage build feature that enables the developer to create an intermediate container with the required tools, and selectively copy the artifacts to the final image with only the minimal required binaries and dependencies [51] . The other practice is to use distroless 10 images as they do not contain package managers, shells, and others so that the image is kept minimal [82] . Signing images: It is advised that a developer digitally signs his image with Docker Content Trust [38] that is attached to the Notary server,which is used for validating the integrity of the images [68]. Consequently, it is a good practice for developers to verify the authenticity of the images before pulling them by enabling Docker Content Trust [38] . In addition, the developer should ensure that the hash of the image is the same at the Docker Hub as well as when it is deployed to the Docker host. Another effective mitigation method is to enable the Linux Integrity Measurement Architecture (IMA), which would validate the file signatures against pre-installed certificates and denies unauthorized file from being executed. It is shown that IMA can prevent a code that is not signed or signed with unknown key, or a modified code with an invalid signature [151] . Vulnerability scanning: After building the image and before a developer pushes the image to Docker Hub, one good practice is to scan the image by baking a scanning command in the Dockerfile or running a script at P-2. Another good practice is to scan the images before deploying them. Docker Hub provides vulnerability scanning but only to paid subscribers under the Pro or Team plan [45] . However, there are several opensource container scanners in the market and these are Anchore, Clair, Dagda, OpenSCAP, Sysdig Falco, and others [11] . In addition, for static scanning, we can also perform dynamic analysis by running the container in a Docker-in-Docker sandbox mode and scanning it with tools such as VirusTotal (a collection of anti-virus tools) and examining the collected tcpdump/log files for file changes, network traffic, and list of processes [13] . For application code scanning, GitHub offers CodeQL [52] and integration to third-party code scanning tools, such as Checkmarx, Synopsys Intelligent Security Scan, Veracode Static Analysis, and others [117] for identifying vulnerabilities in the codes. Limitations: While signing the image is an important safety measure, the private keys used for signing can be stolen. There have been several instances and methods deployed to steal private keys [57], [3] , [73] , and therefore more research can be done to protect them. With respect to container scanners, Javed and Toor [84] used Claire, Anchore, and Microscanner to investigate the quality of the container scanning and found that they were at most 65% accurate in the detection rate, leaving about 34% of the vulnerabilities being undetected and passed through and being deployed in production environment. The container scanners depend on the CVE data from public databases such as the National Vulnerability Database from the National Institute of Standards and Technology (NIST), Red Hat Enterprise Linux, Debian, and others to check if an image has vulnerabilities. As such, the scanners are not able to detect security flaw that has not been publicly disclosed or if the image is rebuilt from an open-source software package and given a version number which is not tracked in the vulnerability databases [7] . Another limitation is the disparate processes and tools across the container scanning workflow and there is no one integrated tool which can perform static and dynamic scans.",
            "cite_spans": [
                {
                    "start": 587,
                    "end": 591,
                    "text": "[51]",
                    "ref_id": null
                },
                {
                    "start": 738,
                    "end": 742,
                    "text": "[82]",
                    "ref_id": null
                },
                {
                    "start": 1095,
                    "end": 1099,
                    "text": "[38]",
                    "ref_id": null
                },
                {
                    "start": 1610,
                    "end": 1615,
                    "text": "[151]",
                    "ref_id": null
                },
                {
                    "start": 2002,
                    "end": 2006,
                    "text": "[45]",
                    "ref_id": null
                },
                {
                    "start": 2152,
                    "end": 2156,
                    "text": "[11]",
                    "ref_id": "BIBREF9"
                },
                {
                    "start": 2474,
                    "end": 2478,
                    "text": "[13]",
                    "ref_id": "BIBREF11"
                },
                {
                    "start": 2682,
                    "end": 2687,
                    "text": "[117]",
                    "ref_id": "BIBREF70"
                },
                {
                    "start": 2935,
                    "end": 2938,
                    "text": "[3]",
                    "ref_id": "BIBREF2"
                },
                {
                    "start": 2941,
                    "end": 2945,
                    "text": "[73]",
                    "ref_id": null
                },
                {
                    "start": 3847,
                    "end": 3850,
                    "text": "[7]",
                    "ref_id": null
                }
            ],
            "ref_spans": [],
            "section": "Image Security"
        },
        {
            "text": "It is advisable for developers to use verified and official images from trusted repositories and providers. A study [166] shows that \"official\" images are the most secure among image types, which include \"verified\", \"certified\" and \"community\". Both the \"official\" and \"verified\" images are the most updated, while the \"community\" and \"certified\" images are the least updated ones. The developers should update their images with the latest security patches and rebuild the images periodically. NIST recommends the following scenarios and the urgency of patching [148] . Routine patching is the standard procedure to patch on a regular release cycle (e.g. Patch Tuesday). Emergency patching is carried out quickly to address extreme severity vulnerabilities and exploits. Emergency workaround is performed prior to the vendor releasing a patch and it may include roll back exercises. Lastly, it can involve the isolation of unpatchable assets if the systems cannot be easily patched [148] .",
            "cite_spans": [
                {
                    "start": 116,
                    "end": 121,
                    "text": "[166]",
                    "ref_id": null
                },
                {
                    "start": 562,
                    "end": 567,
                    "text": "[148]",
                    "ref_id": "BIBREF98"
                },
                {
                    "start": 982,
                    "end": 987,
                    "text": "[148]",
                    "ref_id": "BIBREF98"
                }
            ],
            "ref_spans": [],
            "section": "Security Patching"
        },
        {
            "text": "IBM researchers Araujo and Taylor [4] developed a just-in-time (JIT) patching framework called \"Insider\" for patching running legacy application processes. This was done by injecting and compiling the code inside the running processes while sandboxing malicious processes for threat investigations. However, it is not developed for a containerized environment. A containerized application self-patch framework was developed by Tunde-Onadele et al.",
            "cite_spans": [
                {
                    "start": 34,
                    "end": 37,
                    "text": "[4]",
                    "ref_id": "BIBREF3"
                }
            ],
            "ref_spans": [],
            "section": "Security Patching"
        },
        {
            "text": "[156] that performed attack detection by using machine learning methods on the system calls; attack classification by comparing it to the CVE database; and finally patch execution by downloading the latest files to update the image and spinning new application container. Limitations: At this point, there is no known automatic or JIT patching mechanism developed for the container. While rapid patching is important to address vulnerability in the container before an attacker gets into it, it may cause compatibility issue with the application without first testing it in a lab environment. Therefore, a reliable and rapid patching framework for containerized application is a gap which should be tackled quickly.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Security Patching"
        },
        {
            "text": "One way to mitigate against attacks on sensitive parameters is to design a mechanism to detect sensitive parameters and to alert the user of the risks before he executes the run command. As far as we know, there is no such mechanism available to perform this function in containers. There are recommendations by Center of Internet Security (CIS) to limit harmful docker run options and some examples are, hardening host configuration, limit file permissions, configure TLS for Docker Hub and control socket, and many others [103] , [30] . There are also methods to configure a container to run in a \"rootless mode\" and some of these are proposed by Docker [47], Bitnami [70] , Redhat [164], [105] , and others.",
            "cite_spans": [
                {
                    "start": 524,
                    "end": 529,
                    "text": "[103]",
                    "ref_id": "BIBREF58"
                },
                {
                    "start": 532,
                    "end": 536,
                    "text": "[30]",
                    "ref_id": null
                },
                {
                    "start": 670,
                    "end": 674,
                    "text": "[70]",
                    "ref_id": "BIBREF39"
                },
                {
                    "start": 691,
                    "end": 696,
                    "text": "[105]",
                    "ref_id": "BIBREF60"
                }
            ],
            "ref_spans": [],
            "section": "Minimise Administrative Privileges"
        },
        {
            "text": "System calls related vulnerabilities could lead to privilege escalation attacks. Almost 17% privilege escalation attacks listed in the Exploit Database maintained by Offensive Security were due to system calls [119] . The threats of mis-using of the system calls in the containers can be mitigated using the following methods. The SPEAKER mechanism developed by Lei et al. [96] traces the systems calls needed in the booting and running phases of a container and then dynamically modifies the security filter to reduce the number of system calls in each phase, thereby reducing the attack surface which is exposed by the system calls.",
            "cite_spans": [
                {
                    "start": 210,
                    "end": 215,
                    "text": "[119]",
                    "ref_id": "BIBREF72"
                },
                {
                    "start": 373,
                    "end": 377,
                    "text": "[96]",
                    "ref_id": "BIBREF51"
                }
            ],
            "ref_spans": [],
            "section": "Minimise Administrative Privileges"
        },
        {
            "text": "Another method, called Classified Distributed Learning (CDL), which is developed by Lin et al. [99] , uses the machine learning algorithm to detect anomalous behaviour of the system calls and to raise an alert if it differs from the normal pattern. The system calls are collected from running containers and they are classified by application class using the random forest technique and subsequently grouped together. The autoencoder neural network is then used to train on the system calls data set and the model is applied to new system calls flow to detect anomalous behaviour [99] . The accuracy rate is 74% when applied to 24 commonly used applications with 33 known vulnerabilities.",
            "cite_spans": [
                {
                    "start": 95,
                    "end": 99,
                    "text": "[99]",
                    "ref_id": "BIBREF54"
                },
                {
                    "start": 580,
                    "end": 584,
                    "text": "[99]",
                    "ref_id": "BIBREF54"
                }
            ],
            "ref_spans": [],
            "section": "Minimise Administrative Privileges"
        },
        {
            "text": "Another method of anomaly detection developed by Abed et al. [1] , uses the Bag of System Calls (BoSC) technique. This method is first introduced in 2005 to improve the then widely used fixed-length contiguous subsequence models in intrusion detection systems (IDS) [87] . It is subsequently applied onto the Linux containers to detect anomaly in system calls [1] . The method collects \"bags of system calls\" (BoSC) in a normal container operation and stores them in a database. In a new container operation, the new bags of systems calls are compared against the database of BoSC and if there are mismatches which exceed a certain threshold, an anomaly is assumed. Each BoSC consists of an array of distinct system calls' frequency of occurrences [1] . The method is shown to be accurate to detect anomaly but it is only tested on a MySQL container using SQL injection attacking tool. It has not been proven to work in other use-cases.",
            "cite_spans": [
                {
                    "start": 61,
                    "end": 64,
                    "text": "[1]",
                    "ref_id": "BIBREF0"
                },
                {
                    "start": 266,
                    "end": 270,
                    "text": "[87]",
                    "ref_id": "BIBREF42"
                },
                {
                    "start": 360,
                    "end": 363,
                    "text": "[1]",
                    "ref_id": "BIBREF0"
                },
                {
                    "start": 748,
                    "end": 751,
                    "text": "[1]",
                    "ref_id": "BIBREF0"
                }
            ],
            "ref_spans": [],
            "section": "Minimise Administrative Privileges"
        },
        {
            "text": "Rastogi et al. [123] developed a method called Cimplifier, which applies the principle of privilege separation and it aims to partition a container into smaller containers which isolate from each other and only equip with the necessary resources and they communicate with each other when needed. Lastly, it is also a good practice to limit the permissions of capabilities in the container to those which are necessary so that attackers do not take advantage to exploit them to gain control of the host [116] . Limitations: The system calls anomaly detection techniques proposed are either not highly accurate or only tested on a specific use-case. There is a need to develop higher accuracy anomaly detection method which can apply to most use-cases and applications.",
            "cite_spans": [
                {
                    "start": 15,
                    "end": 20,
                    "text": "[123]",
                    "ref_id": "BIBREF76"
                },
                {
                    "start": 502,
                    "end": 507,
                    "text": "[116]",
                    "ref_id": "BIBREF69"
                }
            ],
            "ref_spans": [],
            "section": "Minimise Administrative Privileges"
        },
        {
            "text": "The cgroups of the Linux kernel are primarily functioned to control and limit the underlying host resources for each container. Within the cgroups, there is the cpuset subsystem which a developer can configure to bind a container to a set of CPU cores so that the CPU resources are protected from DoS attack [22] . It was also demonstrated that the use of Linux memory bandwidth management module MemGuard can limit the CPU access to the memory and can thus prevent a DoS attack on the memory [22] . There are numerous security best practices that can mitigate DoS attacks, e.g., using read-only filesystems, limiting kernel calls, restricting networking and inter-container communication, not expose Docker daemon socket, limit resoucres, and others [20], [116] . Limitations: The use of cgroups and namespace isolation methods in containers have several limitations. A recently discovered CVE vulnerability 11 showed that a use-after-free flaw can occur in the cgroupv2 subsystem during system reboot. This flaw would crash the system or escalate its privileges [16] . The other limitation of container isolation is that the current isolation measures do not truly sandboxed containers that share the same host [21] . Consequently, numerous container escape vulnerabilities have been discovered, such as CVE2014-3519, CVE-2016-5195, CVE-2016-9962, CVE-2017-5123, and CVE-2019-5736. Gao et al. [65] also presented several exploiting strategies to escape the resource protection set up by the cgroups. Furthermore, other researches [103] , [17] showed that the current container isolation system cannot effectively isolate the network as the same network bridge is shared by the containers, causing ARP poisoning and MAC flooding attacks on the containers.",
            "cite_spans": [
                {
                    "start": 308,
                    "end": 312,
                    "text": "[22]",
                    "ref_id": "BIBREF18"
                },
                {
                    "start": 493,
                    "end": 497,
                    "text": "[22]",
                    "ref_id": "BIBREF18"
                },
                {
                    "start": 757,
                    "end": 762,
                    "text": "[116]",
                    "ref_id": "BIBREF69"
                },
                {
                    "start": 1064,
                    "end": 1068,
                    "text": "[16]",
                    "ref_id": "BIBREF14"
                },
                {
                    "start": 1213,
                    "end": 1217,
                    "text": "[21]",
                    "ref_id": "BIBREF17"
                },
                {
                    "start": 1395,
                    "end": 1399,
                    "text": "[65]",
                    "ref_id": "BIBREF35"
                },
                {
                    "start": 1532,
                    "end": 1537,
                    "text": "[103]",
                    "ref_id": "BIBREF58"
                },
                {
                    "start": 1540,
                    "end": 1544,
                    "text": "[17]",
                    "ref_id": "BIBREF15"
                }
            ],
            "ref_spans": [],
            "section": "Proper Isolation"
        },
        {
            "text": "To mitigate against credentials exposure, it is a good practice not to store unencrypted secrets in Git repositories, but to use tool like git-secret to encrypt passwords, secret keys and sensitive data [163] . Within Docker Hub, developers can store secrets in credential stores such as D-Bus Secret, Apple macOS keychain, Microsoft Windows Credential Manager and \"pass\" [40] . The recommendations to strengthen passwords and protect access control as described in section 4.1 are applicable here.",
            "cite_spans": [
                {
                    "start": 203,
                    "end": 208,
                    "text": "[163]",
                    "ref_id": null
                },
                {
                    "start": 372,
                    "end": 376,
                    "text": "[40]",
                    "ref_id": null
                }
            ],
            "ref_spans": [],
            "section": "Prevent Confidential Data Leaks"
        },
        {
            "text": "When committing and uploading modified files into GitHub, one good practice is to use \".gitignore\" feature to specifically exclude certain files from being \"committed\" into GitHub [54]. This will prevent sensitive files which reside in the same folder as the program code to be uploaded into GitHub. Another practice is to use \".gitignore\" to whitelist the files (instead of exclude) to commit [93] . Limitations: Credential storage secrets manager or vault is not bullet-proof. CyberArk had tested a method to steal credentials stored in Local Security Authority (LSA) Secrets registry and to achieve lateral movement throughout the system [112] . Despite having solid vaults, confidential data and credentials can be leaked if the user share credentials such as committing access keys, passwords, and secrets to source control repositories. A compromised user's endpoint devices such as notebook, desktop, and mobile device will also allow an attacker to find secretive credentials. MITRE has listed a number of credentials dumping methods that can be exploited by attackers [6] .",
            "cite_spans": [
                {
                    "start": 394,
                    "end": 398,
                    "text": "[93]",
                    "ref_id": "BIBREF48"
                },
                {
                    "start": 641,
                    "end": 646,
                    "text": "[112]",
                    "ref_id": null
                },
                {
                    "start": 1077,
                    "end": 1080,
                    "text": "[6]",
                    "ref_id": "BIBREF5"
                }
            ],
            "ref_spans": [],
            "section": "Prevent Confidential Data Leaks"
        },
        {
            "text": "In order to prevent DNS spoofing attacks, it is a good practice not to use Docker's default bridge docker0 but to use Docker's user-defined network [30] . The developer using the end point device should encrypt the network with a virtual private network (VPN) and to regularly flush the device's DNS cache [89] . The VPN is also important to secure the communication between the containers [71] . To protect the network connectivity from DoS attack, it is a good practice to turn on the intrusion detection and prevention systems (IDS and IPS) to detect and prevent such attacks. Lastly, it is recommended not exposing the Docker daemon socket (the main entry point for Docker API) [116] and other unnecessary ports (e.g., SSH Port 22). Limitations: The use of VPN can increase network latency and introduces delays that are bad for adhoc transient container applications such as event-triggered serverless functions or Internet of Things (IoT) containers communicating many small packets rapidly. Therefore, additional research is needed in network protection for such use-case. IDS and IPS use rule or signature-based packet evaluation and therefore not effective against unknown attacks or against an attacker that poses as admin to \"legitimately\" log into the system [59] . IDS which yields many false alarms can lead to \"alert fatigue\" while IPS can consume much network bandwidths.",
            "cite_spans": [
                {
                    "start": 148,
                    "end": 152,
                    "text": "[30]",
                    "ref_id": null
                },
                {
                    "start": 306,
                    "end": 310,
                    "text": "[89]",
                    "ref_id": "BIBREF44"
                },
                {
                    "start": 390,
                    "end": 394,
                    "text": "[71]",
                    "ref_id": "BIBREF40"
                },
                {
                    "start": 682,
                    "end": 687,
                    "text": "[116]",
                    "ref_id": "BIBREF69"
                },
                {
                    "start": 1271,
                    "end": 1275,
                    "text": "[59]",
                    "ref_id": "BIBREF30"
                }
            ],
            "ref_spans": [],
            "section": "Implement Network Controls"
        },
        {
            "text": "The mitigation measures need to enable the logging system to be robust and immutable. One method is the use of message authentication codes (MACs) and digital signatures to produce the secure logs, and to apply Bitcoin blockchain technique to produce a distributed log immutabilization solution [33] , thus ensuring the logs' authenticity and non-repudiation. To resolve the log storage problem, one practice is to use logging drivers to read the data directly from the Docker container's stdout and stderr ouput and to forward the logs to host machine or other endpoints such as syslog, journald, gelf, and others [146] . Limitations: When running the blockchain operation, there is transaction fees (at 0.00016 BTC/KB or USD6.83/KB as of 25th Sep 2021 12 ) and is not sustainable in the long run. Other limitations when using the logging drivers are that the capacity limit of the local storage will determine the size of the log file [37] . If the logs are sent remotely, a network failure will cause the lost of the logs [50].",
            "cite_spans": [
                {
                    "start": 295,
                    "end": 299,
                    "text": "[33]",
                    "ref_id": "BIBREF27"
                },
                {
                    "start": 615,
                    "end": 620,
                    "text": "[146]",
                    "ref_id": null
                },
                {
                    "start": 937,
                    "end": 941,
                    "text": "[37]",
                    "ref_id": null
                }
            ],
            "ref_spans": [],
            "section": "Robust Log Monitoring"
        },
        {
            "text": "The overall containers security analysis we conducted using the STRIDE framework is summarized in Table  1 . It is observed that each of the STRIDE threat occurs in several DFD elements and results in multiple consequences with the aim to deceive, disrupt, disclose information, or to usurp control of the system. Spoofing is about using a fake identity to gain access into the system. GitHub (DS-1), Docker Hub (DS-2) and the containers (P-4, P-5) are the obvious targets for attackers to exploit and to introduce malicious contents in order to deceive (TC-2), retrieve info (TC-1) and to control the systems (TC-4). The efficient and ease-of-use characteristics of the container systems turn out to be the vulnerabilities for the threat to be successful. The ease of access into the code repository and image registry, unrestricted push and pull of the images, and the efficient sharing of host resources by several co-locating containers become the vulnerabilities.",
            "cite_spans": [],
            "ref_spans": [
                {
                    "start": 98,
                    "end": 106,
                    "text": "Table  1",
                    "ref_id": "TABREF1"
                }
            ],
            "section": "Summary of Results"
        },
        {
            "text": "Tampering aims to modify the system or data with the intention to deceive (TC-1) the victim, steals the info (TC-1), disrupts the service (TC-3), and to gain control of the system (TC-4) via the tainted images. This threat has the widest impact to the DFD elements including the data stores of DS-1 and DS-2, all the data flow (DF) links, and the process of image build (P-2). In addition to the vulnerabilities listed earlier, the lack of container image governance is another vulnerability. Docker Hub is an open registry which is accessible by a private (paid membership) or community user. The images are freely uploaded and stored with no patch management or threats scanning rigor. Its integration into the automated CI/CD pipeline process further increases the attack surface.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Summary of Results"
        },
        {
            "text": "Repudiation occurs when an attacker denies an action which he has performed. The logs of a container is not stored in itself as the container is stateless and therefore the kernel will store the logs in the host storage (vulnerability V9). Due to the shared resources characteristic of co-locating containers (V12), an attacker can use a compromised container to access the kernel (P-7) to disable, modify or overwrite logs at the host storage.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Summary of Results"
        },
        {
            "text": "Information disclosure causes information to be revealed to attackers. The attackers will attempt to gain access to data stores at GitHub (DS-1) and Docker Hub (DS-2) to steal information about accounts, source codes, sensitive data, configuration files, etc. A skilled attacker can exploit the sensitive parameters used during the container configuration (P-3) to gain access to files in the host. He can also use the common shared network at the kernel (P-7) to connect two co-locating containers and to exchange unauthorised information.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Summary of Results"
        },
        {
            "text": "Denial of service (DoS) makes the system inaccessible for use. DoS can occur when an attack happens at each of the connecting \"pipe\" (DF-1,2,3,4,5) that links the elements in the container DFD system. A breakage in a connection will result in a change or patch in the application code not being updated in the final image and not deployed or updated in the application container. Proven tactics targeted at the resource isolation measures in the kernel can cause the host resources (eg. CPU, storage) to be inaccessible.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Summary of Results"
        },
        {
            "text": "Elevation of privilege grants the attacker access and control of the system. This is a serious threat which allows the attacker to take control (TC-4) of the host and carry out further damages. The tight integration of the container with the Linux kernel is a critical vulnerability (V10, V11, V12). Therefore, an attacker with access to a compromised container can utilize the Docker daemon (P-6) via exposed network ports and privilege system calls to attack the kernel (P-7) to obtain root control of the host.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Summary of Results"
        },
        {
            "text": "Based on the above analysis, there are some areas which are open for further research. In our STRIDE threat modeling exercise, we focus on the \"supply chain\" from the code repository (using GitHub), to the image registry (Docker Hub), and finally to the Docker host with emphasis on the six elements of STRIDE (Spoofing, Tampering, Repudiation, Information Disclosure, Denial of Service, and Elevation of Privilege). Below, we outline some future research directions in containers security.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Future Research Directions"
        },
        {
            "text": "Enhancement of container engine security In this paper, we use Docker as the representative container engine for security survey as it is the most popular and pervasively used by enterprises and businesses. However, a couple of reports state that an alternative container engine called Kata 13 container which is developed by IBM and Hyper.sh can offer better security isolation while maintaining efficiency and performance and it has a strong reference customer in the form of Baidu AI Cloud [97] , [63] , [94] . Therefore, another direction of study is a comprehensive comparison of the security and performance between Kata container and Docker container and investigate the possibility of a Docker substitute or areas for Docker's security enhancements.",
            "cite_spans": [
                {
                    "start": 493,
                    "end": 497,
                    "text": "[97]",
                    "ref_id": "BIBREF52"
                },
                {
                    "start": 500,
                    "end": 504,
                    "text": "[63]",
                    "ref_id": "BIBREF34"
                },
                {
                    "start": 507,
                    "end": 511,
                    "text": "[94]",
                    "ref_id": "BIBREF49"
                }
            ],
            "ref_spans": [],
            "section": "Future Research Directions"
        },
        {
            "text": "Security of alternative container technology In recent years, there have been studies on Unikernel and its advantages of small footprint, speed and a reduced attack surface [141] , [95] , [115] , [14] , [15] . This technology presents a useful area of study to determine the feasibility of replacing the container technology in order to reduce the vulnerabilities faced by the current container technology.",
            "cite_spans": [
                {
                    "start": 173,
                    "end": 178,
                    "text": "[141]",
                    "ref_id": "BIBREF92"
                },
                {
                    "start": 181,
                    "end": 185,
                    "text": "[95]",
                    "ref_id": "BIBREF50"
                },
                {
                    "start": 188,
                    "end": 193,
                    "text": "[115]",
                    "ref_id": "BIBREF67"
                },
                {
                    "start": 196,
                    "end": 200,
                    "text": "[14]",
                    "ref_id": "BIBREF12"
                },
                {
                    "start": 203,
                    "end": 207,
                    "text": "[15]",
                    "ref_id": "BIBREF13"
                }
            ],
            "ref_spans": [],
            "section": "Future Research Directions"
        },
        {
            "text": "Vulnerabilities of containers using different kernels There are no comparison studies of container security between one which is based on Linux vs one based on Windows. Both the Linux and Windows kernels are designed differently and there is a large Windows application installed base and therefore it is of interest to know the comparative security strengths and weaknesses between the two. So far, most of the security analysis of the Windows and Linux operating systems were carried out several years ago and were considered out-dated [167] , [153] , [132] , [9] , [168] .",
            "cite_spans": [
                {
                    "start": 538,
                    "end": 543,
                    "text": "[167]",
                    "ref_id": "BIBREF99"
                },
                {
                    "start": 546,
                    "end": 551,
                    "text": "[153]",
                    "ref_id": null
                },
                {
                    "start": 554,
                    "end": 559,
                    "text": "[132]",
                    "ref_id": "BIBREF84"
                },
                {
                    "start": 562,
                    "end": 565,
                    "text": "[9]",
                    "ref_id": "BIBREF7"
                },
                {
                    "start": 568,
                    "end": 573,
                    "text": "[168]",
                    "ref_id": "BIBREF100"
                }
            ],
            "ref_spans": [],
            "section": "Future Research Directions"
        },
        {
            "text": "There is little study about container vulnerability and threats detection tools and the evaluations of their performances. To date, there are many container image scanning tools such as Clair, Anchore, Trivy, etc.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Evaluation of container scanning tools"
        },
        {
            "text": "[55] but few research into their effectiveness, their gaps and their impacts to the container's security. Javed and Toor of [84] evaluated three scanners of Clair, Anchore and Microscanner in terms of the detection coverage and detection hit ratio for only 59 Docker Java-based images. Tunde-Onadele et al.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Evaluation of container scanning tools"
        },
        {
            "text": "[155] compared the detection accuracy of a static scanner (Clair) and a dynamic runtime detection scheme which analyzed the system call features using machine learning methods, like K-means, Self-Organizing Map and others to detect anomaly. Therefore, there is a need to study the available vulnerability detection methods and tools and to carry out a comprehensive evaluation of them.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Evaluation of container scanning tools"
        },
        {
            "text": "An end-to-end practical guide to securing containers There is no one structured and integrated approach for container security. Today, each security tool or process only targets a specific area and to address it independently. For example, in the code build phase a developer will need to remember to scan the image, keep credentials in the secret vaults, verify the image signature and to sign it when pushing it to the registry, and all of these steps require different tools and processes. During the pull and deployment phase, a developer will need to scan the image for new vulnerabilities and to configure least privileges, network segmentation and least kernel interaction (e.g., minimal system calls) in runtime. The developer will then need to ensure the integrity of the images (e.g., patch and re-image) throughout the lifecycle of the container and to run monitoring and logging mechanisms to keep the container and its users safe. The National Institute of Standards and Technology (NIST) published a comprehensive container security guide in 2017 [147] and it contained recommendations of best practices for specific components in a container architecture but did not provide working level details and its application in practical use-cases (e.g., via code repo, image registry, deployment, etc). Therefore, there is a need for the research community to produce industry relevant and practical guides for container security. TC-4 Same as above. Same as above",
            "cite_spans": [
                {
                    "start": 1061,
                    "end": 1066,
                    "text": "[147]",
                    "ref_id": "BIBREF97"
                }
            ],
            "ref_spans": [],
            "section": "Evaluation of container scanning tools"
        },
        {
            "text": "The advancement of containers has helped enterprises and organizations to improve their processes and enable new business models. However, its full utilization has been daunted by the various security risks posed in the containers ecosystem. In this paper, we first assessed the security landscape in containers. In particular, we used the STRIDE framework to identify vulnerabilities, threats and threat consequences on the entire container ecosystem. From our study, we found that many of the vulnerabilities are due to the containers' shared access to the host operating system's kernel. While there were isolation measures (e.g., namespaces) and resource control mechanisms (e.g., cgroups) in place, these could be breached when misconfigurations and liberal use of system calls and capabilities happened. From the ecosystem perspective, the numerous external entities who involved in writing the code, building the image, configuring the installation, setting up the network connectivities, and eventually deploying the application in production containers greatly increased the attack surfaces. Then, we conducted a systematic survey on the existing works on containers security. In particular, we assessed the strengths and weaknesses of existing mitigation strategies against the identified security threats in containers. Based on our assessment, most of the existing mitigation strategies have certain limitations and not sufficient to address the security risks posed to the container systems. Therefore, we have also outlined several areas of future research directions to enhance the security of containers. We hope this paper will help practitioners and researchers to be aware of the current threat landscape and security gaps in containers, and open up areas for further explorations and studies. N.:",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Conclusion"
        },
        {
            "text": "Attacking ",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Conclusion"
        }
    ],
    "bib_entries": {
        "BIBREF0": {
            "ref_id": "b0",
            "title": "Applying bag of system calls for anomalous behavior detection of applications in linux containers",
            "authors": [
                {
                    "first": "A",
                    "middle": [],
                    "last": "Abed",
                    "suffix": ""
                },
                {
                    "first": "T",
                    "middle": [],
                    "last": "Clancy",
                    "suffix": ""
                },
                {
                    "first": "D",
                    "middle": [],
                    "last": "Levy",
                    "suffix": ""
                }
            ],
            "year": 2015,
            "venue": "IEEE Globecom Workshops",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF1": {
            "ref_id": "b1",
            "title": "Can a ddos attack meltdown my data center? a simulation study and defense strategies",
            "authors": [
                {
                    "first": "Z",
                    "middle": [],
                    "last": "Anwar",
                    "suffix": ""
                },
                {
                    "first": "A",
                    "middle": [
                        "W"
                    ],
                    "last": "Malik",
                    "suffix": ""
                }
            ],
            "year": 2014,
            "venue": "IEEE Communications Letters",
            "volume": "18",
            "issn": "7",
            "pages": "1175--1178",
            "other_ids": {
                "DOI": [
                    "10.1109/LCOMM.2014.2328587"
                ]
            }
        },
        "BIBREF2": {
            "ref_id": "b2",
            "title": "All you need to know about securing your private keys",
            "authors": [
                {
                    "first": "",
                    "middle": [],
                    "last": "Appviewx",
                    "suffix": ""
                }
            ],
            "year": 2019,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF3": {
            "ref_id": "b3",
            "title": "Improving cybersecurity hygiene through jit patching",
            "authors": [
                {
                    "first": "F",
                    "middle": [],
                    "last": "Araujo",
                    "suffix": ""
                },
                {
                    "first": "T",
                    "middle": [],
                    "last": "Taylor",
                    "suffix": ""
                }
            ],
            "year": 2020,
            "venue": "Proceedings of the 28th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering",
            "volume": "",
            "issn": "",
            "pages": "1421--1432",
            "other_ids": {
                "DOI": [
                    "10.1145/3368089.3417056"
                ]
            }
        },
        "BIBREF4": {
            "ref_id": "b4",
            "title": "The journey to 150,000 containers at paypal",
            "authors": [
                {
                    "first": "J",
                    "middle": [],
                    "last": "Armstrong",
                    "suffix": ""
                }
            ],
            "year": 2017,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF5": {
            "ref_id": "b5",
            "title": "Docker image security scanning: What it can and can't do",
            "authors": [
                {
                    "first": "M",
                    "middle": [],
                    "last": "Att&amp;ck&quot;",
                    "suffix": ""
                }
            ],
            "year": 2021,
            "venue": "Os credential dumping",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF6": {
            "ref_id": "b6",
            "title": "Half of 4 million public docker hub images found to have critical vulnerabilities",
            "authors": [
                {
                    "first": "H",
                    "middle": [],
                    "last": "Barua",
                    "suffix": ""
                }
            ],
            "year": 2020,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF7": {
            "ref_id": "b7",
            "title": "Windows and linux operating systems from A security perspective",
            "authors": [
                {
                    "first": "Y",
                    "middle": [],
                    "last": "Bassil",
                    "suffix": ""
                }
            ],
            "year": 2012,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF8": {
            "ref_id": "b8",
            "title": "Ethical hacking: Log tampering 101",
            "authors": [
                {
                    "first": "G",
                    "middle": [],
                    "last": "Belding",
                    "suffix": ""
                }
            ],
            "year": 2019,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF9": {
            "ref_id": "b9",
            "title": "5 open source tools for container security",
            "authors": [
                {
                    "first": "S",
                    "middle": [],
                    "last": "Bhat",
                    "suffix": ""
                }
            ],
            "year": 2018,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF10": {
            "ref_id": "b10",
            "title": "Understanding the Linux Kernel",
            "authors": [
                {
                    "first": "D",
                    "middle": [],
                    "last": "Bovet",
                    "suffix": ""
                },
                {
                    "first": "C",
                    "middle": [],
                    "last": "Marco",
                    "suffix": ""
                }
            ],
            "year": 2007,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF11": {
            "ref_id": "b11",
            "title": "Docker container security in cloud computing",
            "authors": [
                {
                    "first": "K",
                    "middle": [],
                    "last": "Brady",
                    "suffix": ""
                },
                {
                    "first": "S",
                    "middle": [],
                    "last": "Moon",
                    "suffix": ""
                },
                {
                    "first": "T",
                    "middle": [],
                    "last": "Nguyen",
                    "suffix": ""
                },
                {
                    "first": "J",
                    "middle": [],
                    "last": "Coffman",
                    "suffix": ""
                }
            ],
            "year": 2020,
            "venue": "2020 10th Annual Computing and Communication Workshop and Conference (CCWC)",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {
                "DOI": [
                    "10.1109/ccwc47524.2020.9031195"
                ]
            }
        },
        "BIBREF12": {
            "ref_id": "b12",
            "title": "Enhancing cloud security and privacy: The unikernel solution",
            "authors": [
                {
                    "first": "A",
                    "middle": [],
                    "last": "Bratterud",
                    "suffix": ""
                },
                {
                    "first": "A",
                    "middle": [],
                    "last": "Happe",
                    "suffix": ""
                },
                {
                    "first": "R",
                    "middle": [],
                    "last": "Duncan",
                    "suffix": ""
                }
            ],
            "year": 2017,
            "venue": "the Eighth International Conferences on Cloud Computing, GRIDs, and Virtualization",
            "volume": "",
            "issn": "",
            "pages": "79--86",
            "other_ids": {}
        },
        "BIBREF13": {
            "ref_id": "b13",
            "title": "Includeos: A minimal, resource efficient unikernel for cloud services",
            "authors": [
                {
                    "first": "A",
                    "middle": [],
                    "last": "Bratterud",
                    "suffix": ""
                },
                {
                    "first": "A",
                    "middle": [
                        "A"
                    ],
                    "last": "Walla",
                    "suffix": ""
                },
                {
                    "first": "H",
                    "middle": [],
                    "last": "Haugerud",
                    "suffix": ""
                },
                {
                    "first": "P",
                    "middle": [
                        "E"
                    ],
                    "last": "Engelstad",
                    "suffix": ""
                },
                {
                    "first": "K",
                    "middle": [],
                    "last": "Begnum",
                    "suffix": ""
                }
            ],
            "year": 2015,
            "venue": "2015 IEEE 7th International Conference on Cloud Computing Technology and Science (CloudCom)",
            "volume": "",
            "issn": "",
            "pages": "250--257",
            "other_ids": {
                "DOI": [
                    "10.1109/CloudCom.2015.89"
                ]
            }
        },
        "BIBREF14": {
            "ref_id": "b14",
            "title": "Bug 1868453 (cve-2020-14356) -cve-2020-14356 kernel: Use after free vulnerability in cgroup bpf component",
            "authors": [
                {
                    "first": ";",
                    "middle": [
                        "R H"
                    ],
                    "last": "Bugzilla",
                    "suffix": ""
                }
            ],
            "year": 2021,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF15": {
            "ref_id": "b15",
            "title": "Analysis of docker security",
            "authors": [
                {
                    "first": "T",
                    "middle": [],
                    "last": "Bui",
                    "suffix": ""
                }
            ],
            "year": 2015,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF16": {
            "ref_id": "b16",
            "title": "for-containers-now-available-4c2359654bf1, online 19. Chako, 20",
            "authors": [
                {
                    "first": "J",
                    "middle": [],
                    "last": "Burns",
                    "suffix": ""
                },
                {
                    "first": "J",
                    "middle": [],
                    "last": "Chelladhurai",
                    "suffix": ""
                },
                {
                    "first": "P",
                    "middle": [
                        "R"
                    ],
                    "last": "Chelliah",
                    "suffix": ""
                },
                {
                    "first": "S",
                    "middle": [
                        "A"
                    ],
                    "last": "Kumar",
                    "suffix": ""
                }
            ],
            "year": 2016,
            "venue": "2016 IEEE International Conference on Services Computing (SCC)",
            "volume": "",
            "issn": "",
            "pages": "856--859",
            "other_ids": {
                "DOI": [
                    "10.1109/SCC.2016.123"
                ]
            }
        },
        "BIBREF17": {
            "ref_id": "b17",
            "title": "Making containers more isolated: An overview of sandboxed container technologies",
            "authors": [
                {
                    "first": "J",
                    "middle": [],
                    "last": "Chen",
                    "suffix": ""
                }
            ],
            "year": 2019,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF18": {
            "ref_id": "b18",
            "title": "A container-based dos attack-resilient control framework for real-time UAV systems",
            "authors": [
                {
                    "first": "J",
                    "middle": [],
                    "last": "Chen",
                    "suffix": ""
                },
                {
                    "first": "Z",
                    "middle": [],
                    "last": "Feng",
                    "suffix": ""
                },
                {
                    "first": "J",
                    "middle": [],
                    "last": "Wen",
                    "suffix": ""
                },
                {
                    "first": "B",
                    "middle": [],
                    "last": "Liu",
                    "suffix": ""
                },
                {
                    "first": "L",
                    "middle": [],
                    "last": "Sha",
                    "suffix": ""
                }
            ],
            "year": 2018,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF19": {
            "ref_id": "b19",
            "title": "17 backdoored docker images removed from docker hub",
            "authors": [
                {
                    "first": "C",
                    "middle": [],
                    "last": "Cimpanu",
                    "suffix": ""
                }
            ],
            "year": 2018,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF20": {
            "ref_id": "b20",
            "title": "A hacker is wiping git repositories and asking for a ransom",
            "authors": [
                {
                    "first": "C",
                    "middle": [],
                    "last": "Cimpanu",
                    "suffix": ""
                }
            ],
            "year": 2019,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF21": {
            "ref_id": "b21",
            "title": "A hacking group is hijacking docker systems with exposed api endpoints",
            "authors": [
                {
                    "first": "C",
                    "middle": [],
                    "last": "Cimpanu",
                    "suffix": ""
                }
            ],
            "year": 2019,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF22": {
            "ref_id": "b22",
            "title": "Nissan source code leaked online after git repo misconfiguration",
            "authors": [
                {
                    "first": "C",
                    "middle": [],
                    "last": "Cimpanu",
                    "suffix": ""
                }
            ],
            "year": 2021,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF23": {
            "ref_id": "b23",
            "title": "Catalin: Mercedes-benz onboard logic unit (olu) source code leaks online",
            "authors": [
                {
                    "first": "",
                    "middle": [],
                    "last": "Cimpanu",
                    "suffix": ""
                }
            ],
            "year": 2020,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF24": {
            "ref_id": "b24",
            "title": "article/personal-data-of-16-million-brazilian-covid-19-patients-exposed-online/, online 30. CIS: Cis docker benchmark",
            "authors": [
                {
                    "first": "Catalin",
                    "middle": [],
                    "last": "Cimpanu",
                    "suffix": ""
                }
            ],
            "year": 2020,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF25": {
            "ref_id": "b25",
            "title": "An empirical analysis of the docker container ecosystem on github",
            "authors": [
                {
                    "first": "J",
                    "middle": [],
                    "last": "Cito",
                    "suffix": ""
                },
                {
                    "first": "G",
                    "middle": [],
                    "last": "Schermann",
                    "suffix": ""
                },
                {
                    "first": "J",
                    "middle": [
                        "E"
                    ],
                    "last": "Wittern",
                    "suffix": ""
                },
                {
                    "first": "P",
                    "middle": [],
                    "last": "Leitner",
                    "suffix": ""
                },
                {
                    "first": "S",
                    "middle": [],
                    "last": "Zumberi",
                    "suffix": ""
                },
                {
                    "first": "H",
                    "middle": [
                        "C"
                    ],
                    "last": "Gall",
                    "suffix": ""
                }
            ],
            "year": 2017,
            "venue": "2017 IEEE/ACM 14th International Conference on Mining Software Repositories (MSR)",
            "volume": "",
            "issn": "",
            "pages": "323--333",
            "other_ids": {
                "DOI": [
                    "10.1109/MSR.2017.67"
                ]
            }
        },
        "BIBREF26": {
            "ref_id": "b26",
            "title": "To docker or not to docker: A security perspective",
            "authors": [
                {
                    "first": "T",
                    "middle": [],
                    "last": "Combe",
                    "suffix": ""
                },
                {
                    "first": "A",
                    "middle": [],
                    "last": "Martin",
                    "suffix": ""
                },
                {
                    "first": "R",
                    "middle": [],
                    "last": "Pietro",
                    "suffix": ""
                }
            ],
            "year": 2016,
            "venue": "IEEE Cloud Computing",
            "volume": "3",
            "issn": "5",
            "pages": "54--62",
            "other_ids": {}
        },
        "BIBREF27": {
            "ref_id": "b27",
            "title": "Distributed immutabilization of secure logs",
            "authors": [
                {
                    "first": "J",
                    "middle": [],
                    "last": "Cucurull",
                    "suffix": ""
                },
                {
                    "first": "J",
                    "middle": [],
                    "last": "Puiggal\u00ed",
                    "suffix": ""
                }
            ],
            "year": 2016,
            "venue": "Security and Trust Management",
            "volume": "9871",
            "issn": "",
            "pages": "122--137",
            "other_ids": {
                "DOI": [
                    "10.1007/978-3-319-46598-2_9"
                ]
            }
        },
        "BIBREF28": {
            "ref_id": "b28",
            "title": "Docker: Run the docker daemon as a non-root user (rootless mode",
            "authors": [],
            "year": 2020,
            "venue": "CVE Details: Linux kernel: Vulnerability statistics",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF29": {
            "ref_id": "b29",
            "title": "An empirical study of docker vulnerabilities and of static code analysis applicability",
            "authors": [
                {
                    "first": "A",
                    "middle": [],
                    "last": "Duarte",
                    "suffix": ""
                },
                {
                    "first": "N",
                    "middle": [],
                    "last": "Antunes",
                    "suffix": ""
                }
            ],
            "year": 2018,
            "venue": "Eighth Latin-American Symposium on Dependable Computing (LADC). pp",
            "volume": "",
            "issn": "",
            "pages": "27--36",
            "other_ids": {
                "DOI": [
                    "10.1109/LADC.2018.00013"
                ]
            }
        },
        "BIBREF30": {
            "ref_id": "b30",
            "title": "5 things an ids/ips can't do",
            "authors": [
                {
                    "first": "L",
                    "middle": [],
                    "last": "Dwyer",
                    "suffix": ""
                }
            ],
            "year": 2018,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF31": {
            "ref_id": "b31",
            "title": "Attackers found building malicious container images directly on host",
            "authors": [
                {
                    "first": "R",
                    "middle": [],
                    "last": "Field",
                    "suffix": ""
                }
            ],
            "year": 2020,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF32": {
            "ref_id": "b32",
            "title": "Why a privileged container in docker is a bad idea",
            "authors": [
                {
                    "first": "D",
                    "middle": [],
                    "last": "Fiser",
                    "suffix": ""
                },
                {
                    "first": "A",
                    "middle": [],
                    "last": "Oliveira",
                    "suffix": ""
                }
            ],
            "year": 2019,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF33": {
            "ref_id": "b33",
            "title": "Docker bug allows root access to host file system",
            "authors": [
                {
                    "first": "D",
                    "middle": [],
                    "last": "Fisher",
                    "suffix": ""
                }
            ],
            "year": 2019,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF34": {
            "ref_id": "b34",
            "title": "A review of native container security for running applications",
            "authors": [
                {
                    "first": "O",
                    "middle": [],
                    "last": "Flauzac",
                    "suffix": ""
                },
                {
                    "first": "F",
                    "middle": [],
                    "last": "Mauhourat",
                    "suffix": ""
                },
                {
                    "first": "F",
                    "middle": [],
                    "last": "Nolot",
                    "suffix": ""
                }
            ],
            "year": 2019,
            "venue": "The 10th International Conference on Sustainable Energy Information Technology 64. Gamage, W.: Common container security threats",
            "volume": "175",
            "issn": "",
            "pages": "157--164",
            "other_ids": {
                "DOI": [
                    "10.1016/j.procs.2020.07.025"
                ]
            }
        },
        "BIBREF35": {
            "ref_id": "b35",
            "title": "Houdini's escape: Breaking the resource rein of linux control groups",
            "authors": [
                {
                    "first": "X",
                    "middle": [],
                    "last": "Gao",
                    "suffix": ""
                },
                {
                    "first": "Z",
                    "middle": [],
                    "last": "Gu",
                    "suffix": ""
                },
                {
                    "first": "Z",
                    "middle": [],
                    "last": "Li",
                    "suffix": ""
                },
                {
                    "first": "H",
                    "middle": [],
                    "last": "Jamjoom",
                    "suffix": ""
                },
                {
                    "first": "C",
                    "middle": [],
                    "last": "Wang",
                    "suffix": ""
                }
            ],
            "year": 2019,
            "venue": "ACM SIGSAC Conference on Computer and Communications",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF36": {
            "ref_id": "b36",
            "title": "Automated cloud infrastructure, continuous integration and continuous delivery using docker with robust container security",
            "authors": [
                {
                    "first": "S",
                    "middle": [],
                    "last": "Garg",
                    "suffix": ""
                },
                {
                    "first": "S",
                    "middle": [],
                    "last": "Garg",
                    "suffix": ""
                }
            ],
            "year": 2019,
            "venue": "2019 IEEE Conference on Multimedia Information Processing and Retrieval (MIPR). pp",
            "volume": "",
            "issn": "",
            "pages": "467--470",
            "other_ids": {
                "DOI": [
                    "10.1109/MIPR.2019.00094"
                ]
            }
        },
        "BIBREF37": {
            "ref_id": "b37",
            "title": "Tutorial: Logging with journald",
            "authors": [
                {
                    "first": "R",
                    "middle": [],
                    "last": "Gheorghe",
                    "suffix": ""
                }
            ],
            "year": 2020,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF38": {
            "ref_id": "b38",
            "title": "Github Docs: Two-factor authentication",
            "authors": [],
            "year": 2021,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF39": {
            "ref_id": "b39",
            "title": "Why non-root containers are important for security",
            "authors": [
                {
                    "first": "R",
                    "middle": [
                        "C"
                    ],
                    "last": "Godoy",
                    "suffix": ""
                }
            ],
            "year": 2018,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF40": {
            "ref_id": "b40",
            "title": "Scalability evaluation of vpn technologies for secure container networking",
            "authors": [
                {
                    "first": "T",
                    "middle": [],
                    "last": "Goethals",
                    "suffix": ""
                },
                {
                    "first": "D",
                    "middle": [],
                    "last": "Kerkhove",
                    "suffix": ""
                },
                {
                    "first": "B",
                    "middle": [],
                    "last": "Volckaert",
                    "suffix": ""
                },
                {
                    "first": "F",
                    "middle": [
                        "D"
                    ],
                    "last": "Turck",
                    "suffix": ""
                }
            ],
            "year": 2019,
            "venue": "2019 15th International Conference on Network and Service Management (CNSM)",
            "volume": "",
            "issn": "",
            "pages": "1--7",
            "other_ids": {
                "DOI": [
                    "10.23919/CNSM46954.2019.9012673"
                ]
            }
        },
        "BIBREF41": {
            "ref_id": "b41",
            "title": "3 reasons why you should always run microservices apps in containers",
            "authors": [
                {
                    "first": "B",
                    "middle": [],
                    "last": "Golden",
                    "suffix": ""
                }
            ],
            "year": 2019,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF42": {
            "ref_id": "b42",
            "title": "Learning classifiers for misuse detection using a bag of system calls representation",
            "authors": [
                {
                    "first": "D",
                    "middle": [
                        "K"
                    ],
                    "last": "Kang",
                    "suffix": ""
                },
                {
                    "first": "D",
                    "middle": [],
                    "last": "Fuller",
                    "suffix": ""
                },
                {
                    "first": "V",
                    "middle": [],
                    "last": "Honavar",
                    "suffix": ""
                }
            ],
            "year": 2005,
            "venue": "Intelligence and Security Informatics",
            "volume": "3495",
            "issn": "",
            "pages": "511--516",
            "other_ids": {}
        },
        "BIBREF43": {
            "ref_id": "b43",
            "title": "Adapting threat modeling methods for the automotive industry",
            "authors": [
                {
                    "first": "A",
                    "middle": [],
                    "last": "Karahasanovic",
                    "suffix": ""
                },
                {
                    "first": "P",
                    "middle": [],
                    "last": "Kleberger",
                    "suffix": ""
                },
                {
                    "first": "M",
                    "middle": [],
                    "last": "Almgren",
                    "suffix": ""
                }
            ],
            "year": 2017,
            "venue": "Proceedings of Escar Europe conference | Embedded Security in Cars",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF44": {
            "ref_id": "b44",
            "title": "What is dns cache poisoning and dns spoofing?",
            "authors": [
                {
                    "first": "",
                    "middle": [],
                    "last": "Kaspersky",
                    "suffix": ""
                }
            ],
            "year": 2021,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF45": {
            "ref_id": "b45",
            "title": "Build and ship any application anywhere",
            "authors": [
                {
                    "first": "S",
                    "middle": [],
                    "last": "Kerner",
                    "suffix": ""
                }
            ],
            "year": 2019,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF46": {
            "ref_id": "b46",
            "title": "Stride-based threat modeling for cyber-physical systems",
            "authors": [
                {
                    "first": "R",
                    "middle": [],
                    "last": "Khan",
                    "suffix": ""
                },
                {
                    "first": "K",
                    "middle": [],
                    "last": "Mclaughlin",
                    "suffix": ""
                },
                {
                    "first": "D",
                    "middle": [],
                    "last": "Laverty",
                    "suffix": ""
                },
                {
                    "first": "S",
                    "middle": [],
                    "last": "Sezer",
                    "suffix": ""
                }
            ],
            "year": 2017,
            "venue": "2017 IEEE PES Innovative Smart Grid Technologies Conference Europe",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF47": {
            "ref_id": "b47",
            "title": "A survey of domain name system vulnerabilities and attacks",
            "authors": [
                {
                    "first": "T",
                    "middle": [
                        "H"
                    ],
                    "last": "Kim",
                    "suffix": ""
                },
                {
                    "first": "D",
                    "middle": [],
                    "last": "Reeves",
                    "suffix": ""
                }
            ],
            "year": 2020,
            "venue": "Journal of Surveillance, Security and Safety",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {
                "DOI": [
                    "10.20517/jsss.2020.14"
                ]
            }
        },
        "BIBREF48": {
            "ref_id": "b48",
            "title": "gitignore mistake that everyone makes",
            "authors": [
                {
                    "first": "G",
                    "middle": [],
                    "last": "Kuizinas",
                    "suffix": ""
                }
            ],
            "year": 2020,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF49": {
            "ref_id": "b49",
            "title": "Performance analysis between runc and kata container runtime",
            "authors": [
                {
                    "first": "R",
                    "middle": [],
                    "last": "Kumar",
                    "suffix": ""
                },
                {
                    "first": "B",
                    "middle": [],
                    "last": "Thangaraju",
                    "suffix": ""
                }
            ],
            "year": 2020,
            "venue": "2020 IEEE International Conference on Electronics, Computing and Communication Technologies (CONECCT)",
            "volume": "",
            "issn": "",
            "pages": "1--4",
            "other_ids": {
                "DOI": [
                    "10.1109/CONECCT50063.2020.9198653"
                ]
            }
        },
        "BIBREF50": {
            "ref_id": "b50",
            "title": "A linux in unikernel clothing",
            "authors": [
                {
                    "first": "H",
                    "middle": [
                        "C"
                    ],
                    "last": "Kuo",
                    "suffix": ""
                },
                {
                    "first": "D",
                    "middle": [],
                    "last": "Williams",
                    "suffix": ""
                },
                {
                    "first": "R",
                    "middle": [],
                    "last": "Koller",
                    "suffix": ""
                },
                {
                    "first": "S",
                    "middle": [],
                    "last": "Mohan",
                    "suffix": ""
                }
            ],
            "year": 2020,
            "venue": "Proceedings of the Fifteenth European Conference on Computer Systems. EuroSys '20",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {
                "DOI": [
                    "10.1145/3342195.3387526"
                ]
            }
        },
        "BIBREF51": {
            "ref_id": "b51",
            "title": "Speaker: Split-phase execution of application containers",
            "authors": [
                {
                    "first": "L",
                    "middle": [],
                    "last": "Lei",
                    "suffix": ""
                },
                {
                    "first": "J",
                    "middle": [],
                    "last": "Sun",
                    "suffix": ""
                },
                {
                    "first": "K",
                    "middle": [],
                    "last": "Sun",
                    "suffix": ""
                },
                {
                    "first": "C",
                    "middle": [],
                    "last": "Shenefiel",
                    "suffix": ""
                },
                {
                    "first": "R",
                    "middle": [],
                    "last": "Ma",
                    "suffix": ""
                },
                {
                    "first": "Y",
                    "middle": [],
                    "last": "Wang",
                    "suffix": ""
                },
                {
                    "first": "Q",
                    "middle": [],
                    "last": "Li",
                    "suffix": ""
                }
            ],
            "year": 2017,
            "venue": "International Conference on Detection of Intrusions and Malware, and Vulnerability Assessment",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF52": {
            "ref_id": "b52",
            "title": "The road to kata containers 2",
            "authors": [
                {
                    "first": "H",
                    "middle": [],
                    "last": "Li",
                    "suffix": ""
                }
            ],
            "year": 2020,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF53": {
            "ref_id": "b53",
            "title": "A measurement study on linux container security: Attacks and countermeasures",
            "authors": [
                {
                    "first": "X",
                    "middle": [],
                    "last": "Lin",
                    "suffix": ""
                },
                {
                    "first": "L",
                    "middle": [],
                    "last": "Lei",
                    "suffix": ""
                },
                {
                    "first": "Y",
                    "middle": [],
                    "last": "Wang",
                    "suffix": ""
                },
                {
                    "first": "J",
                    "middle": [],
                    "last": "Jing",
                    "suffix": ""
                },
                {
                    "first": "K",
                    "middle": [],
                    "last": "Sun",
                    "suffix": ""
                },
                {
                    "first": "Q",
                    "middle": [],
                    "last": "Zhou",
                    "suffix": ""
                }
            ],
            "year": 2018,
            "venue": "Proceedings of the 34th Annual Computer Security Applications Conference",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF54": {
            "ref_id": "b54",
            "title": "Cdl: Classified distributed learning for detecting security attacks in containerized applications",
            "authors": [
                {
                    "first": "Y",
                    "middle": [],
                    "last": "Lin",
                    "suffix": ""
                },
                {
                    "first": "O",
                    "middle": [],
                    "last": "Tunde-Onadele",
                    "suffix": ""
                },
                {
                    "first": "X",
                    "middle": [],
                    "last": "Gu",
                    "suffix": ""
                }
            ],
            "year": 2020,
            "venue": "ACSAC '20: Annual Computer Security Applications Conference",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF55": {
            "ref_id": "b55",
            "title": "Microservices: architecture, container, and challenges",
            "authors": [
                {
                    "first": "G",
                    "middle": [],
                    "last": "Liu",
                    "suffix": ""
                },
                {
                    "first": "B",
                    "middle": [],
                    "last": "Huang",
                    "suffix": ""
                },
                {
                    "first": "Z",
                    "middle": [],
                    "last": "Liang",
                    "suffix": ""
                },
                {
                    "first": "M",
                    "middle": [],
                    "last": "Qin",
                    "suffix": ""
                },
                {
                    "first": "H",
                    "middle": [],
                    "last": "Zhou",
                    "suffix": ""
                },
                {
                    "first": "Z",
                    "middle": [],
                    "last": "Li",
                    "suffix": ""
                }
            ],
            "year": 2020,
            "venue": "2020 IEEE 20th International Conference on Software Quality, Reliability and Security Companion (QRS-C)",
            "volume": "",
            "issn": "",
            "pages": "629--635",
            "other_ids": {
                "DOI": [
                    "10.1109/QRS-C51114.2020.00107"
                ]
            }
        },
        "BIBREF56": {
            "ref_id": "b56",
            "title": "Understanding the security risks of docker hub",
            "authors": [
                {
                    "first": "P",
                    "middle": [],
                    "last": "Liu",
                    "suffix": ""
                },
                {
                    "first": "S",
                    "middle": [],
                    "last": "Ji",
                    "suffix": ""
                },
                {
                    "first": "L",
                    "middle": [],
                    "last": "Fu",
                    "suffix": ""
                },
                {
                    "first": "K",
                    "middle": [],
                    "last": "Lu",
                    "suffix": ""
                },
                {
                    "first": "X",
                    "middle": [],
                    "last": "Zhang",
                    "suffix": ""
                },
                {
                    "first": "W",
                    "middle": [
                        "H"
                    ],
                    "last": "Lee",
                    "suffix": ""
                },
                {
                    "first": "T",
                    "middle": [],
                    "last": "Lu",
                    "suffix": ""
                },
                {
                    "first": "W",
                    "middle": [],
                    "last": "Chen",
                    "suffix": ""
                },
                {
                    "first": "R",
                    "middle": [],
                    "last": "Beyah",
                    "suffix": ""
                }
            ],
            "year": 2020,
            "venue": "European Symposium on Research in Computer Security -ESORICS 2020",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF57": {
            "ref_id": "b57",
            "title": "Whispers between the containers: Highcapacity covert channel attacks in docker",
            "authors": [
                {
                    "first": "Y",
                    "middle": [],
                    "last": "Luo",
                    "suffix": ""
                },
                {
                    "first": "W",
                    "middle": [],
                    "last": "Luo",
                    "suffix": ""
                },
                {
                    "first": "X",
                    "middle": [],
                    "last": "Sun",
                    "suffix": ""
                },
                {
                    "first": "Q",
                    "middle": [],
                    "last": "Shen",
                    "suffix": ""
                },
                {
                    "first": "A",
                    "middle": [],
                    "last": "Ruan",
                    "suffix": ""
                },
                {
                    "first": "Z",
                    "middle": [],
                    "last": "Wu",
                    "suffix": ""
                }
            ],
            "year": 2016,
            "venue": "IEEE Trustcom",
            "volume": "",
            "issn": "",
            "pages": "630--637",
            "other_ids": {
                "DOI": [
                    "10.1109/TrustCom.2016.0119"
                ]
            }
        },
        "BIBREF58": {
            "ref_id": "b58",
            "title": "Docker ecosystem -vulnerability analysis",
            "authors": [
                {
                    "first": "A",
                    "middle": [],
                    "last": "Martin",
                    "suffix": ""
                },
                {
                    "first": "S",
                    "middle": [],
                    "last": "Raponi",
                    "suffix": ""
                },
                {
                    "first": "T",
                    "middle": [],
                    "last": "Combe",
                    "suffix": ""
                },
                {
                    "first": "R",
                    "middle": [],
                    "last": "Pietro",
                    "suffix": ""
                }
            ],
            "year": 2018,
            "venue": "Computer Communications",
            "volume": "122",
            "issn": "",
            "pages": "30--43",
            "other_ids": {}
        },
        "BIBREF59": {
            "ref_id": "b59",
            "title": "Incident of the week: Impact of docker security breach",
            "authors": [
                {
                    "first": "K",
                    "middle": [],
                    "last": "Matthews",
                    "suffix": ""
                }
            ],
            "year": 2019,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF60": {
            "ref_id": "b60",
            "title": "Understanding root inside and outside a container",
            "authors": [
                {
                    "first": "S",
                    "middle": [],
                    "last": "Mccarty",
                    "suffix": ""
                }
            ],
            "year": 2019,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF61": {
            "ref_id": "b61",
            "title": "The hybrid threat modeling method",
            "authors": [
                {
                    "first": "N",
                    "middle": [],
                    "last": "Mead",
                    "suffix": ""
                },
                {
                    "first": "F",
                    "middle": [],
                    "last": "Shull",
                    "suffix": ""
                }
            ],
            "year": 2018,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF62": {
            "ref_id": "b62",
            "title": "password-policy-recommendations?view=o365-worldwide, online 108",
            "authors": [],
            "year": 2021,
            "venue": "Password policy recommendations",
            "volume": "365",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF63": {
            "ref_id": "b63",
            "title": "Threat alert: Market-first container image built to attack kubernetes clusters",
            "authors": [
                {
                    "first": "A",
                    "middle": [],
                    "last": "Morag",
                    "suffix": ""
                },
                {
                    "first": "G",
                    "middle": [],
                    "last": "Singer",
                    "suffix": ""
                }
            ],
            "year": 2020,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF64": {
            "ref_id": "b64",
            "title": "Cyberark labs research: Stealing service credentials to achieve full domain compromise",
            "authors": [
                {
                    "first": "S",
                    "middle": [],
                    "last": "Nahari",
                    "suffix": ""
                }
            ],
            "year": 2016,
            "venue": "Best defense? our red team lead reveals 4 mfa bypass techniques",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF65": {
            "ref_id": "b65",
            "title": "Russia using kubernetes cluster for brute-force attacks",
            "authors": [
                {
                    "first": "S",
                    "middle": [],
                    "last": "Nichols",
                    "suffix": ""
                }
            ],
            "year": 2021,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF66": {
            "ref_id": "b66",
            "title": "10 layers of linux container security",
            "authors": [
                {
                    "first": "D",
                    "middle": [],
                    "last": "Oh",
                    "suffix": ""
                }
            ],
            "year": 2017,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF67": {
            "ref_id": "b67",
            "title": "A binary-compatible unikernel",
            "authors": [
                {
                    "first": "P",
                    "middle": [],
                    "last": "Olivier",
                    "suffix": ""
                },
                {
                    "first": "D",
                    "middle": [],
                    "last": "Chiba",
                    "suffix": ""
                },
                {
                    "first": "S",
                    "middle": [],
                    "last": "Lankes",
                    "suffix": ""
                },
                {
                    "first": "C",
                    "middle": [],
                    "last": "Min",
                    "suffix": ""
                },
                {
                    "first": "B",
                    "middle": [],
                    "last": "Ravindran",
                    "suffix": ""
                }
            ],
            "year": 2019,
            "venue": "Proceedings of the 15th ACM SIGPLAN/SIGOPS International Conference on Virtual Execution Environments",
            "volume": "",
            "issn": "",
            "pages": "59--73",
            "other_ids": {}
        },
        "BIBREF69": {
            "ref_id": "b69",
            "title": "OWASP: Docker security cheat sheet",
            "authors": [],
            "year": 2021,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF70": {
            "ref_id": "b70",
            "title": "Announcing third-party code scanning tools: static analysis & developer security training",
            "authors": [
                {
                    "first": "J",
                    "middle": [],
                    "last": "Palafox",
                    "suffix": ""
                }
            ],
            "year": 2020,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF71": {
            "ref_id": "b71",
            "title": "User privileges in docker containers",
            "authors": [
                {
                    "first": "V",
                    "middle": [],
                    "last": "Pavi\u0161i\u0107",
                    "suffix": ""
                }
            ],
            "year": 2019,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF72": {
            "ref_id": "b72",
            "title": "A hardware monitor to protect linux system calls",
            "authors": [
                {
                    "first": "G",
                    "middle": [],
                    "last": "Provelengios",
                    "suffix": ""
                },
                {
                    "first": "A",
                    "middle": [],
                    "last": "Pouraghily",
                    "suffix": ""
                },
                {
                    "first": "R",
                    "middle": [],
                    "last": "Tessier",
                    "suffix": ""
                },
                {
                    "first": "T",
                    "middle": [],
                    "last": "Wolf",
                    "suffix": ""
                }
            ],
            "year": 2018,
            "venue": "2018 IEEE Computer Society Annual Symposium on VLSI (ISVLSI)",
            "volume": "",
            "issn": "",
            "pages": "551--556",
            "other_ids": {
                "DOI": [
                    "10.1109/ISVLSI.2018.00106"
                ]
            }
        },
        "BIBREF73": {
            "ref_id": "b73",
            "title": "Where are docker container logs stored?",
            "authors": [
                {
                    "first": "A",
                    "middle": [],
                    "last": "Rahic",
                    "suffix": ""
                }
            ],
            "year": 2020,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF74": {
            "ref_id": "b74",
            "title": "Satyanarayana: A comprehensive analysis of spoofing",
            "authors": [
                {
                    "first": "P",
                    "middle": [],
                    "last": "Ramesh",
                    "suffix": ""
                },
                {
                    "first": "D",
                    "middle": [],
                    "last": "Bhaskari",
                    "suffix": ""
                },
                {
                    "first": "",
                    "middle": [],
                    "last": "Ch",
                    "suffix": ""
                }
            ],
            "year": 2010,
            "venue": "International Journal of Advanced Computer Science and Applications",
            "volume": "1",
            "issn": "6",
            "pages": "",
            "other_ids": {
                "DOI": [
                    "10.14569/ijacsa.2010.010623"
                ]
            }
        },
        "BIBREF75": {
            "ref_id": "b75",
            "title": "Most applications contain vulnerable open source libraries",
            "authors": [
                {
                    "first": "F",
                    "middle": [
                        "Y"
                    ],
                    "last": "Rashid",
                    "suffix": ""
                }
            ],
            "year": 2020,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF76": {
            "ref_id": "b76",
            "title": "Cimplifier: Automatically debloating containers",
            "authors": [
                {
                    "first": "V",
                    "middle": [],
                    "last": "Rastogi",
                    "suffix": ""
                },
                {
                    "first": "D",
                    "middle": [],
                    "last": "Davidson",
                    "suffix": ""
                },
                {
                    "first": "L",
                    "middle": [],
                    "last": "De Carli",
                    "suffix": ""
                },
                {
                    "first": "S",
                    "middle": [],
                    "last": "Jha",
                    "suffix": ""
                },
                {
                    "first": "P",
                    "middle": [],
                    "last": "Mcdaniel",
                    "suffix": ""
                }
            ],
            "year": 2017,
            "venue": "Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering",
            "volume": "",
            "issn": "",
            "pages": "476--486",
            "other_ids": {}
        },
        "BIBREF78": {
            "ref_id": "b78",
            "title": "Hat: runc -malicious container escape -cve-2019-5736",
            "authors": [],
            "year": 2020,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF79": {
            "ref_id": "b79",
            "title": "Kubernetes adoption, security, and market trends report 2021",
            "authors": [],
            "year": 2021,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF80": {
            "ref_id": "b80",
            "title": "Linux capabilities and seccomp",
            "authors": [],
            "year": 2021,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF81": {
            "ref_id": "b81",
            "title": "Lessons from the cryptojacking attack at tesla",
            "authors": [
                {
                    "first": "Csi",
                    "middle": [],
                    "last": "Redlock",
                    "suffix": ""
                },
                {
                    "first": "",
                    "middle": [],
                    "last": "Team",
                    "suffix": ""
                }
            ],
            "year": 2018,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF82": {
            "ref_id": "b82",
            "title": "Malicious docker hub container images used for cryptocurrency mining",
            "authors": [
                {
                    "first": "I",
                    "middle": [
                        "I"
                    ],
                    "last": "Remillano",
                    "suffix": ""
                },
                {
                    "first": "A",
                    "middle": [],
                    "last": "",
                    "suffix": ""
                }
            ],
            "year": 2020,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF83": {
            "ref_id": "b83",
            "title": "Boosting container security with rootless containers",
            "authors": [
                {
                    "first": "L",
                    "middle": [],
                    "last": "Rice",
                    "suffix": ""
                },
                {
                    "first": "D",
                    "middle": [],
                    "last": "Sagi",
                    "suffix": ""
                }
            ],
            "year": 2019,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF84": {
            "ref_id": "b84",
            "title": "Analyzing the security of windows 7 and linux for cloud computing",
            "authors": [
                {
                    "first": "K",
                    "middle": [],
                    "last": "Salah",
                    "suffix": ""
                },
                {
                    "first": "J",
                    "middle": [
                        "M"
                    ],
                    "last": "Alcaraz Calero",
                    "suffix": ""
                },
                {
                    "first": "J",
                    "middle": [
                        "B"
                    ],
                    "last": "Bernab\u00e9",
                    "suffix": ""
                },
                {
                    "first": "J",
                    "middle": [
                        "M"
                    ],
                    "last": "Perez",
                    "suffix": ""
                },
                {
                    "first": "S",
                    "middle": [],
                    "last": "Zeadally",
                    "suffix": ""
                }
            ],
            "year": 2013,
            "venue": "Computers & Security",
            "volume": "34",
            "issn": "",
            "pages": "113--122",
            "other_ids": {}
        },
        "BIBREF86": {
            "ref_id": "b86",
            "title": "Attackers scrape github for cloud service credentials, hijack account to mine virtual currency",
            "authors": [
                {
                    "first": "R",
                    "middle": [
                        "A"
                    ],
                    "last": "Sandvik",
                    "suffix": ""
                }
            ],
            "year": 2014,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF87": {
            "ref_id": "b87",
            "title": "A descriptive study of microsoft's threat modeling technique",
            "authors": [
                {
                    "first": "R",
                    "middle": [],
                    "last": "Scandariato",
                    "suffix": ""
                },
                {
                    "first": "K",
                    "middle": [],
                    "last": "Wuyts",
                    "suffix": ""
                },
                {
                    "first": "W",
                    "middle": [],
                    "last": "Joosen",
                    "suffix": ""
                }
            ],
            "year": 2015,
            "venue": "Requirements Engineering",
            "volume": "20",
            "issn": "2",
            "pages": "163--180",
            "other_ids": {
                "DOI": [
                    "10.1007/s00766-013-0195-2"
                ]
            }
        },
        "BIBREF88": {
            "ref_id": "b88",
            "title": "Low-hanging secrets in docker hub and a tool to catch them all",
            "authors": [
                {
                    "first": "T",
                    "middle": [],
                    "last": "Seals",
                    "suffix": ""
                }
            ],
            "year": 2018,
            "venue": "Tesla falls to crypto-jackers",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF89": {
            "ref_id": "b89",
            "title": "Docker container hardening method based on trusted computing",
            "authors": [
                {
                    "first": "Y",
                    "middle": [],
                    "last": "Shen",
                    "suffix": ""
                },
                {
                    "first": "X",
                    "middle": [],
                    "last": "Yu",
                    "suffix": ""
                }
            ],
            "year": 2020,
            "venue": "Journal of Physics: Conference Series",
            "volume": "1619",
            "issn": "",
            "pages": "",
            "other_ids": {
                "DOI": [
                    "10.1088/1742-6596/1619/1/012014"
                ]
            }
        },
        "BIBREF90": {
            "ref_id": "b90",
            "title": "Threat Modeling: A Summary of Available Methods",
            "authors": [
                {
                    "first": "N",
                    "middle": [],
                    "last": "Shevchenko",
                    "suffix": ""
                },
                {
                    "first": "T",
                    "middle": [],
                    "last": "Chick",
                    "suffix": ""
                },
                {
                    "first": "P",
                    "middle": [],
                    "last": "O&apos;riordan",
                    "suffix": ""
                },
                {
                    "first": "T",
                    "middle": [],
                    "last": "Scanlon",
                    "suffix": ""
                },
                {
                    "first": "C",
                    "middle": [],
                    "last": "Woody",
                    "suffix": ""
                }
            ],
            "year": 2018,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF91": {
            "ref_id": "b91",
            "title": "Kinsing punk: An epic escape from docker containers",
            "authors": [
                {
                    "first": "S",
                    "middle": [],
                    "last": "Shevchenko",
                    "suffix": ""
                }
            ],
            "year": 2020,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF92": {
            "ref_id": "b92",
            "title": "Evolving container to unikernel for edge computing and applications in process industry",
            "authors": [
                {
                    "first": "C",
                    "middle": [],
                    "last": "Shichao",
                    "suffix": ""
                },
                {
                    "first": "M",
                    "middle": [],
                    "last": "Zhou",
                    "suffix": ""
                }
            ],
            "year": 2021,
            "venue": "Processes",
            "volume": "9",
            "issn": "",
            "pages": "",
            "other_ids": {
                "DOI": [
                    "10.3390/pr9020351"
                ]
            }
        },
        "BIBREF93": {
            "ref_id": "b93",
            "title": "Internet security glossary",
            "authors": [
                {
                    "first": "R",
                    "middle": [],
                    "last": "Shirey",
                    "suffix": ""
                }
            ],
            "year": 2007,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF94": {
            "ref_id": "b94",
            "title": "A study of security vulnerabilities on docker hub",
            "authors": [
                {
                    "first": "R",
                    "middle": [],
                    "last": "Shu",
                    "suffix": ""
                },
                {
                    "first": "X",
                    "middle": [],
                    "last": "Gu",
                    "suffix": ""
                },
                {
                    "first": "W",
                    "middle": [],
                    "last": "Enck",
                    "suffix": ""
                }
            ],
            "year": 2017,
            "venue": "Proceedings of the Seventh ACM on Conference on Data and Application Security and Privacy. p. 269-280. CODASPY '17",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {
                "DOI": [
                    "10.1145/3029806.3029832"
                ]
            }
        },
        "BIBREF95": {
            "ref_id": "b95",
            "title": "Solution-aware data flow diagrams for security threat modeling",
            "authors": [
                {
                    "first": "L",
                    "middle": [],
                    "last": "Sion",
                    "suffix": ""
                },
                {
                    "first": "K",
                    "middle": [],
                    "last": "Yskout",
                    "suffix": ""
                },
                {
                    "first": "D",
                    "middle": [],
                    "last": "Van Landuyt",
                    "suffix": ""
                },
                {
                    "first": "W",
                    "middle": [],
                    "last": "Joosen",
                    "suffix": ""
                }
            ],
            "year": 2018,
            "venue": "Proceedings of the 33rd Annual ACM Symposium on Applied Computing",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF96": {
            "ref_id": "b96",
            "title": "Github repositories leak thousands of secrets, study shows",
            "authors": [
                {
                    "first": "J",
                    "middle": [],
                    "last": "Sirkin",
                    "suffix": ""
                }
            ],
            "year": 2019,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF97": {
            "ref_id": "b97",
            "title": "Application container security guide",
            "authors": [
                {
                    "first": "M",
                    "middle": [],
                    "last": "Souppaya",
                    "suffix": ""
                },
                {
                    "first": "J",
                    "middle": [],
                    "last": "Morello",
                    "suffix": ""
                },
                {
                    "first": "K",
                    "middle": [],
                    "last": "Scarfone",
                    "suffix": ""
                }
            ],
            "year": 2017,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {
                "DOI": [
                    "10.6028/NIST.SP.800-190"
                ]
            }
        },
        "BIBREF98": {
            "ref_id": "b98",
            "title": "Critical cybersecurity hygiene: Patching the enterprise",
            "authors": [
                {
                    "first": "M",
                    "middle": [],
                    "last": "Souppaya",
                    "suffix": ""
                },
                {
                    "first": "K",
                    "middle": [],
                    "last": "Stine",
                    "suffix": ""
                },
                {
                    "first": "M",
                    "middle": [],
                    "last": "Simos",
                    "suffix": ""
                },
                {
                    "first": "K",
                    "middle": [],
                    "last": "Scarfone",
                    "suffix": ""
                }
            ],
            "year": 2020,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF99": {
            "ref_id": "b99",
            "title": "Computer operating system logging and security issues: a survey. Security and Communication Networks",
            "authors": [
                {
                    "first": "L",
                    "middle": [],
                    "last": "Zeng",
                    "suffix": ""
                },
                {
                    "first": "Y",
                    "middle": [],
                    "last": "Xiao",
                    "suffix": ""
                },
                {
                    "first": "H",
                    "middle": [],
                    "last": "Chen",
                    "suffix": ""
                },
                {
                    "first": "B",
                    "middle": [],
                    "last": "Sun",
                    "suffix": ""
                },
                {
                    "first": "W",
                    "middle": [],
                    "last": "Han",
                    "suffix": ""
                }
            ],
            "year": 2016,
            "venue": "",
            "volume": "9",
            "issn": "",
            "pages": "4804--4821",
            "other_ids": {
                "DOI": [
                    "10.1002/sec.1677"
                ]
            }
        },
        "BIBREF100": {
            "ref_id": "b100",
            "title": "Assessment of windows system security using vulnerability relationship graph",
            "authors": [
                {
                    "first": "Y",
                    "middle": [],
                    "last": "Zhang",
                    "suffix": ""
                },
                {
                    "first": "B",
                    "middle": [],
                    "last": "Fang",
                    "suffix": ""
                },
                {
                    "first": "Y",
                    "middle": [],
                    "last": "Chi",
                    "suffix": ""
                },
                {
                    "first": "X",
                    "middle": [],
                    "last": "Yun",
                    "suffix": ""
                },
                {
                    "first": "Y",
                    "middle": [],
                    "last": "Hao",
                    "suffix": ""
                },
                {
                    "first": "J",
                    "middle": [],
                    "last": "Liu",
                    "suffix": ""
                },
                {
                    "first": "Y",
                    "middle": [
                        "P"
                    ],
                    "last": "Wang",
                    "suffix": ""
                },
                {
                    "first": "Y",
                    "middle": [
                        "M"
                    ],
                    "last": "Cheung",
                    "suffix": ""
                },
                {
                    "first": "H",
                    "middle": [],
                    "last": "Yin",
                    "suffix": ""
                },
                {
                    "first": "L",
                    "middle": [],
                    "last": "Jiao",
                    "suffix": ""
                },
                {
                    "first": "J",
                    "middle": [],
                    "last": "Ma",
                    "suffix": ""
                }
            ],
            "year": 2005,
            "venue": "Computational Intelligence and Security",
            "volume": "",
            "issn": "",
            "pages": "415--420",
            "other_ids": {}
        }
    },
    "ref_entries": {
        "FIGREF0": {
            "text": "V1: Docker Hub does not enforce stringent password policies other than the minimum password length restriction of 9 characters [39]. GitHub mandates an account password to be at least 8 characters long if it includes a number and a lowercase letter, or a 15 characters with any combination of characters [53]",
            "latex": null,
            "type": "figure"
        },
        "FIGREF1": {
            "text": "Data flow diagram of the container system",
            "latex": null,
            "type": "figure"
        },
        "FIGREF2": {
            "text": "-of-third-party-container-applications-deployed-in-cloud-infrastructure-contain-known-vulnerabilities-unit-42/, online 77. Haas, J.: A step-by-step guide to using the linux 'sync' command (Sep 2020), https://www.lifewire.com/ sync-linux-command-4091818, online 78. Hall, C.: Netflix's container management system is now open source (Apr 2018), https://www. datacenterknowledge.com/cloud/netflixs-container-management-system-now-open-source, online 79. IBM: Docker (Jun 2021), https://www.ibm.com/cloud/learn/docker, online 80. IBMCloud Education: Microservices (Mar 2021), https://www.ibm.com/cloud/learn/microservices, online 81. Ilascu, I.: Starbucks devs leave api key in github public repo (Dec 2019), https://www.bleepingcomputer.com/ news/security/starbucks-devs-leave-api-key-in-github-public-repo/, online 82. Iradier, A.: Top 20 dockerfile best practices (Mar 2021), https://sysdig.com/blog/dockerfile-best-practices/, online 83. Jarvis, M.: Privileged docker containers-do you really need them? (Nov 2020), https://snyk.io/blog/ privileged-docker-containers/, online 84. Javed, O., Toor, S.: Understanding the quality of container security vulnerability detection tools (2021), arXiv:2101.03844v1, 85. Jian, Z., Chen, L.: A defense method against docker escape attack. In: Proceedings of the 2017 International Conference on Cryptography, Security and Privacy. p. 142-146. ICCSP '17, Association for Computing Machinery, New York, NY, USA (2017",
            "latex": null,
            "type": "figure"
        },
        "TABREF0": {
            "text": "44], [51], [82], [38], [151],",
            "latex": null,
            "type": "table"
        },
        "TABREF1": {
            "text": "Summary of our STRIDE Analysis pered after attackers hacked into accounts. A vulnerability in an image takes an average of 181 days for it to be fixed and an extra 422 days to be updated.Scan image, sign image, and verify it during deployment, verify hash, and regular patching of image.",
            "latex": null,
            "type": "table"
        },
        "TABREF2": {
            "text": "//www.cyberark.com/resources/threat-research-blog/ attacking-kubernetes-clusters-through-your-network-plumbing-part-1, online //docs.docker.com/network/bridge/ #differences-between-user-defined-bridges-and-the-default-bridge, online 50. Docker: Use docker logs with remote logging drivers (Sep 2021), https://docs.docker.com/config/containers/ logging/dual-logging/, online 51. Docker: //docs.github.com/en/ code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/ about-code-scanning-with-codeql, online 53. Docs\", //docs.github.com/en/github/ authenticating-to-github/keeping-your-account-and-data-secure/creating-a-strong-password, online 54. Docs\", G.: Ignoring files (Jul 2021), https://docs.github.com/en/get-started/getting-started-with-git/ ignoring-files, online 55. Doerrfeld, B.: 17 open-source container security tools (Mar 2021), https://techbeacon.com/security/ 17-open-source-container-security-tools, online //arstechnica.com/information-technology/2019/10/ hackers-steal-secret-crypto-keys-for-nordvpn-heres-what-we-know-so-far/, online 74. Google: Containers at google (Apr 2021), https://cloud.google.com/containers#:~:text=Containers%20give% 20developers%20the%20ability,runtimes%20and%20other%20software%20libraries.., online 75. Grattafiori, A.: Understanding and hardening linux containers (June 2016), https://research.nccgroup.com/ wp-content/uploads/2020/07/ncc_group_understanding_hardening_linux_containers-1-1.pdf, online 76. Greig,",
            "latex": null,
            "type": "table"
        },
        "TABREF3": {
            "text": "). https://doi.org/10.1145/3058060.3058085, https://doi.org/10.1145/3058060.",
            "latex": null,
            "type": "table"
        }
    },
    "back_matter": [
        {
            "text": "We would like to thank our peers and colleagues for their valuable feedback. Any opinions, conclusions or recommendations expressed in this paper are those of the authors and do not necessarily reflect the views of the universities.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Acknowledgment"
        }
    ]
}