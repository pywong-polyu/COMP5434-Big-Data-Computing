{
    "paper_id": "57aa6207f0c6c62422044636bbdbbe6279ce4848",
    "metadata": {
        "title": "Solving Mean-Payoff Games via Quasi Dominions",
        "authors": [
            {
                "first": "Massimo",
                "middle": [],
                "last": "Benerecetti",
                "suffix": "",
                "affiliation": {
                    "laboratory": "",
                    "institution": "Universit\u00e0 degli Studi di Napoli Federico II",
                    "location": {
                        "settlement": "Naples",
                        "country": "Italy"
                    }
                },
                "email": ""
            },
            {
                "first": "Daniele",
                "middle": [],
                "last": "Dell&apos;erba",
                "suffix": "",
                "affiliation": {
                    "laboratory": "",
                    "institution": "Universit\u00e0 degli Studi di Napoli Federico II",
                    "location": {
                        "settlement": "Naples",
                        "country": "Italy"
                    }
                },
                "email": ""
            },
            {
                "first": "Fabio",
                "middle": [],
                "last": "Mogavero",
                "suffix": "",
                "affiliation": {
                    "laboratory": "",
                    "institution": "Universit\u00e0 degli Studi di Napoli Federico II",
                    "location": {
                        "settlement": "Naples",
                        "country": "Italy"
                    }
                },
                "email": ""
            }
        ]
    },
    "abstract": [
        {
            "text": "We propose a novel algorithm for the solution of mean-payoff games that merges together two seemingly unrelated concepts introduced in the context of parity games, small progress measures and quasi dominions. We show that the integration of the two notions can be highly beneficial and significantly speeds up convergence to the problem solution. Experiments show that the resulting algorithm performs orders of magnitude better than the asymptotically-best solution algorithm currently known, without sacrificing on the worst-case complexity. \u221a n\u00b7log n) }. Our contribution is a novel mean-payoff progress measure approach that enriches such measures with the notion of quasi dominions, originally introduced in [5] for parity games. These are sets of positions with the property that as",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Abstract"
        }
    ],
    "body_text": [
        {
            "text": "In this article we consider the problem of solving mean-payoff games, namely infinite-duration perfect-information two-player games played on weighted directed graphs, each of whose vertexes is controlled by one of the two players. The game starts at an arbitrary vertex and, during its evolution, each player can take moves at the vertexes it controls, by choosing one of the outgoing edges. The moves selected by the two players induce an infinite sequence of vertices, called play. The payoff of any prefix of a play is the sum of the weights of its edges. A play is winning if it satisfies the game objective, called mean-payoff objective, which requires that the limit of the mean payoff, taken over the prefixes lengths, never falls below a given threshold \u03bd.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Introduction"
        },
        {
            "text": "Mean-payoff games have been first introduced and studied by Ehrenfeucht and Mycielski in [20] , who showed that positional strategies suffice to obtain the optimal value. A slightly generalized version was also considered by Gurvich et al. in [24] . Positional determinacy entails that the decision problem for these games lies in NPTime \u2229 CoNPTime [34] , and it was later shown to belong to UPTime \u2229 CoUPTime [25] , being UPTime the class of unambiguous nondeterministic polynomial time. This result gives the problem a rather peculiar complexity status, shared by very few other problems, such as integer factorization [22] , [1] and parity games [25] . Despite various attempts [7, 19, 24, 30, 34] , no polynomial-time algorithm for the mean-payoff game problems is known so far.",
            "cite_spans": [
                {
                    "start": 89,
                    "end": 93,
                    "text": "[20]",
                    "ref_id": "BIBREF21"
                },
                {
                    "start": 243,
                    "end": 247,
                    "text": "[24]",
                    "ref_id": "BIBREF25"
                },
                {
                    "start": 349,
                    "end": 353,
                    "text": "[34]",
                    "ref_id": "BIBREF34"
                },
                {
                    "start": 410,
                    "end": 414,
                    "text": "[25]",
                    "ref_id": "BIBREF26"
                },
                {
                    "start": 621,
                    "end": 625,
                    "text": "[22]",
                    "ref_id": "BIBREF23"
                },
                {
                    "start": 628,
                    "end": 631,
                    "text": "[1]",
                    "ref_id": "BIBREF3"
                },
                {
                    "start": 649,
                    "end": 653,
                    "text": "[25]",
                    "ref_id": "BIBREF26"
                },
                {
                    "start": 681,
                    "end": 684,
                    "text": "[7,",
                    "ref_id": "BIBREF8"
                },
                {
                    "start": 685,
                    "end": 688,
                    "text": "19,",
                    "ref_id": "BIBREF20"
                },
                {
                    "start": 689,
                    "end": 692,
                    "text": "24,",
                    "ref_id": "BIBREF25"
                },
                {
                    "start": 693,
                    "end": 696,
                    "text": "30,",
                    "ref_id": "BIBREF30"
                },
                {
                    "start": 697,
                    "end": 700,
                    "text": "34]",
                    "ref_id": "BIBREF34"
                }
            ],
            "ref_spans": [],
            "section": "Introduction"
        },
        {
            "text": "A different formulation of the game objective allows to define another class of quantitative games, known as energy games. The energy objective requires that, given an initial value c, called credit, the sum of c and the payoff of every prefix of the play never falls below 0. These games, however, are tightly connected to mean-payoff games, as the two type of games have been proved to be log-space equivalent [11] . They are also related to other more complex forms of quantitative games. In particular, unambiguous polynomial-time reductions [25] exist from these games to discounted payoff [34] and simple stochastic games [18] .",
            "cite_spans": [
                {
                    "start": 412,
                    "end": 416,
                    "text": "[11]",
                    "ref_id": "BIBREF12"
                },
                {
                    "start": 546,
                    "end": 550,
                    "text": "[25]",
                    "ref_id": "BIBREF26"
                },
                {
                    "start": 595,
                    "end": 599,
                    "text": "[34]",
                    "ref_id": "BIBREF34"
                },
                {
                    "start": 628,
                    "end": 632,
                    "text": "[18]",
                    "ref_id": "BIBREF19"
                }
            ],
            "ref_spans": [],
            "section": "Introduction"
        },
        {
            "text": "Recently, a fair amount of work in formal verification has been directed to consider, besides correctness properties of computational systems, also quantitative specifications, in order to express performance measures and resource requirements, such as quality of service, bandwidth and power consumption and, more generally, bounded resources. Mean-payoff and energy games also have important practical applications in system verification and synthesis. In [14] the authors show how quantitative aspects, interpreted as penalties and rewards associated to the system choices, allow for expressing optimality requirements encoded as mean-payoff objectives for the automatic synthesis of systems that also satisfy parity objectives. With similar application contexts in mind, [9] and [8] further contribute to that effort, by providing complexity results and practical solutions for the verification and automatic synthesis of reactive systems from quantitative specifications expressed in linear time temporal logic extended with mean-payoff and energy objectives. Further applications to temporal networks have been studied in [16] and [15] . Consequently, efficient algorithms to solve mean-payoff games become essential ingredients to tackle these problems in practice.",
            "cite_spans": [
                {
                    "start": 458,
                    "end": 462,
                    "text": "[14]",
                    "ref_id": "BIBREF15"
                },
                {
                    "start": 775,
                    "end": 778,
                    "text": "[9]",
                    "ref_id": "BIBREF10"
                },
                {
                    "start": 783,
                    "end": 786,
                    "text": "[8]",
                    "ref_id": "BIBREF9"
                },
                {
                    "start": 1128,
                    "end": 1132,
                    "text": "[16]",
                    "ref_id": "BIBREF17"
                },
                {
                    "start": 1137,
                    "end": 1141,
                    "text": "[15]",
                    "ref_id": "BIBREF16"
                }
            ],
            "ref_spans": [],
            "section": "Introduction"
        },
        {
            "text": "Several algorithms have been devised in the past for the solution of the decision problem for mean-payoff games, which asks whether there exists a strategy for one of the players that grants the mean-payoff objective. The very first deterministic algorithm was proposed in [34] , where it is shown that the problem can be solved with O n 3 \u00b7 m \u00b7 W arithmetic operations, with n and m the number of positions and moves, respectively, and W the maximal absolute weight in the game. A strategy improvement approach, based on iteratively adjusting a randomly chosen initial strategy for one player until a winning strategy is obtained, is presented in [31] , which has an exponential upper bound. The algorithm by Lifshits and Pavlov [29] , which runs in time O(n \u00b7 m \u00b7 2 n \u00b7 log 2 W ), computes the \"potential\" of each game position, which corresponds to the initial credit that the player needs in order to win the game from that position. Algorithms based on the solution of linear feasibility problems over the tropical semiring have been also provided in [2] [3] [4] . The best known deterministic algorithm to date, which requires O(n \u00b7 m \u00b7 W ) arithmetic operations, was proposed by Brim et al. [13] . They adapt to energy and mean-payoff games the notion of progress measures [28] , as applied to parity games in [26] . The approach was further developed in [17] to obtain the same complexity bound for the optimal strategy synthesis problem. A strategyimprovement refinement of this technique has been introduced in [12] . Finally, Bjork et al. [6] proposed a randomized strategy-improvement based algorithm running in time min{O n 2 \u00b7 m \u00b7 W , 2 O( long as the opponent chooses to play to remain in the set, it loses the game for sure, hence its best choice is always to try to escape. A quasi dominion from where escaping is not possible is a winning set for the other player. Progress measure approaches, such as the one of [13] , typically focus on finding the best choices of the opponent and little information is gathered on the other player. In this sense, they are intrinsically asymmetric. Enriching the approach with quasi dominions can be viewed as a way to also encode the best choices of the player, information that can be exploited to speed up convergence significantly. The main difficulty here is that suitable lift operators in the new setting do not enjoy monotonicity. Such a property makes proving completeness of classic progress measure approaches almost straightforward, as monotonic operators do admit a least fixpoint. Instead, the lift operator we propose is only inflationary (specifically, non-decreasing) and, while still admitting fixpoints [10, 33] , need not have a least one. Hence, providing a complete solution algorithm proves more challenging. The advantages, however, are significant. On the one hand, the new algorithm still enjoys the same worst-case complexity of the best known algorithm for the problem proposed in [13] . On the other hand, we show that there exist families of games on which the classic approach requires a number of operations that can be made arbitrarily larger than the one required by the new approach. Experimental results also witness the fact that this phenomenon is by no means isolated, as the new algorithm performs orders of magnitude better than the algorithm developed in [13] .",
            "cite_spans": [
                {
                    "start": 273,
                    "end": 277,
                    "text": "[34]",
                    "ref_id": "BIBREF34"
                },
                {
                    "start": 648,
                    "end": 652,
                    "text": "[31]",
                    "ref_id": "BIBREF31"
                },
                {
                    "start": 730,
                    "end": 734,
                    "text": "[29]",
                    "ref_id": "BIBREF29"
                },
                {
                    "start": 1056,
                    "end": 1059,
                    "text": "[2]",
                    "ref_id": "BIBREF4"
                },
                {
                    "start": 1060,
                    "end": 1063,
                    "text": "[3]",
                    "ref_id": null
                },
                {
                    "start": 1064,
                    "end": 1067,
                    "text": "[4]",
                    "ref_id": "BIBREF5"
                },
                {
                    "start": 1198,
                    "end": 1202,
                    "text": "[13]",
                    "ref_id": "BIBREF14"
                },
                {
                    "start": 1280,
                    "end": 1284,
                    "text": "[28]",
                    "ref_id": "BIBREF28"
                },
                {
                    "start": 1317,
                    "end": 1321,
                    "text": "[26]",
                    "ref_id": null
                },
                {
                    "start": 1362,
                    "end": 1366,
                    "text": "[17]",
                    "ref_id": "BIBREF18"
                },
                {
                    "start": 1521,
                    "end": 1525,
                    "text": "[12]",
                    "ref_id": "BIBREF13"
                },
                {
                    "start": 1550,
                    "end": 1553,
                    "text": "[6]",
                    "ref_id": "BIBREF7"
                },
                {
                    "start": 1931,
                    "end": 1935,
                    "text": "[13]",
                    "ref_id": "BIBREF14"
                },
                {
                    "start": 2677,
                    "end": 2681,
                    "text": "[10,",
                    "ref_id": "BIBREF11"
                },
                {
                    "start": 2682,
                    "end": 2685,
                    "text": "33]",
                    "ref_id": "BIBREF33"
                },
                {
                    "start": 2964,
                    "end": 2968,
                    "text": "[13]",
                    "ref_id": "BIBREF14"
                },
                {
                    "start": 3352,
                    "end": 3356,
                    "text": "[13]",
                    "ref_id": "BIBREF14"
                }
            ],
            "ref_spans": [],
            "section": "Introduction"
        },
        {
            "text": "A two-player turn-based arena is a tuple A = Ps \u2295 , Ps , Mv , with Ps \u2295 \u2229Ps = \u2205 and Ps Ps \u2295 \u222a Ps , such that Ps, Mv is a finite directed graph without sinks. Ps \u2295 (resp., Ps ) is the set of positions of player \u2295 (resp., ) and Mv \u2286 Ps \u00d7 Ps is a left-total relation describing all possible moves. A path in V \u2286 Ps is a finite or infinite sequence \u03c0 \u2208 Pth(V) of positions in V compatible with the move relation, i.e., (\u03c0 i , \u03c0 i+1 ) \u2208 Mv , for all i \u2208 [0, |\u03c0| \u2212 1). A positional strategy for player \u03b1 \u2208 {\u2295, } on V \u2286 Ps is a function \u03c3 \u03b1 \u2208 Str \u03b1 (V) \u2286 (V \u2229 Ps \u03b1 ) \u2192 Ps, mapping each \u03b1-position v in the domain of \u03c3 \u03b1 to position \u03c3 \u03b1 (v) compatible with the move relation, i.e., (v, \u03c3 \u03b1 (v)) \u2208 Mv . With Str \u03b1 (V) we denote the set of all \u03b1-strategies on V, while Str \u03b1 denotes V\u2286Ps Str \u03b1 (V). A play in V \u2286 Ps from a position v \u2208 V w.r.t. a pair of strategies (\u03c3 \u2295 , \u03c3 ) \u2208 Str \u2295 (V) \u00d7 Str (V), called ((\u03c3 \u2295 , \u03c3 ), v)-play, is a path \u03c0 \u2208 Pth(V) such that \u03c0 \uf730 = v and, for all i \u2208 [0, |\u03c0| \u2212 1), if \u03c0 i \u2208 Ps \u2295 then \u03c0 i+1 = \u03c3 \u2295 (\u03c0 i ) else \u03c0 i+1 = \u03c3 (\u03c0 i ). The play function play : (Str \u2295 (V)\u00d7Str (V))\u00d7V \u2192 Pth(V) returns, for each position v \u2208 V and pair of strategies (\u03c3 \u2295 , \u03c3 ) \u2208 Str \u2295 (V) \u00d7 Str (V), the maximal ((\u03c3 \u2295 , \u03c3 ), v)play play((\u03c3 \u2295 , \u03c3 ), v). If a pair (\u03c3 \u2295 , \u03c3 ) \u2208 Str \u2295 (V) \u00d7 Str (V) induces a finite play starting from position v \u2208 V, then play((\u03c3 \u2295 , \u03c3 ), v) identifies the maximal prefix of that play that is contained in V.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Mean-Payoff Games"
        },
        {
            "text": "A mean-payoff game (MPG for short) is a tuple = A, Wg, wg , where A is an arena, Wg \u2282 Z is a finite set of integer weights, and wg : Ps \u2192 Wg is a weight function assigning a weight to each position. Ps + (resp., Ps \u2212 ) denotes the set of positive-weight positions (resp., non-positive-weight positions). For convenience, we shall refer to non-positive weights as negative weights. Notice that this definition of MPG is equivalent to the classic formulation in which the weights label the moves, instead. The weight function naturally extends to paths, by setting wg(\u03c0) |\u03c0|\u22121 i=0 wg(\u03c0 i ). The goal of player \u2295 (resp., ) is to maximize (resp., minimize) v(\u03c0) lim inf i\u2192\u221e 1 i \u00b7 wg(\u03c0 \u2264i ), where \u03c0 \u2264i is the prefix up to index i. Given a threshold \u03bd, a set of positions V \u2286 Ps is a \u2295-dominion, if there exists a \u2295-strategy \u03c3 \u2295 \u2208 Str \u2295 (V) such that, for all -strategies \u03c3 \u2208 Str (V) and positions v \u2208 V, the induced play \u03c0 = play((\u03c3 \u2295 , \u03c3 ), v) satisfies v(\u03c0) > \u03bd. The pair of winning regions (Wn \u2295 , Wn ) forms a \u03bd-mean partition. Assuming \u03bd integer, the \u03bd-mean partition problem is equivalent to the 0-mean partition one, as we can subtract \u03bd to the weights of all the positions. As a consequence, the MPG decision problem can be equivalently restated as deciding whether player \u2295 (resp., ) has a strategy to enforce lim inf i\u2192\u221e 1 i \u00b7 wg(\u03c0 \u2264i ) > 0 (resp., lim inf i\u2192\u221e 1 i \u00b7 wg(\u03c0 \u2264i ) \u2264 0), for all the resulting plays \u03c0.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Mean-Payoff Games"
        },
        {
            "text": "The abstract notion of progress measure [28] has been introduced as a way to encode global properties on paths of a graph by means of simpler local properties of adjacent vertexes. In the context of MPGs, the graph property of interest, called mean-payoff property, requires that the mean payoff of every infinite path in the graph be non-positive. More precisely, in game theoretic terms, a mean-payoff progress measure witnesses the existence of strategy \u03c3 for player such that each path in the graph induced by fixing that strategy on the arena satisfies the desired property. A mean-payoff progress measure associates with each vertex of the underlying graph a value, called measure, taken from the set of extended natural numbers N \u221e N \u222a {\u221e}, endowed with an ordering relation \u2264 and an addition operation +, which extend the standard ordering and addition over the naturals in the usual way. Measures are associated with positions in the game and the measure of a position v can intuitively be interpreted as an estimate of the payoff that player \u2295 can enforce on the plays starting in v. In this sense, they measure \"how far\" v is from satisfying the mean-payoff property, with the maximal measure \u221e denoting failure of the property for v. More precisely, the -strategy induced by a progress measure ensures that measures do not increase along the paths of the induced graph. This ensures that every path eventually gets trapped in a non-positive-weight cycle, witnessing a win for player .",
            "cite_spans": [
                {
                    "start": 40,
                    "end": 44,
                    "text": "[28]",
                    "ref_id": "BIBREF28"
                }
            ],
            "ref_spans": [],
            "section": "Solving Mean-Payoff Games via Progress Measures"
        },
        {
            "text": "To obtain a progress measure, one starts from some suitable association of position of the game with measures. The local information encoded by these measures is then propagated back along the edges of the underlying graph so as to associate with each position the information gathered along plays of some finite length starting from that position. The propagation process is performed according to the following intuition. The measures of positions adjacent to v are propagated back to v only if those measures push v further away from the property. This propagation is achieved by means of a measure stretch operation +, which adds, when appropriate, the measure of an adjacent position to the weight of a given position. This is established by comparing the measure of v with those of its adjacent positions, since, for each position v, the mean-payoff property is defined in terms of the sum of the weights encountered along the plays from that position. The process ends when no position can be pushed further away from the property and each position is not dominated by any, respectively one, of its adjacents, depending on whether that position belongs to player \u2295 or to player , respectively. The positions that did not reach measure \u221e are those from which player can win the game and the set of measures currently associated with such positions forms a mean-payoff progress measure.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Solving Mean-Payoff Games via Progress Measures"
        },
        {
            "text": "To make the above intuitions precise, we introduce the notion of measure function, progress measure, and an algorithm for computing progress measures correctly. It is worth noticing that the progress-measure based approach as described in [13] , called SEPM from now on, can be easily recast equivalently in the form below. A measure function \u00b5 : Ps \u2192 N \u221e maps each position v in the game to a suitable measure \u00b5(v). The order \u2264 of the measures naturally induces a pointwise partial order on the measure functions defined in the usual way, namely, for any two measure functions \u00b5 \uf731 and \u00b5 \uf732 ,",
            "cite_spans": [
                {
                    "start": 239,
                    "end": 243,
                    "text": "[13]",
                    "ref_id": "BIBREF14"
                }
            ],
            "ref_spans": [],
            "section": "Solving Mean-Payoff Games via Progress Measures"
        },
        {
            "text": "The set of measure functions over a measure space, together with the induced ordering , forms a measure-function space.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Solving Mean-Payoff Games via Progress Measures"
        },
        {
            "text": "Definition 1 (Measure-Function Space). The measure-function space is the partial order F MF, whose components are defined as follows:",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Solving Mean-Payoff Games via Progress Measures"
        },
        {
            "text": "The \u2295-denotation (resp., -denotation) of a measure function \u00b5 \u2208 MF is the set \u00b5 \u2295 \u00b5 \u2212\uf731 (\u221e) (resp., \u00b5 \u00b5 \u2212\uf731 (\u221e)) of all positions having maximal (resp., non-maximal) measure associated within \u00b5.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Solving Mean-Payoff Games via Progress Measures"
        },
        {
            "text": "Consider a position v with an adjacent u with measure \u03b7. A measure update of \u03b7 w.r.t. v is obtained by the stretch operator + : N \u221e \u00d7 Ps \u2192 N \u221e , defined as \u03b7 + v max{0, \u03b7 + wg(v)}, which corresponds to the payoff estimate that the given position will obtain by choosing to follow the move leading to the u.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Solving Mean-Payoff Games via Progress Measures"
        },
        {
            "text": "A mean-payoff progress measure is such that the measure associated with each game position v need not be increased further in order to beat the actual payoff of the plays starting from v. In particular, it can be defined by taking into account the opposite attitude of the two players in the game. While the player \u2295 tries to push toward higher measures, the player will try to keep the measures as low as possible. A measure function in which the payoff of each \u2295-position (resp., -position) v is not dominated by the payoff of all (resp., some of) its adjacents augmented with the weight of v itself meets the requirements.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Solving Mean-Payoff Games via Progress Measures"
        },
        {
            "text": "Definition 2 (Progress Measure). A measure function \u00b5 \u2208 MF is a progress measure if the following two conditions hold true, for all positions v \u2208 Ps:",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Solving Mean-Payoff Games via Progress Measures"
        },
        {
            "text": "The following theorem states the fundamental property of progress measures, namely, that every position with a non-maximal measures is won by player .",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Solving Mean-Payoff Games via Progress Measures"
        },
        {
            "text": "Theorem 1 (Progress Measure). \u00b5 \u2286 Wn , for all progress measures \u00b5.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Solving Mean-Payoff Games via Progress Measures"
        },
        {
            "text": "In order to obtain a progress measure from a given measure function, one can iteratively adjust the current measure values in such a way to force the progress condition above among adjacent positions. To this end, we define the lift operator lift : MF \u2192 MF as follows:",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Solving Mean-Payoff Games via Progress Measures"
        },
        {
            "text": "Note that the lift operator is clearly monotone and, therefore, admits a least fixpoint. A mean-payoff progress measure can be obtained by repeatedly applying this operator until a fixpoint is reached, starting from the minimal measure function \u00b5 \uf730 {v \u2208 Ps \u2192 0} that assigns measure 0 to all the positions in the game. The following solver operator applied to \u00b5 \uf730 computes the desired solution: sol lfp \u00b5 . lift(\u00b5) : MF \u2192 MF. Observe that the measures generated by the procedure outlined above have a fairly natural interpretation. Each positive measure, indeed, under-approximates the weight that player \u2295 can enforce along finite prefixes of the plays from the corresponding positions. This follows from the fact that, while player \u2295 maximizes its measures along the outgoing moves, player minimizes them. In this sense, each positive measure witnesses the existence of a positively-weighted finite prefix of a play that player \u2295 can enforce. Let S {wg(v) \u2208 N : v \u2208 Ps \u2227 wg(v) > 0} be the sum of all the positive weights in the game. Clearly, the maximal payoff of a simple play in the underlying graph cannot exceed S. Therefore, a measure greater than S witnesses the existence of a cycle whose payoff diverges to infinity and is won, thus, by player \u2295. Hence, any measure strictly greater than S can be substituted with the value \u221e. This observation establishes the termination of the algorithm and is instrumental to its completeness proof. Indeed, at the fixpoint, the measures actually coincide with the highest payoff player \u2295 is able to guarantee. Soundness and completeness of the above procedure have been established in [13] , where the authors also show that, despite the algorithm requiring O(n \u00b7 S) = O n 2 \u00b7 W lift operations in the worst-case, with n the number of positions and W the maximal positive weight in the game, the overall cost of these lift operations is O(S \u00b7 m \u00b7 log S) = O(n \u00b7 m \u00b7 W \u00b7 log(n \u00b7 W )), with m the number of moves and O(log S) the cost of arithmetic operations to compute the stretch of the measures.",
            "cite_spans": [
                {
                    "start": 1633,
                    "end": 1637,
                    "text": "[13]",
                    "ref_id": "BIBREF14"
                }
            ],
            "ref_spans": [],
            "section": "Solving Mean-Payoff Games via Progress Measures"
        },
        {
            "text": "Let us consider the simple example game depicted in Figure 1 , where the shape of each position indicates the owner, circles for player \u2295 and square for its opponent , and, in each label of the form /w, the letter w corresponds to the associated weight, where we assume k > 1. Starting from the smallest measure function \u00b5 \uf730 = {a, b, c, d \u2192 0}, the first application of the lift operator returns",
            "cite_spans": [],
            "ref_spans": [
                {
                    "start": 52,
                    "end": 60,
                    "text": "Figure 1",
                    "ref_id": "FIGREF0"
                }
            ],
            "section": "Solving Mean-Payoff Games via Quasi Dominions"
        },
        {
            "text": ". After that step, the following iterations of the fixpoint alternatively updates positions c and d, since the other ones already satisfy the progress condition. Being c \u2208 Ps , the lift operator chooses for it the measure computed along the move (c, d),",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Solving Mean-Payoff Games via Quasi Dominions"
        },
        {
            "text": "A progress measure is obtained after exactly 2k +1 iterations, when the measure of c reaches value k and d value k +1. Note, however, that the choice of the move (c, d) is clearly a losing strategy for player , as remaining in the highlighted region would make the payoff from position c diverge. Therefore, the only reasonable choice for player is to exit from that region by taking the move leading to position a. An operator able to diagnose this phenomenon early on could immediately discard the move (c, d) and jump directly to the correct payoff obtained by choosing the move to position a. As we shall see, such an operator might lose the monotonicity property and recovering the completeness of the resulting approach will prove more involved.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Solving Mean-Payoff Games via Quasi Dominions"
        },
        {
            "text": "In the rest of this article we devise a progress operator that does precisely that. We start by providing a notion of quasi dominion, originally introduced for parity games in [5] , which can be exploited in the context of MPGs.",
            "cite_spans": [
                {
                    "start": 176,
                    "end": 179,
                    "text": "[5]",
                    "ref_id": "BIBREF6"
                }
            ],
            "ref_spans": [],
            "section": "Solving Mean-Payoff Games via Quasi Dominions"
        },
        {
            "text": "Definition 3 (Quasi Dominion). An set of positions Q \u2286 Ps is a quasi \u2295dominion if there exists a \u2295-strategy \u03c3 \u2295 \u2208 Str \u2295 (Q), called \u2295-witness for Q, such that, for all -strategies \u03c3 \u2208 Str (Q) and positions v \u2208 Q, the play \u03c0 = play((\u03c3 \u2295 , \u03c3 ), v), called (\u03c3 \u2295 , v)-play in Q, satisfies wg(\u03c0) > 0. If the condition wg(\u03c0) > 0 holds only for infinite plays \u03c0, then Q is called weak quasi \u2295-dominion. Essentially, a quasi \u2295-dominion consists in a set Q of positions starting from which player \u2295 can force plays in Q of positive weight. Analogously, any infinite play that player \u2295 can force in a weak quasi \u2295-dominion has positive weight. Clearly, any quasi \u2295-dominion is also a weak quasi \u2295-dominion. Moreover, the latter are closed under subsets, while the former are not. It is an immediate consequence of the definition above that all infinite plays induced by the \u2295-witness, if any, necessarily have infinite weight and, thus, are winning for player \u2295. Indeed, every such a play \u03c0 is regular, i.e. it can be decomposed into a prefix \u03c0 and a simple cycle (\u03c0 ) \u03c9 , i.e. \u03c0 = \u03c0 (\u03c0 ) \u03c9 , since the strategies we are considering are memoryless. Now, wg((\u03c0 ) \u03c9 ) > 0, so, wg(\u03c0 ) > 0, which implies wg((\u03c0 ) \u03c9 ) = \u221e. Hence, wg(\u03c0) = \u221e. Proposition 1. Let Q be a weak quasi \u2295-dominion with \u03c3 \u2295 \u2208 Str \u2295 (Q) one of its \u2295-witnesses and Q \u2286 Q. Then, for all -strategies \u03c3 \u2208 Str (Q ) and positions v \u2208 Q the following holds: if the (\u03c3 \u2295 Q , v)-play \u03c0 = play((\u03c3 \u2295 Q , \u03c3 ), v) is infinite, then wg(\u03c0) = \u221e.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Solving Mean-Payoff Games via Quasi Dominions"
        },
        {
            "text": "From Proposition 1, it directly follows that, if a weak quasi \u2295-dominion Q is closed w.r.t. its \u2295-witness, namely all the induced plays are infinite, then it is a \u2295-dominion, hence is contained in Wn \u2295 .",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Solving Mean-Payoff Games via Quasi Dominions"
        },
        {
            "text": "Consider again the example of Figure 1 . The set of position Q {a, c, d} forms a quasi \u2295-dominion whose \u2295-witness is the only possible \u2295-strategy mapping position d to c. Indeed, any infinite play remaining in Q forever and compatible with that strategy (e.g., the play from position c when player chooses the move from c leading to d or the one from a to itself or the one from a to d) grants an infinite payoff. Any finite compatible play, instead, ends in position a (e.g., the play from c when player chooses the move from c to a and then one from a to b) giving a payoff of at least k > 0. On the other hand, Q {c, d} is only a weak quasi \u2295-dominion, as player can force a play of weight 0 from position c, by choosing the exiting move (c, a). However, the internal move (c, d) would lead to an infinite play in Q of infinite weight.",
            "cite_spans": [],
            "ref_spans": [
                {
                    "start": 30,
                    "end": 38,
                    "text": "Figure 1",
                    "ref_id": "FIGREF0"
                }
            ],
            "section": "Solving Mean-Payoff Games via Quasi Dominions"
        },
        {
            "text": "The crucial observation here is that the best choice for player in any position of a (weak) quasi \u2295-dominion is to exit from it as soon as it can, while the best choice for player \u2295 is to remain inside it as long as possible. The idea of the algorithm we propose in this section is to precisely exploit the information provided by the quasi dominions in the following way. Consider the example above. In position a player must choose to exit from Q = {a, c, d}, by taking the move (a, b), without changing its measure, which would corresponds to its weight k. On the other hand, the best choice for player in position c is to exit from the weak quasi-dominion Q = {c, d}, by choosing the move (c, a) and lifting its measure from 0 to k. Note that this contrasts with the minimal measure-increase policy for player employed in [13] , which would keep choosing to leave c in the quasi-dominion by following the move to d, which gives the minimal increase in measure of value 1. Once c is out of the quasi-dominion, though, the only possible move for player \u2295 is to follow c, taking measure k + 1. The resulting measure function is the desired progress measure.",
            "cite_spans": [
                {
                    "start": 826,
                    "end": 830,
                    "text": "[13]",
                    "ref_id": "BIBREF14"
                }
            ],
            "ref_spans": [],
            "section": "Solving Mean-Payoff Games via Quasi Dominions"
        },
        {
            "text": "In order to make this intuitive idea precise, we need to be able to identify quasi dominions first. Interestingly enough, the measure functions \u00b5 defined in the previous section do allow to identify a quasi dominion, namely the set of positions \u00b5 \u2212\uf731 (0) having positive measure. Indeed, as observed at the end of that section, a positive measure witnesses the existence of a positively-weighted finite play that player \u2295 can enforce from that position onward, which is precisely the requirement of Definition 3. In the example of Figure 1 We shall keep the quasi-dominion information in pairs (\u00b5, \u03c3), called quasidominion representations (qdr, for short), composed of a measure function \u00b5 and a \u2295-strategy \u03c3, which corresponds to one of the \u2295-witnesses of the set of positions with positive measure in \u00b5. The connection between these two components is formalized in the definition below that also provides the partial order over which the new algorithm operates. Definition 4 (QDR Space). The quasi-dominion-representation space is the partial order Q QDR, , whose components are defined as follows:",
            "cite_spans": [],
            "ref_spans": [
                {
                    "start": 530,
                    "end": 538,
                    "text": "Figure 1",
                    "ref_id": "FIGREF0"
                }
            ],
            "section": "Solving Mean-Payoff Games via Quasi Dominions"
        },
        {
            "text": "1. QDR \u2286 MF \u00d7 Str \u2295 is the set of all pairs (\u00b5 , \u03c3 ) \u2208 QDR, called quasidominion-representations, composed of a measure function \u00b5 \u2208 MF and a \u2295-strategy \u03c3 \u2208 Str \u2295 (Q( )), where Q( ) \u00b5 \u2212\uf731 (0), for which: (a) Q( ) is a quasi \u2295-dominion enjoying \u03c3 as a \u2295-witness;",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Solving Mean-Payoff Games via Quasi Dominions"
        },
        {
            "text": "The \u03b1-denotation \u03b1 of a qdr , with \u03b1 \u2208 {\u2295, }, is the \u03b1-denotation \u00b5 \u03b1 of its measure function.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Solving Mean-Payoff Games via Quasi Dominions"
        },
        {
            "text": "Condition 1a is obvious. Condition 1b, instead, requires that every position with infinite measure is indeed won by player \u2295 and is crucial to guarantee the completeness of the algorithm. Finally, Conditions 1c and 1d ensure that every positive measure under approximates the actual weight of some finite play within the induced quasi dominion. This is formally captured by the following proposition, which can be easily proved by induction on the length of the play. Proposition 2. Let be a qdr and v\u03c0u a finite path starting at position v \u2208 Ps and terminating in position u \u2208 Ps compatible with the \u2295-strategy \u03c3 . Then, \u00b5 (v) \u2264 wg(v\u03c0) + \u00b5 (u).",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Solving Mean-Payoff Games via Quasi Dominions"
        },
        {
            "text": "It is immediate to see that every MPG admits a non-trivial QDR space, since the pair (\u00b5 \uf730 , \u03c3 \uf730 ), with \u00b5 \uf730 the smallest measure function and \u03c3 \uf730 the empty strategy, trivially satisfies all the required conditions. Proposition 3. Every MPG has a non-empty QDR space associated with it.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Solving Mean-Payoff Games via Quasi Dominions"
        },
        {
            "text": "The solution procedure we propose, called QDPM from now on, can intuitively be broken down as an alternation of two phases. The first one tries to lift the measures of positions outside the quasi dominion Q( ) in order to extend it, while the second one lifts the positions inside Q( ) that can be forced to exit from it by player . The algorithm terminates when no new position can be absorbed within the quasi dominion and no measure needs to be lifted to allow the -winning positions to exit from it, when possible. To this end, we define a controlled lift operator lift : QDR\u00d72 Ps \u00d72 Ps QDR that works on qdrs and takes two additional parameters, a source and a target set of positions. The intended meaning is that we want to restrict the application of the lift operation to the positions in the source set S, while using only the moves leading to the target set T. The different nature of the two types of lifting operations is reflected in the actual values of the source and target parameters.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Solving Mean-Payoff Games via Quasi Dominions"
        },
        {
            "text": ", where",
            "cite_spans": [],
            "ref_spans": [],
            "section": "lift( , S, T)"
        },
        {
            "text": "and, for all",
            "cite_spans": [],
            "ref_spans": [],
            "section": "lift( , S, T)"
        },
        {
            "text": ", and \u03c3 (v) = \u03c3 (v), otherwise. Except for the restriction on the outgoing moves considered, which are those leading to the targets in T, the lift operator acts on the measure component of a qdr very much like the original lift operator does. In order to ensure that the result is still a qdr, however, the lift operator must also update the \u2295-witness of the quasi dominion. This is required to guarantee that Conditions 1a and 1c of Definition 4 are preserved. If the measure of a \u2295-position v is not affected by the lift, the \u2295-witness must not change for that position. However, if the application of the lift operation increases the measure, then the \u2295-witness on v needs to be updated to any move (v, u) that grants measure \u00b5 (v) to v. In principle, more than one such move may exist and any one of them can serve as witness.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "lift( , S, T)"
        },
        {
            "text": "The solution corresponds to the inflationary fixpoint [10, 33] of the two phases mentioned above, sol ifp . prg + (prg \uf730 ( )) : QDR QDR, defined by the progress operators prg \uf730 and prg + . The first phase is computed by the operator prg \uf730 : QDR QDR as follows: prg \uf730 ( ) sup{ , lift( , Q( ), Ps)}. This operator is responsible of enforcing the progress condition on the positions outside the quasi dominion Q( ) that do not satisfy the inequalities between the measures along a move leading to Q( ) itself. It does that by applying the lift operator with Q( ) as source and no restrictions on the moves. Those position that acquire a positive measure in this phase contribute to enlarging the current quasi dominion. Observe that the strategy component of the qdr is updated so that it is a \u2295-witness of the new quasi dominion. To guarantee that measures never decrease, the supremum w.r.t. the QDR-space ordering is taken as result. Lemma 1. \u00b5 is a progress measure over Q( ), for all fixpoints of prg \uf730 .",
            "cite_spans": [
                {
                    "start": 54,
                    "end": 58,
                    "text": "[10,",
                    "ref_id": "BIBREF11"
                },
                {
                    "start": 59,
                    "end": 62,
                    "text": "33]",
                    "ref_id": "BIBREF33"
                }
            ],
            "ref_spans": [],
            "section": "lift( , S, T)"
        },
        {
            "text": "The second phase, instead, implements the mechanism intuitively described above, while analyzing the simple example of Figure 1 . This is achieved by the operator prg + reported in Algorithm 1. The procedure iteratively examines the current quasi dominion and lifts the measures of the positions that must exit from it. Specifically, it processes Q( ) layer by layer, starting from the outer layer of positions that must escape. The process ends when a, possibly empty, closed weak quasi dominion is obtained. Recall that all the positions in a closed weak quasi dominion are necessarily winning for player \u2295, due to Proposition 1. We distinguish two sets of positions in Q( ). Those that already satisfy the progress condition and those that do not. The measures of first ones already witness an escape route from Q( ). The other ones, instead, are those whose current choice is to remain inside it. For instance, when considering the measure function \u00b5 \uf732 in the example of Figure 1 , position a belongs to the first set, while positions c and d to the second one, since the choice of c is to follow the internal move (c, d).",
            "cite_spans": [],
            "ref_spans": [
                {
                    "start": 119,
                    "end": 127,
                    "text": "Figure 1",
                    "ref_id": "FIGREF0"
                },
                {
                    "start": 975,
                    "end": 983,
                    "text": "Figure 1",
                    "ref_id": "FIGREF0"
                }
            ],
            "section": "lift( , S, T)"
        },
        {
            "text": "Since the only positions that change measure are those in the second set, only such positions need to be examined. To identify them, which form a weak quasi dominion \u2206( ) strictly contained in Q( ), we proceed as follows. First, we collect the set npp( ) of positions in Q( ) that do not satisfy the progress condition, called the non-progress positions. Then, we compute the set of positions that will have no choice other than reaching npp( ), by computing the inflationary fixpoint of a suitable pre operator.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "lift( , S, T)"
        },
        {
            "text": "The final result is \u2206( ) (ifp Q . pre( , Q))(npp( )). Intuitively, \u2206( ) contains all the \u2295-positions that are forced to reach npp( ) via the quasi-dominion \u2295-witness and all the -positions that can only avoid reaching npp( ) by strictly increasing their measure, which player wants obviously to prevent.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "lift( , S, T)"
        },
        {
            "text": "It is important to observe that, from a functional view-point, the progress operator prg + would work just as well if applied to the entire quasi dominion Q( ), since it would simply leave unchanged the measure of those positions that already satisfy the progress condition. However, it is crucial that only the positions in \u2206( ) are processed in order to achieve the best asymptotic complexity bound known to date. We shall reiterate on this point later on.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "lift( , S, T)"
        },
        {
            "text": "At each iteration of the while-loop of Algorithm 1, let Q denote the current (weak) quasi dominion, initially set to \u2206( ) (Line 1). It first identifies the positions in Q that can immediately escape from it (Line 2). Those are (i) all the -position with a move leading outside of Q and (ii) the \u2295-positions v whose \u2295-witness \u03c3 forces v to exit from Q, namely \u03c3 (v) \u2208 Q, and that cannot strictly increase their measure by choosing to remain in Q. While the condition for -position is obvious, the one for \u2295-positions require some explanation. The crucial observation here is that, while player \u2295 does indeed prefer to remain in the quasi dominion, it can only do so while ensuring that by changing strategy it does not enable infinite plays within Q that are winning for the adversary. In other words, the new \u2295-strategy must still be a \u2295-witness for Q and this can only be ensured if the new choice strictly increases its measure. The operator esc : QDR\u00d72 Ps \u2192 2 Ps formalizes the idea:",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Alg. 1: Progress Operator"
        },
        {
            "text": "Consider, for instance, the example in Figure 2 and a qdr such that \u00b5 = {a \u2192 3; b \u2192 2; c, d, f \u2192 1; e \u2192 0} and \u03c3 = {b \u2192 a; f \u2192 d}. In this case, we have Q = {a, b, c, d, f} and \u2206( ) = {c, d, f}, since c is the only non-progress positions, d is forced to follow c in order to avoid the measure increase required to reach b, and f is forced by the \u2295-witness to reach d. Now, consider the situation where the current weak quasi dominion is Q = {c, f}, i.e. after d has escaped from \u2206( ). The escape set of Q is {c, f}. To see why the \u2295-position f is escaping, observe that \u00b5 (f) + f = 1 = \u00b5 (f) and that, indeed, should player \u2295 choose to change its strategy and take the move (f, f) to remain in Q, it would obtain an infinite play with payoff 0, thus violating the definition of weak quasi dominion. Before proceeding, we want to stress an easy consequence of the definition of the notion of escape set and Conditions 1c and 1d of Definition 4, i.e., that every escape position of the quasi dominion Q( ) can only assume its weight as possible measure inside a qdr , as reported is the following proposition. This observation, together with Proposition 2, ensures that the measure of a position v \u2208 Q( ) is an under approximation of the weight of all finite plays leaving Q( ).",
            "cite_spans": [],
            "ref_spans": [
                {
                    "start": 39,
                    "end": 47,
                    "text": "Figure 2",
                    "ref_id": "FIGREF2"
                }
            ],
            "section": "Alg. 1: Progress Operator"
        },
        {
            "text": "Let be a qdr. Then, \u00b5 (v) = wg(v) > 0, for all v \u2208 esc( , Q( )). Now, going back to the analysis of the algorithm, if the escape set is non-empty, we need to select the escape positions that need to be lifted in order to satisfy the progress condition. The main difficulty is to do so in such a way that the resulting measure function still satisfies Condition 1d of Definition 4, for all the -positions with positive measure. The problem occurs when a -position can exit either immediately or passing through a path leading to another position in the escape set. Consider again the example above, where Q = \u2206( ) = {c, d, f}. If position d immediately escapes from Q using the move (d, b), it would change its measure to \u00b5 (d) = \u00b5(b) + d = 2 > \u00b5(d) = 1. Now, position c has two ways to escape, either directly with move (c, a) or by reaching the other escape position d passing through f. The first choice would set its measure to \u00b5(a) + c = 4. The resulting measure function, however, would not satisfy Condition 1d of Definition 4, as the new measure of c would be greater than \u00b5 (d) + c = 2, preventing to obtain a qdr. Similarly, if position d escapes from Q passing through c via the move (c, a),",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Proposition 4."
        },
        {
            "text": "violating Condition 1d. Therefore, in this specific case, the only possible way to escape is to reach b. The solution to this problem is simply to lift in the current iteration only those positions that obtain the lowest possible measure increase, hence position d in the example, leaving the lift of c to some subsequent iteration of the algorithm that would choose the correct escape route via d. To do so, we first compute the minimal measure increase, called the best-escape forfeit, that each position in the escape set would obtain by exiting the quasi dominion immediately. The positions with the lowest possible forfeit, called best-escape positions, can all be lifted at the same time. The intuition is that the measure of all the positions that escape from a (weak) quasi dominion will necessarily be increased of at least the minimal best-escape forfeit. This observation is at the core of the proof of Theorem 2 (see the appendix) ensuring that the desired properties of qdrs are preserved by the operator prg + . The set of best-escape positions is computed by the operator bep : QDR\u00d72 Ps \u2192 2 Ps as follows: bep( , Q) argmin v\u2208esc( ,Q) bef(\u00b5 , Q, v), where the operator bef : MF\u00d72 Ps \u00d7Ps \u2192 N \u221e computes, for each position v in a quasi dominion Q, its best-escape forfeit:",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Proposition 4."
        },
        {
            "text": "Once the set E of best-escape positions is identified (Line 3), the procedure lifts them restricting the possible moves to those leading outside the current quasi dominion (Line 4). Those positions are, then, removed from the set (Line 5), thus obtaining a smaller weak quasi dominion ready for the next iteration.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Proposition 4."
        },
        {
            "text": "The algorithm terminates when the (possibly empty) current quasi dominion Q is closed. By virtue of Proposition 1, all those positions belong to Wn \u2295 and their measure is set to \u221e by means of the operator win : QDR \u00d7 2 Ps QDR (Line 6), which also computes the winning \u2295-strategy on those positions, as follows:",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Proposition 4."
        },
        {
            "text": "Observe that, since we know that every \u2295-position v \u2208 Q \u2229 Ps \u2295 , whose current \u2295-witness leads outside Q, is not an escape position, any move (v, u) within Q that grants the maximal stretch \u00b5 (u) + v strictly increases its measure and, therefore, is a possible choice for a \u2295-witness of the \u2295-dominion Q.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Proposition 4."
        },
        {
            "text": "At this point, it should be quite evident that the progress operator prg + is responsible of enforcing the progress condition on the positions inside the quasi dominion Q( ), thus, the following necessarily holds. Lemma 2. \u00b5 is a progress measure over Q( ), for all fixpoints of prg + .",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Proposition 4."
        },
        {
            "text": "In order to prove the correctness of the proposed algorithm, we first need to ensure that any quasi-dominion space Q is indeed closed under the operators prg \uf730 and prg + . This is established by the following theorem, which states that the operators are total functions on that space. Theorem 2. The operators prg \uf730 and prg + are total inflationary functions.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Proposition 4."
        },
        {
            "text": "Since both operators are inflationary, so is their composition, which admits fixpoint. Therefore, the operator sol is well defined. Moreover, following the same considerations discussed at the end of Section 3, it can be proved the fixpoint is obtained after at most n \u00b7 (S + 1) iterations. Let ifp k X . F(X) denote the k-th iteration of an inflationary operator F. Then, we have the following theorem.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Proposition 4."
        },
        {
            "text": "Theorem 3 (Termination). The solver operator sol ifp . prg + (prg \uf730 ( )) is a well-defined total function. Moreover, for every \u2208 QDR it holds that sol( ) = (ifp k . prg + (prg \uf730 ( )))( ), for some index k \u2264 n \u00b7 (S + 1), where n is the number of positions in the MPG and S {wg(v) \u2208 N : v \u2208 Ps \u2227 wg(v) > 0} the total sum of its positive weights.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Proposition 4."
        },
        {
            "text": "As already observed before, Figure 1 exemplifies an infinite family of games with a fixed number of positions and increasing maximal weight k over which the SEPM algorithm requires 2k + 1 iterations of the lift operator. On the contrary, QDPM needs exactly two iterations of the solver operator sol to find the progress measure, starting from the smallest measure function \u00b5 \uf730 . Indeed, the first iteration returns a measure function \u00b5 \uf731 = sol(\u00b5 \uf730 ), with \u00b5 \uf731 (a) = k, \u00b5 \uf731 (b) = \u00b5 \uf731 (c) = 0, and \u00b5 \uf731 (d) = 1, while the second one \u00b5 \uf732 = sol(\u00b5 \uf731 ) identifies the smallest progress measure, with \u00b5 \uf731 (a) = \u00b5 \uf731 (c) = k, \u00b5 \uf731 (b) = 0, and \u00b5 \uf731 (d) = k + 1. From this observations, the next result immediately follows. From Theorem 1 and Lemmas 1 and 2 it follows that the solution provided by the algorithm is indeed a progress measure, hence establishing soundness. Completeness follows from Theorem 3 and from Condition 1b of Definition 4 that ensures that all the positions with infinite measure are winning for player \u2295.",
            "cite_spans": [],
            "ref_spans": [
                {
                    "start": 28,
                    "end": 36,
                    "text": "Figure 1",
                    "ref_id": "FIGREF0"
                }
            ],
            "section": "Proposition 4."
        },
        {
            "text": "Theorem 5 (Correctness). sol( ) = Wn , for every \u2208 QDR.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Proposition 4."
        },
        {
            "text": "The following lemma ensures that each execution of the operator prg + strictly increases the measure of all the positions in \u2206( ).",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Proposition 4."
        },
        {
            "text": "Recall that each position can at most be lifted S + 1 = O(n \u00b7 W ) times and, by the previous lemma, the complexity of sol only depends on the cumulative cost of such lift operations. We can express, then, the total cost as the sum, over the set of positions in the game, of the cost of all the lift operations performed on that positions. Each such operation can be computed in time linear in the number of incoming and outgoing moves of the corresponding lifted position v, namely O (|Mv (v)| + |Mv \u2212\uf731 (v)|) \u00b7 log S , with O(log S) the cost of each arithmetic operation involved. Summing all up, the actual asymptotic complexity of the procedure can, therefore, be expressed as O(n \u00b7 m \u00b7 W \u00b7 log(n \u00b7 W )).",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Proposition 4."
        },
        {
            "text": "Theorem 6 (Complexity). QDPM requires time O(n \u00b7 m \u00b7 W \u00b7 log(n \u00b7 W )) to solve an MPG with n positions, m moves, and maximal positive weight W .",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Proposition 4."
        },
        {
            "text": "In order to assess the effectiveness of the proposed approach, we implemented both QDPM and SEPM [13] , the most efficient known solution to the problem and the more closely related one to QDPM, in C++ within Oink [32] . Oink has been developed as a framework to compare parity game solvers. However, extending the framework to deal with MPGs is not difficult. The form of the arenas of the two types of games essentially coincide, the only relevant difference being that MPGs allow negative numbers to label game positions. We ran the two solvers against randomly generated MPGs of various sizes. Most often, the gap between the two algorithms is between two and three orders of magnitude, as indicated by the dashed diagonal lines. It also shows that SEPM is particularly sensitive to the density of the underlying graph, as its performance degrades significantly as the number of moves increases. The maximal solution time was 21000 sec. for SEPM and 0.017 sec. for QDPM. Figure 4 , instead, compares the two algorithms fixing the maximal out-degree of the underlying graphs to 2, in the left-hand picture, and to 40, in the right-hand one, while increasing the number of positions from 10 3 to 10 5 along the x-axis. Each picture displays the performance results on 2800 games. Each point shows the total time to solve 100 randomly generated games with that given number of positions, which increases by 1000 up to size 2\u00b710 3 and by 10000, thereafter. In both pictures the scale is logarithmic. For the experiments in the right-hand picture we had to set a timeout for SEPM to 45 minutes per game, which was hit most of the times on the bigger ones. Once again, the QDPM significantly outperforms SEPM on both kinds of benchmarks, with a gap of more than an order of magnitude on the first ones, and a gap of more than three orders of magnitude on the second ones. The results also confirm that the performance gap grows considerably as the number of moves per position increases. We are not aware of actual concrete benchmarks for MPGs. However, exploiting the standard encoding of parity games into mean-payoff games [25] , we can compare the behavior of SEPM and QDPM on concrete verification problems encoded as parity games. For completeness, Table 1 reports some experiments on such problems. The table reports the execution times, expressed in seconds, required by the two algorithms to solve instances of two classic verification problems: the Elevator Verification and the Language Inclusion problems. These two benchmarks are included in the PGSolver [23] toolkit and are often used as benchmarks for parity games solvers. The first benchmark is a verification under fairness constraints of a simple model of an elevator, while the second one encodes the language inclusion problem between a non-deterministic B\u00fcchi automaton and a deterministic one. The results on various instances of those problems confirm that QDPM significantly outperforms the classic progress measure approach. Note also that the translation into MPGs, which encodes priorities as weights whose absolute value is exponential in the values of the priorities, leads to games with weights of high magnitude. Hence, the results in Table 1 provide further evidence that QDPM is far less dependent on the absolute value of the weights. They also show that QDPM can be very effective for the solution of real-world qualitative verification problems. It is worth noting, though, that the translation from parity to MPGs gives rise to weights that are exponentially distant from each other [25] . As a consequence, the resulting benchmarks are not necessarily representative of MPGs, being a very restricted subclass. Nonetheless, they provide evidence of the applicability of the approach in practical scenarios.",
            "cite_spans": [
                {
                    "start": 97,
                    "end": 101,
                    "text": "[13]",
                    "ref_id": "BIBREF14"
                },
                {
                    "start": 214,
                    "end": 218,
                    "text": "[32]",
                    "ref_id": "BIBREF32"
                },
                {
                    "start": 2124,
                    "end": 2128,
                    "text": "[25]",
                    "ref_id": "BIBREF26"
                },
                {
                    "start": 2566,
                    "end": 2570,
                    "text": "[23]",
                    "ref_id": "BIBREF24"
                },
                {
                    "start": 3570,
                    "end": 3574,
                    "text": "[25]",
                    "ref_id": "BIBREF26"
                }
            ],
            "ref_spans": [
                {
                    "start": 975,
                    "end": 983,
                    "text": "Figure 4",
                    "ref_id": "FIGREF3"
                },
                {
                    "start": 2253,
                    "end": 2260,
                    "text": "Table 1",
                    "ref_id": "TABREF0"
                },
                {
                    "start": 3216,
                    "end": 3223,
                    "text": "Table 1",
                    "ref_id": "TABREF0"
                }
            ],
            "section": "Experimental Evaluation"
        },
        {
            "text": "We proposed a novel solution algorithm for the decision problem of MPGs that integrates progress measures and quasi dominions. We argue that the integration of these two concepts may offer significant speed up in convergence to the solution, at no additional computational cost. This is evidenced by the existence of a family of games on which the combined approach can perform arbitrarily better than a classic progress measure based solution. Experimental results also show that the introduction of quasi dominions can often reduce solution times up to three order of magnitude, suggesting that the approach may be very effective in practical applications as well. We believe that the integration approach we devised is general enough to be applied to other types of games. In particular, the application of quasi dominions in conjunction with progress measure based approaches, such as those of [27] and [21] , may lead to practically efficient quasi polynomial algorithms for parity games and their quantitative extensions.",
            "cite_spans": [
                {
                    "start": 898,
                    "end": 902,
                    "text": "[27]",
                    "ref_id": "BIBREF27"
                },
                {
                    "start": 907,
                    "end": 911,
                    "text": "[21]",
                    "ref_id": "BIBREF22"
                }
            ],
            "ref_spans": [],
            "section": "Concluding Remarks"
        }
    ],
    "bib_entries": {
        "BIBREF3": {
            "ref_id": "b3",
            "title": "PRIMES is in P",
            "authors": [
                {
                    "first": "M",
                    "middle": [],
                    "last": "Agrawal",
                    "suffix": ""
                },
                {
                    "first": "N",
                    "middle": [],
                    "last": "Kayal",
                    "suffix": ""
                },
                {
                    "first": "N",
                    "middle": [],
                    "last": "Saxena",
                    "suffix": ""
                }
            ],
            "year": 2004,
            "venue": "AM",
            "volume": "160",
            "issn": "2",
            "pages": "781--793",
            "other_ids": {}
        },
        "BIBREF4": {
            "ref_id": "b4",
            "title": "The Tropical Shadow-Vertex Algorithm Solves Mean-Payoff Games in Polynomial Time on Average",
            "authors": [
                {
                    "first": "X",
                    "middle": [],
                    "last": "Allamigeon",
                    "suffix": ""
                },
                {
                    "first": "P",
                    "middle": [],
                    "last": "Benchimol",
                    "suffix": ""
                },
                {
                    "first": "S",
                    "middle": [],
                    "last": "Gaubert",
                    "suffix": ""
                }
            ],
            "year": 2014,
            "venue": "ICALP'14",
            "volume": "24",
            "issn": "",
            "pages": "89--100",
            "other_ids": {}
        },
        "BIBREF5": {
            "ref_id": "b5",
            "title": "Tropicalizing the Simplex Algorithm",
            "authors": [
                {
                    "first": "X",
                    "middle": [],
                    "last": "Allamigeon",
                    "suffix": ""
                },
                {
                    "first": "P",
                    "middle": [],
                    "last": "Benchimol",
                    "suffix": ""
                },
                {
                    "first": "S",
                    "middle": [],
                    "last": "Gaubert",
                    "suffix": ""
                },
                {
                    "first": "M",
                    "middle": [],
                    "last": "Joswig",
                    "suffix": ""
                }
            ],
            "year": 2015,
            "venue": "SIAM",
            "volume": "29",
            "issn": "2",
            "pages": "751--795",
            "other_ids": {}
        },
        "BIBREF6": {
            "ref_id": "b6",
            "title": "Solving Parity Games via Priority Promotion",
            "authors": [
                {
                    "first": "M",
                    "middle": [],
                    "last": "Benerecetti",
                    "suffix": ""
                },
                {
                    "first": "D",
                    "middle": [],
                    "last": "Dell&apos;erba",
                    "suffix": ""
                },
                {
                    "first": "F",
                    "middle": [],
                    "last": "Mogavero",
                    "suffix": ""
                }
            ],
            "year": 2016,
            "venue": "CAV'16, ser. LNCS 9780 (Part II",
            "volume": "",
            "issn": "",
            "pages": "270--290",
            "other_ids": {}
        },
        "BIBREF7": {
            "ref_id": "b7",
            "title": "A Combinatorial Strongly Subexponential Strategy Improvement Algorithm for Mean-Payoff Games",
            "authors": [
                {
                    "first": "H",
                    "middle": [],
                    "last": "Bj\u00f6rklund",
                    "suffix": ""
                },
                {
                    "first": "S",
                    "middle": [],
                    "last": "Sandberg",
                    "suffix": ""
                },
                {
                    "first": "S",
                    "middle": [],
                    "last": "Vorobyov",
                    "suffix": ""
                }
            ],
            "year": 2004,
            "venue": "MFCS'04",
            "volume": "",
            "issn": "",
            "pages": "673--685",
            "other_ids": {}
        },
        "BIBREF8": {
            "ref_id": "b8",
            "title": "A Combinatorial Strongly Subexponential Strategy Improvement Algorithm for Mean-Payoff Games",
            "authors": [
                {
                    "first": "H",
                    "middle": [],
                    "last": "Bj\u00f6rklund",
                    "suffix": ""
                },
                {
                    "first": "S",
                    "middle": [],
                    "last": "Vorobyov",
                    "suffix": ""
                }
            ],
            "year": 2007,
            "venue": "DAM",
            "volume": "155",
            "issn": "2",
            "pages": "210--229",
            "other_ids": {}
        },
        "BIBREF9": {
            "ref_id": "b9",
            "title": "Synthesis from LTL Specifications with Mean-Payoff Objectives",
            "authors": [
                {
                    "first": "A",
                    "middle": [],
                    "last": "Bohy",
                    "suffix": ""
                },
                {
                    "first": "V",
                    "middle": [],
                    "last": "Bruy\u00e8re",
                    "suffix": ""
                },
                {
                    "first": "E",
                    "middle": [],
                    "last": "Filiot",
                    "suffix": ""
                },
                {
                    "first": "J.-F",
                    "middle": [],
                    "last": "Raskin",
                    "suffix": ""
                }
            ],
            "year": 2013,
            "venue": "TACAS'13",
            "volume": "",
            "issn": "",
            "pages": "169--184",
            "other_ids": {}
        },
        "BIBREF10": {
            "ref_id": "b10",
            "title": "Temporal Specifications with Accumulative Values",
            "authors": [
                {
                    "first": "U",
                    "middle": [],
                    "last": "Boker",
                    "suffix": ""
                },
                {
                    "first": "K",
                    "middle": [],
                    "last": "Chatterjee",
                    "suffix": ""
                },
                {
                    "first": "T",
                    "middle": [],
                    "last": "Henzinger",
                    "suffix": ""
                },
                {
                    "first": "O",
                    "middle": [],
                    "last": "Kupferman",
                    "suffix": ""
                }
            ],
            "year": 2011,
            "venue": "LICS'11",
            "volume": "",
            "issn": "",
            "pages": "43--52",
            "other_ids": {}
        },
        "BIBREF11": {
            "ref_id": "b11",
            "title": "Sur le Th\u00e9or\u00e8me de Zorn",
            "authors": [
                {
                    "first": "N",
                    "middle": [],
                    "last": "Bourbaki",
                    "suffix": ""
                }
            ],
            "year": 1949,
            "venue": "AM",
            "volume": "2",
            "issn": "6",
            "pages": "434--437",
            "other_ids": {}
        },
        "BIBREF12": {
            "ref_id": "b12",
            "title": "Infinite Runs in Weighted Timed Automata with Energy Constraints",
            "authors": [
                {
                    "first": "P",
                    "middle": [],
                    "last": "Bouyer",
                    "suffix": ""
                },
                {
                    "first": "U",
                    "middle": [],
                    "last": "Fahrenberg",
                    "suffix": ""
                },
                {
                    "first": "K",
                    "middle": [],
                    "last": "Larsen",
                    "suffix": ""
                },
                {
                    "first": "N",
                    "middle": [],
                    "last": "Markey",
                    "suffix": ""
                },
                {
                    "first": "J",
                    "middle": [],
                    "last": "Srba",
                    "suffix": ""
                }
            ],
            "year": 2008,
            "venue": "FORMATS",
            "volume": "",
            "issn": "",
            "pages": "33--47",
            "other_ids": {}
        },
        "BIBREF13": {
            "ref_id": "b13",
            "title": "Using Strategy Improvement to Stay Alive",
            "authors": [
                {
                    "first": "L",
                    "middle": [],
                    "last": "Brim",
                    "suffix": ""
                },
                {
                    "first": "J",
                    "middle": [],
                    "last": "Chaloupka",
                    "suffix": ""
                }
            ],
            "year": 2012,
            "venue": "IJFCS",
            "volume": "23",
            "issn": "3",
            "pages": "585--608",
            "other_ids": {}
        },
        "BIBREF14": {
            "ref_id": "b14",
            "title": "Faster Algorithms for Mean-Payoff Games",
            "authors": [
                {
                    "first": "L",
                    "middle": [],
                    "last": "Brim",
                    "suffix": ""
                },
                {
                    "first": "J",
                    "middle": [],
                    "last": "Chaloupka",
                    "suffix": ""
                },
                {
                    "first": "L",
                    "middle": [],
                    "last": "Doyen",
                    "suffix": ""
                },
                {
                    "first": "R",
                    "middle": [],
                    "last": "Gentilini",
                    "suffix": ""
                },
                {
                    "first": "J.-F",
                    "middle": [],
                    "last": "Raskin",
                    "suffix": ""
                }
            ],
            "year": 2011,
            "venue": "FMSD",
            "volume": "38",
            "issn": "2",
            "pages": "97--118",
            "other_ids": {}
        },
        "BIBREF15": {
            "ref_id": "b15",
            "title": "Better Quality in Synthesis Through Quantitative Objectives",
            "authors": [
                {
                    "first": "R",
                    "middle": [
                        "B K"
                    ],
                    "last": "Chatterjee",
                    "suffix": ""
                },
                {
                    "first": "T",
                    "middle": [],
                    "last": "Henzinger",
                    "suffix": ""
                },
                {
                    "first": "B",
                    "middle": [],
                    "last": "Jobstmannand",
                    "suffix": ""
                }
            ],
            "year": 2009,
            "venue": "CAV'09",
            "volume": "",
            "issn": "",
            "pages": "140--156",
            "other_ids": {}
        },
        "BIBREF16": {
            "ref_id": "b16",
            "title": "Hyper Temporal Networks -A Tractable Generalization of Simple Temporal Networks and its Relation to Mean-Payoff Games",
            "authors": [
                {
                    "first": "C",
                    "middle": [],
                    "last": "Comin",
                    "suffix": ""
                },
                {
                    "first": "R",
                    "middle": [],
                    "last": "Posenato",
                    "suffix": ""
                },
                {
                    "first": "R",
                    "middle": [],
                    "last": "Rizzi",
                    "suffix": ""
                }
            ],
            "year": 2017,
            "venue": "Constraints",
            "volume": "22",
            "issn": "2",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF17": {
            "ref_id": "b17",
            "title": "Dynamic Consistency of Conditional Simple Temporal Networks via Mean-Payoff Games: A Singly-Exponential Time DC-checking",
            "authors": [
                {
                    "first": "C",
                    "middle": [],
                    "last": "Comin",
                    "suffix": ""
                },
                {
                    "first": "R",
                    "middle": [],
                    "last": "Rizzi",
                    "suffix": ""
                }
            ],
            "year": 2015,
            "venue": "TIME'15. IEEECS",
            "volume": "",
            "issn": "",
            "pages": "19--28",
            "other_ids": {}
        },
        "BIBREF18": {
            "ref_id": "b18",
            "title": "Improved Pseudo-Polynomial Bound for the Value Problem and Optimal Strategy Synthesis in Mean-Payoff Games",
            "authors": [],
            "year": 2017,
            "venue": "Algorithmica",
            "volume": "77",
            "issn": "4",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF19": {
            "ref_id": "b19",
            "title": "The Complexity of Stochastic Games",
            "authors": [
                {
                    "first": "A",
                    "middle": [],
                    "last": "Condon",
                    "suffix": ""
                }
            ],
            "year": 1992,
            "venue": "IC",
            "volume": "96",
            "issn": "2",
            "pages": "203--224",
            "other_ids": {}
        },
        "BIBREF20": {
            "ref_id": "b20",
            "title": "How to Solve Large Scale Deterministic Games with Mean Payoff by Policy Iteration",
            "authors": [
                {
                    "first": "V",
                    "middle": [],
                    "last": "Dhingra",
                    "suffix": ""
                },
                {
                    "first": "S",
                    "middle": [],
                    "last": "Gaubert",
                    "suffix": ""
                }
            ],
            "year": 2006,
            "venue": "VALUETOOLS'06",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF21": {
            "ref_id": "b21",
            "title": "Positional Strategies for Mean Payoff Games",
            "authors": [
                {
                    "first": "A",
                    "middle": [],
                    "last": "Ehrenfeucht",
                    "suffix": ""
                },
                {
                    "first": "J",
                    "middle": [],
                    "last": "Mycielski",
                    "suffix": ""
                }
            ],
            "year": 1979,
            "venue": "IJGT",
            "volume": "8",
            "issn": "2",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF22": {
            "ref_id": "b22",
            "title": "An Ordered Approach to Solving Parity Games in Quasi Polynomial Time and Quasi Linear Space",
            "authors": [
                {
                    "first": "J",
                    "middle": [],
                    "last": "Fearnley",
                    "suffix": ""
                },
                {
                    "first": "S",
                    "middle": [],
                    "last": "Jain",
                    "suffix": ""
                },
                {
                    "first": "S",
                    "middle": [],
                    "last": "Schewe",
                    "suffix": ""
                },
                {
                    "first": "F",
                    "middle": [],
                    "last": "Stephan",
                    "suffix": ""
                },
                {
                    "first": "D",
                    "middle": [],
                    "last": "Wojtczak",
                    "suffix": ""
                }
            ],
            "year": 2017,
            "venue": "SPIN'17",
            "volume": "",
            "issn": "",
            "pages": "112--121",
            "other_ids": {}
        },
        "BIBREF23": {
            "ref_id": "b23",
            "title": "Self-Witnessing Polynomial-Time Complexity and Prime Factorization",
            "authors": [
                {
                    "first": "M",
                    "middle": [],
                    "last": "Fellows",
                    "suffix": ""
                },
                {
                    "first": "N",
                    "middle": [],
                    "last": "Koblitz",
                    "suffix": ""
                }
            ],
            "year": 1992,
            "venue": "CSCT'92. IEEECS",
            "volume": "",
            "issn": "",
            "pages": "107--110",
            "other_ids": {}
        },
        "BIBREF24": {
            "ref_id": "b24",
            "title": "Solving Parity Games in Practice",
            "authors": [
                {
                    "first": "O",
                    "middle": [],
                    "last": "Friedmann",
                    "suffix": ""
                },
                {
                    "first": "M",
                    "middle": [],
                    "last": "Lange",
                    "suffix": ""
                }
            ],
            "year": 2009,
            "venue": "ATVA'09, ser. LNCS 5799",
            "volume": "",
            "issn": "",
            "pages": "182--196",
            "other_ids": {}
        },
        "BIBREF25": {
            "ref_id": "b25",
            "title": "Cyclic Games and an Algorithm to Find Minimax Cycle Means in Directed Graphs",
            "authors": [
                {
                    "first": "V",
                    "middle": [],
                    "last": "Gurvich",
                    "suffix": ""
                },
                {
                    "first": "A",
                    "middle": [],
                    "last": "Karzanov",
                    "suffix": ""
                },
                {
                    "first": "L",
                    "middle": [],
                    "last": "Khachivan",
                    "suffix": ""
                }
            ],
            "year": 1988,
            "venue": "USSRCMMP",
            "volume": "28",
            "issn": "5",
            "pages": "85--91",
            "other_ids": {}
        },
        "BIBREF26": {
            "ref_id": "b26",
            "title": "Deciding the Winner in Parity Games is in UP \u2229 co-UP",
            "authors": [
                {
                    "first": "M",
                    "middle": [],
                    "last": "Jurdzi\u0144ski",
                    "suffix": ""
                }
            ],
            "year": 1998,
            "venue": "STACS'00, ser. LNCS 1770",
            "volume": "68",
            "issn": "",
            "pages": "290--301",
            "other_ids": {}
        },
        "BIBREF27": {
            "ref_id": "b27",
            "title": "Succinct Progress Measures for Solving Parity Games",
            "authors": [
                {
                    "first": "M",
                    "middle": [],
                    "last": "Jurdzi\u0144ski",
                    "suffix": ""
                },
                {
                    "first": "R",
                    "middle": [],
                    "last": "Lazic",
                    "suffix": ""
                }
            ],
            "year": 2017,
            "venue": "LICS'17",
            "volume": "",
            "issn": "",
            "pages": "1--9",
            "other_ids": {}
        },
        "BIBREF28": {
            "ref_id": "b28",
            "title": "Progress Measures for Complementation of omega-Automata with Applications to Temporal Logic",
            "authors": [
                {
                    "first": "N",
                    "middle": [],
                    "last": "Klarlund",
                    "suffix": ""
                }
            ],
            "year": 1991,
            "venue": "FOCS'91. IEEECS",
            "volume": "",
            "issn": "",
            "pages": "358--367",
            "other_ids": {}
        },
        "BIBREF29": {
            "ref_id": "b29",
            "title": "Potential theory for mean payoff games",
            "authors": [
                {
                    "first": "Y",
                    "middle": [],
                    "last": "Lifshits",
                    "suffix": ""
                },
                {
                    "first": "D",
                    "middle": [],
                    "last": "Pavlov",
                    "suffix": ""
                }
            ],
            "year": 2007,
            "venue": "JMS",
            "volume": "145",
            "issn": "3",
            "pages": "4967--4974",
            "other_ids": {}
        },
        "BIBREF30": {
            "ref_id": "b30",
            "title": "Mean-Cost Cyclical Games",
            "authors": [
                {
                    "first": "N",
                    "middle": [],
                    "last": "Pisaruk",
                    "suffix": ""
                }
            ],
            "year": 1999,
            "venue": "MOR",
            "volume": "24",
            "issn": "4",
            "pages": "817--828",
            "other_ids": {}
        },
        "BIBREF31": {
            "ref_id": "b31",
            "title": "An Optimal Strategy Improvement Algorithm for Solving Parity and Payoff Games",
            "authors": [
                {
                    "first": "S",
                    "middle": [],
                    "last": "Schewe",
                    "suffix": ""
                }
            ],
            "year": 2008,
            "venue": "CSL'08, ser. LNCS 5213",
            "volume": "",
            "issn": "",
            "pages": "369--384",
            "other_ids": {}
        },
        "BIBREF32": {
            "ref_id": "b32",
            "title": "Oink: an Implementation and Evaluation of Modern Parity Game Solvers",
            "authors": [
                {
                    "first": "T",
                    "middle": [],
                    "last": "Van Dijk",
                    "suffix": ""
                }
            ],
            "year": 2018,
            "venue": "TACAS'18, ser. LNCS 10805",
            "volume": "",
            "issn": "",
            "pages": "291--308",
            "other_ids": {}
        },
        "BIBREF33": {
            "ref_id": "b33",
            "title": "Beweisstudien zum Satz von M. Zorn",
            "authors": [
                {
                    "first": "E",
                    "middle": [],
                    "last": "Witt",
                    "suffix": ""
                }
            ],
            "year": 1950,
            "venue": "MN",
            "volume": "4",
            "issn": "1-6",
            "pages": "434--438",
            "other_ids": {}
        },
        "BIBREF34": {
            "ref_id": "b34",
            "title": "The Complexity of Mean Payoff Games on Graphs",
            "authors": [
                {
                    "first": "U",
                    "middle": [],
                    "last": "Zwick",
                    "suffix": ""
                },
                {
                    "first": "M",
                    "middle": [],
                    "last": "Paterson",
                    "suffix": ""
                }
            ],
            "year": 1996,
            "venue": "TCS",
            "volume": "158",
            "issn": "1-2",
            "pages": "343--359",
            "other_ids": {}
        },
        "BIBREF35": {
            "ref_id": "b35",
            "title": "), which permits use, sharing, adaptation, distribution and reproduction in any medium or format, as long as you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons license and indicate if changes were made. The images or other third party material in this chapter are included in the chapter's Creative Commons license, unless indicated otherwise in a credit line to the material. If material is not included in the chapter's Creative Commons license and your intended use is not permitted by statutory regulation or exceeds the permitted use",
            "authors": [],
            "year": null,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        }
    },
    "ref_entries": {
        "FIGREF0": {
            "text": "An MPG.",
            "latex": null,
            "type": "figure"
        },
        "FIGREF1": {
            "text": ", \u00b5 \u2212\uf731 \uf730 (0) = \u2205 and \u00b5 \u2212\uf731 \uf731 (0) = {a, c, d} are both quasi dominions, the first one w.r.t. the empty \u2295-witness and the second one w.r.t. the \u2295-witness \u03c3 \u2295 (d) = c.",
            "latex": null,
            "type": "figure"
        },
        "FIGREF2": {
            "text": "Another MPG.",
            "latex": null,
            "type": "figure"
        },
        "FIGREF3": {
            "text": "An infinite family of MPGs { k } k exists on which QDPM requires a constant number of measure updates, while SEPM requires O(k) such updates.",
            "latex": null,
            "type": "figure"
        },
        "FIGREF4": {
            "text": "Random games with 10 4 positions.",
            "latex": null,
            "type": "figure"
        },
        "FIGREF5": {
            "text": "compares the solution time, expressed in seconds, of the two algorithms on 4000 games, each with 10 4 positions and randomly assigned weights in the range [\u221215 \u00d7 10 3 , 15 \u00d7 10 3 ]. The scale of both axes is logarithmic. The experiments are divided in 4 clusters, each containing 1000 games. The benchmarks in different clusters differ in the maximal number m of outgoing moves per position, with m \u2208 {10, 20, 40, 80}. These experiments clearly show that QDPM substantially outperforms SEPM.",
            "latex": null,
            "type": "figure"
        },
        "FIGREF6": {
            "text": "Total solution times in seconds of SEPM and QDPM on 5600 random games.",
            "latex": null,
            "type": "figure"
        },
        "TABREF0": {
            "text": "Concrete verification problems.",
            "latex": null,
            "type": "table"
        }
    },
    "back_matter": []
}