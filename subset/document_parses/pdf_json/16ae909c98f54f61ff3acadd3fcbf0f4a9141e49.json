{
    "paper_id": "16ae909c98f54f61ff3acadd3fcbf0f4a9141e49",
    "metadata": {
        "title": "Online Ride-Hitching in UAV Travelling",
        "authors": [
            {
                "first": "Songhua",
                "middle": [],
                "last": "Li",
                "suffix": "",
                "affiliation": {
                    "laboratory": "",
                    "institution": "City University of Hong Kong",
                    "location": {
                        "settlement": "Kowloon, Hong Kong SAR",
                        "country": "China"
                    }
                },
                "email": "songhuali3-c@my.cityu.edu.hk"
            },
            {
                "first": "Minming",
                "middle": [],
                "last": "Li",
                "suffix": "",
                "affiliation": {},
                "email": "minming.li@cityu.edu.hk"
            },
            {
                "first": "Lingjie",
                "middle": [],
                "last": "Duan",
                "suffix": "",
                "affiliation": {
                    "laboratory": "",
                    "institution": "City University of Hong Kong",
                    "location": {
                        "settlement": "Kowloon, Hong Kong SAR",
                        "country": "China"
                    }
                },
                "email": "lingjieduan@sutd.edu.sg"
            },
            {
                "first": "Victor",
                "middle": [
                    "C S"
                ],
                "last": "Lee",
                "suffix": "",
                "affiliation": {
                    "laboratory": "",
                    "institution": "The University of Hong Kong",
                    "location": {
                        "settlement": "Hong Kong SAR",
                        "country": "China"
                    }
                },
                "email": ""
            }
        ]
    },
    "abstract": [
        {
            "text": "The unmanned aerial vehicle (UAV) has emerged as a promising solution to provide delivery and other mobile services to customers rapidly, yet it drains its stored energy quickly when travelling on the way and (even if solar-powered) it takes time for charging power on the way before reaching the destination. To address this issue, existing works focus more on UAV's path planning with designated system vehicles providing charging service. However, in some emergency cases and rural areas where system vehicles are not available, public trucks can provide more feasible and cost-saving services and hence a silver lining. In this paper, we explore how a single UAV can save flying distance by exploiting public trucks, to minimize the travel time of the UAV. We give the first theoretical work studying online algorithms for the problem, which guarantees a worst-case performance. We first consider the offline problem knowing future truck trip information far ahead of time. By delicately transforming the problem into a graph satisfying both time and power constraints, we present a shortest-path algorithm that outputs the optimal solution of the problem. Then, we proceed to the online setting where trucks appear in real-time and only inform the UAV of their trip information some certain time \u2206t beforehand. As a benchmark, we propose a well-constructed lower bound that an online algorithm could achieve. We propose an online algorithm MyopicHitching that greedily takes truck trips and an improved algorithm Adaptive that further tolerates a waiting time in taking a ride. Our theoretical analysis shows that Adaptive is asymptotically optimal in the sense that its ratio approaches the proposed lower bounds as \u2206t increases.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Abstract"
        }
    ],
    "body_text": [
        {
            "text": "For example, the e-commerce giant Amazon has been pushing to deliver packages to its millions of customers by drones. DHL applies drones to provide fully autonomous loading and offloading in the last-mile delivery [3] , which provides a silver lining in special situations (e.g., the COVID-19 pandemic) with socialdistancing. However, due to the nature of the UAV/drone in both the low energy storage and high-rate flying consumption, it quickly drains its stored energy, which limits the delivery range and affects the service effectiveness remarkably. Although the UAV can be solar-powered by utilizing solar radiation as energy [2] , this is not sufficient since the charging-rate is not high enough. Fortunately, the UAV is able to dock with road vehicles automatically [17] , which makes it possible for UAV to team up with trucks spontaneously and instantaneously for reducing the transportation cost. This is inspired by ride-sharing platforms, for example, GrabHitch allows passengers to hitch ride on the way. However, it is still not clear what ramifications of online ride-hitching are on UAV's energy saving. This paper aims to provide theoretical foundations for online ride hitching in UAV travelling. We note that the UAV may not catch a truck which is far away from its current location (spatial issue), nor wait for a truck for too long (temporal issue) as time efficiency is critical in UAV's delivery service.",
            "cite_spans": [
                {
                    "start": 214,
                    "end": 217,
                    "text": "[3]",
                    "ref_id": null
                },
                {
                    "start": 631,
                    "end": 634,
                    "text": "[2]",
                    "ref_id": "BIBREF1"
                },
                {
                    "start": 774,
                    "end": 778,
                    "text": "[17]",
                    "ref_id": null
                }
            ],
            "ref_spans": [],
            "section": ""
        },
        {
            "text": "Related works. We survey relevant researches along two threads. The first thread studies UAV's energy-efficiency problem with either routing or speed scheduling optimization. For example, [6] proposed the looking before crossing algorithm, which is proved to be optimal for the offline speed scheduling problem under a practical flight energy model. [7] considers an energy-aware path planning algorithm that minimizes energy consumption while satisfying coverage and resolution constraints. Please refer to [4] for a survey work. In contrast, we focus on theoretical issues of the problem especially when truck trips are released in an online fashion. We aim to unveil the adaptability of the \"ridesharing\" in UAV travelling in the worst-case scenario, which is usually measured by online algorithms and competitive ratio [9] . The second thread focuses on classical combinatorial optimization problems. The k-server problem aims to efficiently move k servers to serve a batch of online requests of the metric space [12] such that the total moving distance of all servers is minimized. The famous work function algorithm achieves a competitive ratio of 2k \u2212 1 on general metrics and hence is optimal for 1-server problem on the line [13] . When the server moves in constant velocity, the work function algorithm is optimal in achieving minimum completion time of serving all the online requests. A variant of the 1-server problem is the online repairman problem [11] which asks for a tour that visits a set of online cities in the metric space such that the weighted sum of completion times of the cities is minimized. [11] proposes a (1+ \u221a 2) 2 -competitive deterministic online algorithm for the general metric spaces and [14] gave an improved 5.429-competitive algorithm for line metrics. A generalized version of the k-server problem is the k-taxi problem in which each request is represented by a pair (s, t) of two points (including the start point s and end point t) instead [15] . In the gas station problem [5] , a vehicle with a given tank capacity U and an initial amount \u00b5 s of gas, can purchase gas at each vertex of a complete graph at a certain price. And the objective of [5] is to find the cheapest way from a given start node s to a given target node t of the graph. Note that the gas station problem involves neither the time constraint on vertices nor restrictions in the set of visited vertices. Another related problem is the online maximum k-interval coverage problem which aims to select k online sub-intervals (i.e., truck trips) such that the total covered length of a target interval (i.e., the UAV's path) is maximized [16] . In contrast, the problem studied in this paper is more complicated since one has to face both the spatial and the temporal issues simultaneously and the power constraint of UAV travelling is further involved.",
            "cite_spans": [
                {
                    "start": 188,
                    "end": 191,
                    "text": "[6]",
                    "ref_id": "BIBREF5"
                },
                {
                    "start": 350,
                    "end": 353,
                    "text": "[7]",
                    "ref_id": "BIBREF6"
                },
                {
                    "start": 508,
                    "end": 511,
                    "text": "[4]",
                    "ref_id": "BIBREF3"
                },
                {
                    "start": 823,
                    "end": 826,
                    "text": "[9]",
                    "ref_id": "BIBREF8"
                },
                {
                    "start": 1017,
                    "end": 1021,
                    "text": "[12]",
                    "ref_id": "BIBREF11"
                },
                {
                    "start": 1234,
                    "end": 1238,
                    "text": "[13]",
                    "ref_id": "BIBREF12"
                },
                {
                    "start": 1463,
                    "end": 1467,
                    "text": "[11]",
                    "ref_id": "BIBREF10"
                },
                {
                    "start": 1620,
                    "end": 1624,
                    "text": "[11]",
                    "ref_id": "BIBREF10"
                },
                {
                    "start": 1725,
                    "end": 1729,
                    "text": "[14]",
                    "ref_id": "BIBREF13"
                },
                {
                    "start": 1983,
                    "end": 1987,
                    "text": "[15]",
                    "ref_id": "BIBREF14"
                },
                {
                    "start": 2017,
                    "end": 2020,
                    "text": "[5]",
                    "ref_id": "BIBREF4"
                },
                {
                    "start": 2189,
                    "end": 2192,
                    "text": "[5]",
                    "ref_id": "BIBREF4"
                },
                {
                    "start": 2648,
                    "end": 2652,
                    "text": "[16]",
                    "ref_id": "BIBREF15"
                }
            ],
            "ref_spans": [],
            "section": ""
        },
        {
            "text": "Main contributions of this paper are summarized below. Due to space constraints, some results and proofs are deferred to the Appendix.",
            "cite_spans": [],
            "ref_spans": [],
            "section": ""
        },
        {
            "text": "-We are the first to study UAV's traveling problem by hitching on truck rides in an online setting, for the purpose of minimizing the UAV's travel time.",
            "cite_spans": [],
            "ref_spans": [],
            "section": ""
        },
        {
            "text": "Comprehensively, we investigate different cases according to how early (i.e., \u2206t) a truck should inform the UAV of its trip before the departure. -For the offline version of the problem, we give a graph-based optimal solution.",
            "cite_spans": [],
            "ref_spans": [],
            "section": ""
        },
        {
            "text": "Since it is intricate to capture both power and time constraints in mapping truck trips to nodes of a graph, we delicately construct the graph by screening unnecessary trucks iteratively, which is on top of some characteristics of the problem. Based on this, we find an optimal solution in O(n 2 ) time. -As a benchmark, we construct lower bounds on the competitive ratio for any online algorithms, by considering different time gap \u2206t between the start time and release time. -We show that a simple myopic algorithm (where the UAV flies forward constantly by default until using up its stored energy, and myopically accepts as many rides as possible halfway) has a defect, which can be easily exploited by the adversary, leading to negligible energy saved from taking rides. To fix this defect, we propose a \u2206t-Adaptive algorithm by tolerating a waiting time at most \u2206t 2 in taking each ride, which achieves a provable competitive ratio very close to the lower bound.",
            "cite_spans": [],
            "ref_spans": [],
            "section": ""
        },
        {
            "text": "We consider the following problem: the UAV, which is at its origin O, is supposed to move to its destination A as early as possible, in which the path length |OA| = a. The UAV has a low charging rate \u03b1 per unit time and a high powerconsuming rate \u03b2 (> \u03b1) per unit time. Initially at time 0, the UAV stores an amount P 0 of energy (which is small and could be zero) and it flies at its maximum velocity 4 v 0 . To avoid the trivial case that the UAV directly flies to the destination by charging on the way, we assume the UAV has insufficient energy P 0 (< (\u03b2\u2212\u03b1)a v0 ). That is, the UAV needs to hitch truck rides to save flying distance or charge for sufficiently large amount of time to fly to the destination. Along the path OA of the UAV, a sequence V = {V 1 , V 2 , ..., V n } of n \u2208 N + trucks will be released one by one to potentially offer rides to the UAV. Each",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Problem Formulation"
        },
        {
            "text": "releases its trip information to the UAV at time r i and departs from its origin o i at time t i (\u2265 r i ) with a constant velocity v i to its destination d i . Further, we denote \u2206t i = t i \u2212 r i as the time gap between the start time t i and the release time r i of a truck ride V i . The UAV is not informed of each ride V i \u2208 V until its release time r i (when the truck's schedule is determined) and needs to determine whether to accept/catch or reject V i irrevocably at r i . The objective is to minimize the UAV's travel time to the destination A (or equivalent, the arrival time at A) by using online truck rides to save energy halfway. Key notations of this paper are given below in Table 1 . Table 1 . Notations in this paper.",
            "cite_spans": [],
            "ref_spans": [
                {
                    "start": 692,
                    "end": 699,
                    "text": "Table 1",
                    "ref_id": null
                },
                {
                    "start": 702,
                    "end": 709,
                    "text": "Table 1",
                    "ref_id": null
                }
            ],
            "section": "Problem Formulation"
        },
        {
            "text": "Physical",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Notations"
        },
        {
            "text": "The line segment representing the UAV's route. Vi = {V1, V2, ..., Vi} The sequence of the first i rides released, particularly, Vn = V. Vi = (ri, ti, oi, di, vi) The ith released ride, with its release time ri, departure time ti, start location oi, end location di and flying velocity vi. \u2206ti = ti \u2212 ri the time gap between the start time ti and the release time ri of a ride Vi. v = min",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Notations"
        },
        {
            "text": "the smallest possible velocity of a truck/ride.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Notations"
        },
        {
            "text": "The initial power that the UAV contains at time t0 = 0.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "P0"
        },
        {
            "text": "The power that the UAV contains at the start time of the ith ride taken by the UAV. \u03b2",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Pi"
        },
        {
            "text": "The UAV's power-consumption-rate for flying. \u03b1",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Pi"
        },
        {
            "text": "The UAV's recharging-rate, which satisfies \u03b1 < \u03b2; \u03be(U ) and \u03be(V |U | ) The arrival time (or the overall travel time) of the UAV to the target A, given the set U of rides and the last ride V |U | taken by the UAV, respectively, as formally defined later in (9) and (10) .",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Pi"
        },
        {
            "text": "Suppose that U = (V 1 , \u00b7 \u00b7 \u00b7 , V |U | ) is the sequence of rides to be taken by the UAV. Denote P i as the power that the UAV contains at the start time t i of the ith taken ride V i . Now, we formally formulate our model as the following mathematical problem (2)- (8) . where the objective (2) is to minimize the UAV's travel time from O to A, which is according to the following Proposition 1 where we discuss the physical meaning of the two terms of (2) and why we take the maximizing operation between the two. Constraints (3)-(4) indicate the power P i+1 that the UAV contains at the start time t i+1 of V i+1 by transferring from V i , which can be calculated by the following power transfer function in (1) .",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Pi"
        },
        {
            "text": "After leaving each truck V i , for i \u2208 {1, \u00b7 \u00b7 \u00b7 , |U | \u2212 1}, note that the UAV needs to have enough energy to fly to the following truck V i+1 's start location, which leads to the power compatibility constraint (5) as PTF(P i , V i , V i+1 ) \u2265 0; and it also needs to catch V i+1 's start time, which is reflected by the time compatibility constraints (6)- (7) . When the inequality in constraint (7) holds strictly, the UAV needs to stop at the roadside to wait for V i+1 's departure 5 after leaving V i . Constraint (8) indicates the total flying distance of the UAV.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Pi"
        },
        {
            "text": "For analytical tractability, the overall travel time of the UAV in objective (2) is converted to (9) in the following Proposition 1. Intuitively, when the UAV contains enough power to fly constantly to A after completing the last-taken ride V |U | , UAV's arrival time only corresponds to V |U | ; otherwise, UAV's arrival time to A only corresponds to the UAV's overall flying distance. Thus, we have Proposition 1. Given the sequence U = (V 1 , \u00b7 \u00b7 \u00b7 , V |U | ) of rides taken by the UAV, the UAV's arrival time \u03be(U ) at the target A is given by",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Pi"
        },
        {
            "text": "i.e., UAV s overall flying distance",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Pi"
        },
        {
            "text": "Competitive Ratio. Online algorithms are typically measured by the competitive ratio [9] . Given a sequence V of online trucks that can offer rides to the UAV, denote by \u03be ALG (V) and \u03be OPT (V) the UAV's arrival time to the destination by an online algorithm (ALG) and the optimal offline solution (OPT) where complete information of V is given beforehand, respectively. Then, the competitive ratio \u03c1 of the problem is defined as \u03c1 = max V \u03beALG(V) \u03beOPT(V) . When a number \u03b8 \u2265 1 satisfies \u03b8 \u2264 \u03c1 for all deterministic online algorithms, we say \u03b8 is a lower bound on the competitive ratio of the problem.",
            "cite_spans": [
                {
                    "start": 85,
                    "end": 88,
                    "text": "[9]",
                    "ref_id": "BIBREF8"
                }
            ],
            "ref_spans": [],
            "section": "Pi"
        },
        {
            "text": "We present an optimal solution, named OptimalHitching, for the offline problem in this section, in which the idea behind is to map the offline rides to nodes in a graph, and further the taking sequence in achieving the earliest arrival time is converted to a minimum-weight path in the constructed graph. In a graph-based solution, we find it is difficult to map the UAV's arrival time to edge weight in the graph directly by using \u03be(U ). This is because the arrival time \u03be(U ) corresponds to multi nodes/rides in the set U . Hence, we transform the objective (9) to the following (10), which only corresponds to the last ride V |U | taken by the UAV and the power P |U | that the UAV contains at the start time Before going into the details of our offline algorithm, we first give the following definitions together with some preliminary results. Definition 2 (Sequentially-taken). Given the set U \u2282 V of rides taken by the UAV, we say V i and V j in U are sequentially-taken if they are neighbors in the taking sequence U of rides. For example, when the UAV transfers from V i to V j in the sequence, we call V i and V j the prior and the following ride of the two sequentially-taken rides respectively.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Offline Problem And Algorithm Design"
        },
        {
            "text": "To verify whether two rides can be taken together by the UAV or not, we have Proposition 2, which is summarized from (2)-(8) and helps to determine whether two nodes/rides should be connected/compatible in the constructed graph.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Offline Problem And Algorithm Design"
        },
        {
            "text": "Proposition 2 (Compatible condition). Given two rides V j and V i with o j < o i and the power P j of the UAV at time t j , we say they are compatible only when the UAV is able to take both rides by transferring from V j to V i . Specifically, they satisfy the following compatible condition (11) .",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Offline Problem And Algorithm Design"
        },
        {
            "text": "The moment while the UAV is either landing-on or flying-off a truck, note that the time and space dimensions keep in consistency between the UAV and the truck. Given two sequentially-taken rides V i (the prior one) and V j , the UAV is supposed to land on V j right at time t j to catch the start of V j without reducing its remaining power at time t j . This is because the power transfer function in (1) is independent from when the UAV departs in transferring between V i and V j . Or, the UAV can stop-and-recharge at the end location d i of V i until it can fly constantly to the start o j of V j (right at t j ). This helps us to better understand the location of the UAV while transferring between two rides. Theorem 1 shows the taking sequence of the UAV in a given set of accepted rides.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Offline Problem And Algorithm Design"
        },
        {
            "text": "Theorem 1. Given the set U = {V 1 , \u00b7 \u00b7 \u00b7 , V |U | } of rides that are accepted by the optimal solution (OPT), OPT takes all rides in U following the increasing order of the rides' start locations, i.e. the smaller o i is, the earlier V i \u2208 U is taken.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Offline Problem And Algorithm Design"
        },
        {
            "text": "Offline Algorithm. At the high level, OptimalHitching first constructs a graph by screening unnecessary truck rides iteratively, which is on top of some characteristics of the problem. Afterwards, the optimal solution of the offline problem in this paper is converted to a minimum-weight shortest path of the graph. In the constructed graph, two virtual nodes V 0 and V n+1 are introduced to represent the origin O and the destination A respectively, while the other nodes in {V 1 , \u00b7 \u00b7 \u00b7 , V n } are constructed to represent the taking sequence of rides in V respectively due to Theorem 1. Each node of {V 1 , \u00b7 \u00b7 \u00b7 , V n } maintains a weight of the maximum power that the UAV could remain at the moment transferring to this node/ride, and connects to the previously constructed node from which the UAV transfers to the new node and remains that maximum power. In other words, node weights in the graph are only used for checking the power compatibility of rides taken by the UAV. Due to (10) , all edges of the graph are set as zero weight except for those connecting to V n+1 . In this way, the weight of a path connecting V 0 /O and V n+1 /A indicates the arrival time of the UAV at A taking those rides on the path. Below gives details of OptimalHitching.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Offline Problem And Algorithm Design"
        },
        {
            "text": "1. First, sort offline rides in V n , by increasing order of their start locations as (V 1 , V 2 , \u00b7 \u00b7 \u00b7 , V n ); create virtual nodes V 0 = (0, 0, 0, 0, 0) and V n+1 representing the origin O and the destination A respectively. 2. Then, construct a graph G = (N, E, w) with the weight function w applying to both nodes in N and edges in E, in an iterative way: (a) Include V 0 in N . Check in sequence (V 1 , V 2 , \u00b7 \u00b7 \u00b7 , V n ) the rides one by one.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Offline Problem And Algorithm Design"
        },
        {
            "text": "is compatible with at least one ride in N by (11) , denote \u03a6(V i ) as the set of rides in N that are compatible with V i : i. find in \u03a6(V i ) the node/ride, denoted by V * (i), to which the most power remains to the UAV on arrival at the start of V i by transferring from a ride in \u03a6(V i ); ii. include V i in N and set weight w(",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Offline Problem And Algorithm Design"
        },
        {
            "text": "that representing the UAV's arrival time to A with taking V j as the last ride.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Offline Problem And Algorithm Design"
        },
        {
            "text": "3. Finally, find in N the node V = arg min",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Offline Problem And Algorithm Design"
        },
        {
            "text": "w(V, V n+1 ) that has the minimum-weight edge connecting with V n+1 , and further find backwards (from those nodes joining in N earlier than V ) the node that connects with V . 6 Repeat this step backwards until node V 0 is reached. Output the found nodes in the sequence of their joining time in N .",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Offline Problem And Algorithm Design"
        },
        {
            "text": "Note that the running time of OptimalHitching is dominated by graph construction steps, which is in O(n 2 ). We have the following Theorem 2.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Offline Problem And Algorithm Design"
        },
        {
            "text": "Theorem 2. OptimalHitching runs in O(n 2 )-time and outputs the sequence of rides that are taken by an optimal offline solution.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Offline Problem And Algorithm Design"
        },
        {
            "text": "We present the lower bounds of the UAV's travel time by first releasing a hook ride, and then releasing rides that are not compatible to ALG by power and time constraint if ALG rejects/accepts the hook ride, since taking a ride helps to save more energy in an early stage but moves more slowly. For bound analysis, we further derive some notations as summarized in Table 2 .",
            "cite_spans": [],
            "ref_spans": [
                {
                    "start": 365,
                    "end": 372,
                    "text": "Table 2",
                    "ref_id": null
                }
            ],
            "section": "Lower Bounds on Competitive Ratios"
        },
        {
            "text": "Notice that the UAV does not need a ride V i with \u2206t i \u2265 T ra + T f 0 . This is because the moment when V i starts, the UAV already contains at least (\u2206t i \u2212 T f 0 )\u03b1 of power by stop-and-recharging, which enables the UAV to fly constantly to A. Thus, we have the following proposition 3. Then, Lemma 1 is given to better figure out the minimum travel time that an OPT could achieve, based on which a lower bound is presented in Theorem 3 as a benchmark for further online algorithm design. ",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Lower Bounds on Competitive Ratios"
        },
        {
            "text": "We propose a myopic algorithm MyopicHitching and a near-optimal algorithm \u2206t-Adaptive respectively, both of which inherit notations from Table 2 . , 0} the least amount of length that the UAV needs to save for avoiding more time in stop-and-recharge afterwards, given that the UAV already stop-and-recharges for a total amount T of time.",
            "cite_spans": [],
            "ref_spans": [
                {
                    "start": 137,
                    "end": 144,
                    "text": "Table 2",
                    "ref_id": null
                }
            ],
            "section": "Online Algorithms with Competitive Analysis"
        },
        {
            "text": "We first present the MyopicHitching algorithm under fixed \u2206t. By some small changes in the following accepting conditions (i-ii), one can easily extend it to the flexible \u2206t. MyopicHitching follows the route by default to fly forward constantly until the first time it runs out of power. Afterwards, the UAV stopsand-recharge until containing enough power to fly constantly to the target A. The by-default action possibly changes only when a ride is accepted. Denote P (V ) as the power that the UAV remains at the start time of an accepted ride V in the current solution, and U as the set of rides accepted by MyopicHitching.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "MyopicHitching Algorithm"
        },
        {
            "text": "A new ride V i \u2208 V is accepted only when V i meets the following two conditions together, i.e., l rc \u00b7 l aa = 1. Accordingly, update both P (V i ) and power attributes of those rides in U that depart after V i by the power-transfer-function in (1) ",
            "cite_spans": [],
            "ref_spans": [],
            "section": "MyopicHitching Algorithm"
        },
        {
            "text": "ii) arrival-ahead : the UAV will reduce its overall travel time when taking the new ride, i.e., the following indicator which is due to (9) should be equal to 1.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "MyopicHitching Algorithm"
        },
        {
            "text": "To take each accepted ride in U , MyopicHitching guides the UAV to reach the origin of the ride right at its start time. Whenever the UAV contains enough power to fly constantly towards the target A, i.e., (13) is satisfied, it stops accepting new ride and flies directly to A after taking the last-accepted ride.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "MyopicHitching Algorithm"
        },
        {
            "text": "indicates the power remaining to the UAV on completing V |U | , while u time indicates the real time in the execution.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "MyopicHitching Algorithm"
        },
        {
            "text": "Observation 1 For the problem with fixed \u2206t, the earlier a ride is released, the earlier the ride departs. 7 Under fixed \u2206t, online algorithm must accept ride that depart after previously accepted rides due to Observation 1. But this is not the case under flexible \u2206t, a newly accepted ride can depart between two rides in U , and the potential V right = arg min",
            "cite_spans": [],
            "ref_spans": [],
            "section": "MyopicHitching Algorithm"
        },
        {
            "text": "Lemma 2. For the problem with fixed \u2206t, MyopicHitching always takes rides in increasing order of their start locations.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "MyopicHitching Algorithm"
        },
        {
            "text": "Notice in the following example that MyopicHitching has a defect which can be exploited by an adversary leading to a very bad competitive ratio: suppose",
            "cite_spans": [],
            "ref_spans": [],
            "section": "MyopicHitching Algorithm"
        },
        {
            "text": "is the first released ride with a small \u2206t. At the release time 1 2v0 of V 1 , the UAV is at location 1 2 and contains power P = P 0 +(\u03b1\u2212 \u03b2) 1 2v0 . We note that the arrival-ahead condition (ii) implies a ride released at an early stage could be accepted when the ride could help the UAV to save more energy. Since the UAV can save a small amount 2\u03b5 v0 \u03b2 of power by taking V 1 , V 1 is accepted by accepting conditions (i)-(ii). Notice that MyopicHitching actually",
            "cite_spans": [],
            "ref_spans": [],
            "section": "MyopicHitching Algorithm"
        },
        {
            "text": "of waiting time. The defect appears when \u2206t < t wait since the adversary could further releases rides making MyopicHitching violate constraints in (11) . When \u03b5 \u2192 0, we get the following Theorem 4.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "MyopicHitching Algorithm"
        },
        {
            "text": "Theorem 4. For the problem with fixed \u2206t, MyopicHitching achieves a competitive ratio no worse than",
            "cite_spans": [],
            "ref_spans": [],
            "section": "MyopicHitching Algorithm"
        },
        {
            "text": "Particularly, in the scenario where the UAV already exhausts its power (i.e., P 0 = 0) at the very beginning, MyopicHitching achieves a competitive ratio no worse than a a\u2212 Lmin .",
            "cite_spans": [],
            "ref_spans": [],
            "section": "MyopicHitching Algorithm"
        },
        {
            "text": "We fix the defect of MyopicHitching by leveraging adaptability of \u2206t in My-opicHitching and present \u2206t-Adaptive algorithm by including the following conditional-start condition (i.e., 1 cs = 1) in the ride-accepting conditions. Specifically, \u2206t-Adaptive keeps the Input, Lines 1-4, 6-15 of the pseudocode in Appendix H of MyopicHitching the same, but replaces the if condition 1 rc \u00b7 1 aa ==1 in Line 5 by 1 rc \u00b7 1 aa \u00b7 1 cs ==1.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "\u2206t-Adaptive Algorithm"
        },
        {
            "text": "iii): conditional-start condition: the following indicator l cs = 1.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "\u2206t-Adaptive Algorithm"
        },
        {
            "text": "Theorem 5. For the problem with fixed \u2206t, \u2206t-Adaptive algorithm achieves a competitive ratio no worse than",
            "cite_spans": [],
            "ref_spans": [],
            "section": "\u2206t-Adaptive Algorithm"
        },
        {
            "text": "Recall that rides with \u2206t \u2265 T ra + T f 0 are not worth taking (see Lemma 3). By Theorem 5, we know \u2206t-Adaptive prefers larger \u2206t since its competitive ratio decreases as \u2206 t increases. Comparing (15) and (14), we find that \u2206t-Adaptive algorithm outperforms MyopicHitching especially when \u2206t is large, this is because \u2206t-Adaptive guarantees that OPT has to cost some waiting time of at least \u2206t 2 in the case when all released truck rides are not compatible to \u2206t-Adaptive. What's more, \u2206t-Adaptive algorithm actually achieves nearoptimal performance compared to the best possible online algorithm since the latter can save at most one ride while the OPT has to pay a waiting time of \u2206t. Please refer to the figure in the appendix G for some comparison between MyopicHitching and \u2206t-Adaptive.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "\u2206t-Adaptive Algorithm"
        },
        {
            "text": "In this paper, we give the first theoretical work on the problem of online ridehitching in UAV travelling. By mapping truck trips to nodes in a graph in an iterative way, we give a shortest-path-like solution for the offline version of this problem where truck trips are all known in advance. As a benchmark, we present lower bounds on the competitive ratio of the problem, respectively, for different settings. Then, we show that a greedy algorithm which accepts as many rides as possible has a defect. To fix the defect, we propose the \u2206t-Adaptive algorithm, achieving near-optimal performance in terms of the competitive ratio.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Concluding Remarks"
        },
        {
            "text": "Proof. Given the ride V |U | = (r |U | , t |U | , o |U | , d |U | ) that is finally taken by the UAV among those taken rides in U , the overall flying distance of the UAV, denoted by dist f , is",
            "cite_spans": [],
            "ref_spans": [],
            "section": "A Proof of Proposition 1"
        },
        {
            "text": "We also note that the UAV flies off V |U | at time t |U | +",
            "cite_spans": [],
            "ref_spans": [],
            "section": "A Proof of Proposition 1"
        },
        {
            "text": ". Denote P r as the power remains to the UAV at time t |U | +",
            "cite_spans": [],
            "ref_spans": [],
            "section": "A Proof of Proposition 1"
        },
        {
            "text": ", we discuss two cases.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "A Proof of Proposition 1"
        },
        {
            "text": ". The UAV contains enough power to fly constantly from d |U | (the fly-off point of V |U | ) to the target A. Then, the arrival time \u03be(U )",
            "cite_spans": [],
            "ref_spans": [],
            "section": "A Proof of Proposition 1"
        },
        {
            "text": "\u03b1 in this case, since the UAV still contains non-negative power on arrival at A at time \u03be(U ), i.e.,",
            "cite_spans": [],
            "ref_spans": [],
            "section": "A Proof of Proposition 1"
        },
        {
            "text": "The UAV does not have enough power to fly constantly from d |U | to the target A. To achieve the earliest possible arrival time to A, the UAV needs to stop-and-recharge for an amount of power at least a\u2212d |U | v0 (\u03b2 \u2212 \u03b1) \u2212 P r (and runs out of its power on arrival at A). This implies",
            "cite_spans": [],
            "ref_spans": [],
            "section": "A Proof of Proposition 1"
        },
        {
            "text": "as otherwise it contradicts with the base of this case.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "A Proof of Proposition 1"
        },
        {
            "text": "Proof. Clearly, all rides accepted by OPT are finally taken. We just need to show that any two adjacent rides in U are actually sequentially-taken with the same order by OPT. For the sake of contradiction, suppose there are two adjacent rides V i (the prior one) and V j that are not sequentially-taken, i.e., the UAV takes V j (with landing-on location o j ) prior to V i (with the landing-on location o i ). Notice that, the UAV can save (\u03b2 \u2212\u03b1) dj \u2212oi v0 more amount of energy by taking V i first since o i < o j , which either contradicts with OPT (in the case that the saved amount of energy leads to earlier arrival time to A) or generates another optimal solution (in the case that this saved amount of energy does not induce earlier arrival time to A), which is because the land-on point (which is the start location of the ride) of each taken ride is unique. Therefore, any two adjacent rides in OPT is sequentially-taken.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "B Proof of Theorem 1"
        },
        {
            "text": "Proof. Suppose, w.l.o.g., that the UAV takes rides in {V 1 , \u00b7 \u00b7 \u00b7 , V m } to assist itself to reach the target A without stopping halfway. Denote L as the overall length that the UAV saves by taking rides. As the UAV does not stop halfway, the final arrival time of the UAV at the destination A, denoted by t final , consists of two parts, the time spent on rides (denoted by t r ) and the flying time a\u2212L v0 . Denote L 1 , \u00b7 \u00b7 \u00b7 , L m as the accumulative length in L by rides V 1 , \u00b7 \u00b7 \u00b7 , V m , respectively. Then, L = i=m i=1 L i and t r = L1 v1 + \u00b7 \u00b7 \u00b7 + Lm vm . Further,",
            "cite_spans": [],
            "ref_spans": [],
            "section": "C Proof of Lemma 1"
        },
        {
            "text": "in which the inequality holds by v = min i\u2208{1,2,\u00b7\u00b7\u00b7 ,m} v i . The moment when UAV just reaches the target A, note that the power of the UAV remains non-negative. Hence,",
            "cite_spans": [],
            "ref_spans": [],
            "section": "C Proof of Lemma 1"
        },
        {
            "text": "Substituting (17) in (18), we have",
            "cite_spans": [],
            "ref_spans": [],
            "section": "C Proof of Lemma 1"
        },
        {
            "text": "Proof. Suppose all rides move with constant velocity v and are of unit-length. By the basic settings P 0 < (\u03b2 \u2212 \u03b1) a v0 and v 0 > v of this paper, we have L min > 0 and further L min \u2265 1. Define \u03c4 = L min and \u03c2 = l f . Suppose the length a of the trip OA is larger than l f + \u03c4 . Now, we consider the first released ride V 1 = (0, T f 0 , l f , l f +1, v) which can only be taken when the UAV departs from t 0 and consumes its entire power on arrival at the start location l f , i.e., the orange rectangle/ride in Fig. 1 . Case 1. ALG accepts V 1 . We discuss two sub-cases. Case 1.1. \u03c4 \u2265 \u03c2 + 2. After a short time duration \u03b5 (\u2265 1 v0 ), the adversary further releases another \u03c2 head-to-tail rides within [0, L min ]: for i \u2208 {2, \u00b7 \u00b7 \u00b7 , \u03c2 + 1}",
            "cite_spans": [],
            "ref_spans": [
                {
                    "start": 514,
                    "end": 520,
                    "text": "Fig. 1",
                    "ref_id": "FIGREF1"
                }
            ],
            "section": "C Proof of Lemma 1"
        },
        {
            "text": "Notice that, at time \u03b5 when V 2 departs, ALG already flies over the location 1 v0 v 0 = 1, implying that ALG does not need to accept V 2 . In other words, ALG does not fly backward until reaching the origin of V 1 . Note that the distance between the end location \u03c2 of ride V \u03c2+1 with the location L min is smaller than 1, which takes T f 0 \u2212 \u03c2 v0 of time for flying. Further at time \u03b5",
            "cite_spans": [],
            "ref_spans": [],
            "section": "C Proof of Lemma 1"
        },
        {
            "text": "(denoted by t 1 ), when OPT just flies-off V \u03c2+2 , the adversary releases V \u03c2+2 = (t 1 , t 1 , l f , l f + 1, v). Clearly, the above \u03c2 + 1 rides {V 2 , \u00b7 \u00b7 \u00b7 , V \u03c2+2 } cannot be taken by ALG since they are not compatible with V 1 . However, OPT can successfully take all rides in {V 2 , \u00b7 \u00b7 \u00b7 , V \u03c2+2 } without violating the compatible constraints in (11) , see the blue rectangles/rides in Fig. 1 . At time t 1 + 1 v , when completing taking the rides and flying-off V \u03c2+2 , OPT is located at (l f + 1) and contains power of Fig. 1 . Illustration example, in which the left-side, right-side, bottom-side and top-side of a rectangle represent the start location, end location, start time, and the end time of the ride, respectively. In this case, ALG accepts the hook ride (which is the isolated orange rectangle), then, the adversary releases rides before the hook ride (not compatible with the hook ride) making ALG stores less energy than OPT does after the hook ride. Further, more rides can be released that are not compatible in ALG due to constraint (11) . Fig. 2) , then, the adversary only releases rides after the hook ride making ALG not able to take as violate constraint (11) in power.",
            "cite_spans": [],
            "ref_spans": [
                {
                    "start": 391,
                    "end": 397,
                    "text": "Fig. 1",
                    "ref_id": "FIGREF1"
                },
                {
                    "start": 526,
                    "end": 532,
                    "text": "Fig. 1",
                    "ref_id": "FIGREF1"
                },
                {
                    "start": 1064,
                    "end": 1071,
                    "text": "Fig. 2)",
                    "ref_id": "FIGREF3"
                }
            ],
            "section": "C Proof of Lemma 1"
        },
        {
            "text": "Proof. Our discussion centers around the ride, denoted by V = (r, r+\u2206t, o, d, v), which is the first ride accepted by either OPT or ALG but not both. By Observation 1, V is also the ride that is firstly taken by either OPT or ALG. Denote l(r) as the real-time location of ALG. (denoted by T ALG ). Later, one has to stop-and-recharge some time more than T ALG since r increases. Suppose OPT totally accepts x (\u2265 2) rides, note that OPT stops-and-recharge at least \u2206t 2 for each ride after the first ride since \u03b2 \u2265 2\u03b1. Hence, we get if \u03a6(i) == \u2205 then 6:",
            "cite_spans": [],
            "ref_spans": [],
            "section": "E Omitted Proof of Theorem 5"
        },
        {
            "text": "i + +; 7: The UAV flies to oi of each Vi \u2208 U right at time ti; 12: end while 13: if condition (13) is satisfied then 14:",
            "cite_spans": [],
            "ref_spans": [],
            "section": "E Omitted Proof of Theorem 5"
        },
        {
            "text": "Ride-accepting procedure stops, UAV flies towards A directly after taking rides in U . 15: end if",
            "cite_spans": [],
            "ref_spans": [],
            "section": "E Omitted Proof of Theorem 5"
        }
    ],
    "bib_entries": {
        "BIBREF0": {
            "ref_id": "b0",
            "title": "Package delivery by means of an automated multi-copter UAS/UAV dispatched from a conventional delivery vehicle",
            "authors": [
                {
                    "first": "E",
                    "middle": [
                        "T"
                    ],
                    "last": "Bokeno",
                    "suffix": ""
                },
                {
                    "first": "T",
                    "middle": [
                        "M"
                    ],
                    "last": "Bort",
                    "suffix": ""
                },
                {
                    "first": "S",
                    "middle": [
                        "S"
                    ],
                    "last": "Burns",
                    "suffix": ""
                },
                {
                    "first": "M",
                    "middle": [],
                    "last": "Rucidlo",
                    "suffix": ""
                },
                {
                    "first": "W",
                    "middle": [],
                    "last": "Wei",
                    "suffix": ""
                },
                {
                    "first": "D",
                    "middle": [
                        "L"
                    ],
                    "last": "Wires",
                    "suffix": ""
                }
            ],
            "year": 2018,
            "venue": "U.S. Patent",
            "volume": "915",
            "issn": "9",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF1": {
            "ref_id": "b1",
            "title": "Path planning for solarpowered UAV in urban environment",
            "authors": [
                {
                    "first": "J",
                    "middle": [],
                    "last": "Wu",
                    "suffix": ""
                },
                {
                    "first": "H",
                    "middle": [],
                    "last": "Wang",
                    "suffix": ""
                },
                {
                    "first": "N",
                    "middle": [],
                    "last": "Li",
                    "suffix": ""
                },
                {
                    "first": "P",
                    "middle": [],
                    "last": "Yao",
                    "suffix": ""
                },
                {
                    "first": "Y",
                    "middle": [],
                    "last": "Huang",
                    "suffix": ""
                },
                {
                    "first": "H",
                    "middle": [],
                    "last": "Yang",
                    "suffix": ""
                }
            ],
            "year": 2018,
            "venue": "Neurocomputing",
            "volume": "275",
            "issn": "",
            "pages": "2055--2065",
            "other_ids": {}
        },
        "BIBREF3": {
            "ref_id": "b3",
            "title": "Optimization for drone and drone-truck combined operations: A review of the state of the art and future directions",
            "authors": [
                {
                    "first": "S",
                    "middle": [
                        "H"
                    ],
                    "last": "Chung",
                    "suffix": ""
                },
                {
                    "first": "B",
                    "middle": [],
                    "last": "Sah",
                    "suffix": ""
                },
                {
                    "first": "J",
                    "middle": [],
                    "last": "Lee",
                    "suffix": ""
                }
            ],
            "year": 2020,
            "venue": "Computers & Operations Research",
            "volume": "123",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF4": {
            "ref_id": "b4",
            "title": "To fill or not to fill: The gas station problem",
            "authors": [
                {
                    "first": "S",
                    "middle": [],
                    "last": "Khuller",
                    "suffix": ""
                },
                {
                    "first": "A",
                    "middle": [],
                    "last": "Malekian",
                    "suffix": ""
                },
                {
                    "first": "J",
                    "middle": [],
                    "last": "Mestre",
                    "suffix": ""
                }
            ],
            "year": 2011,
            "venue": "ACM Transactions on Algorithms",
            "volume": "7",
            "issn": "3",
            "pages": "1--16",
            "other_ids": {}
        },
        "BIBREF5": {
            "ref_id": "b5",
            "title": "Looking before crossing: An optimal algorithm to minimize UAV energy by speed scheduling with a practical flight energy model",
            "authors": [
                {
                    "first": "F",
                    "middle": [],
                    "last": "Shan",
                    "suffix": ""
                },
                {
                    "first": "J",
                    "middle": [],
                    "last": "Luo",
                    "suffix": ""
                },
                {
                    "first": "R",
                    "middle": [],
                    "last": "Xiong",
                    "suffix": ""
                },
                {
                    "first": "W",
                    "middle": [],
                    "last": "Wu",
                    "suffix": ""
                },
                {
                    "first": "J",
                    "middle": [],
                    "last": "Li",
                    "suffix": ""
                }
            ],
            "year": 2020,
            "venue": "IEEE INFOCOM 2020-IEEE Conference on Computer Communications",
            "volume": "",
            "issn": "",
            "pages": "1758--1767",
            "other_ids": {}
        },
        "BIBREF6": {
            "ref_id": "b6",
            "title": "Energy-aware coverage path planning of UAVs",
            "authors": [
                {
                    "first": "Di",
                    "middle": [],
                    "last": "Franco",
                    "suffix": ""
                },
                {
                    "first": "C",
                    "middle": [],
                    "last": "Buttazzo",
                    "suffix": ""
                },
                {
                    "first": "G",
                    "middle": [],
                    "last": "",
                    "suffix": ""
                }
            ],
            "year": 2015,
            "venue": "2015 IEEE international conference on autonomous robot systems and competitions",
            "volume": "",
            "issn": "",
            "pages": "111--117",
            "other_ids": {}
        },
        "BIBREF7": {
            "ref_id": "b7",
            "title": "A Flight Time Approximation Model for Unmanned Aerial Vehicles: Estimating the Effects of Path Variations and Wind. Operations Research for Unmanned Systems",
            "authors": [
                {
                    "first": "M",
                    "middle": [
                        "J"
                    ],
                    "last": "Henchey",
                    "suffix": ""
                },
                {
                    "first": "R",
                    "middle": [],
                    "last": "Batta",
                    "suffix": ""
                },
                {
                    "first": "M",
                    "middle": [],
                    "last": "Karwan",
                    "suffix": ""
                },
                {
                    "first": "A",
                    "middle": [],
                    "last": "Crassidis",
                    "suffix": ""
                }
            ],
            "year": 2016,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "95--117",
            "other_ids": {}
        },
        "BIBREF8": {
            "ref_id": "b8",
            "title": "Online computation and competitive analysis",
            "authors": [
                {
                    "first": "A",
                    "middle": [],
                    "last": "Borodin",
                    "suffix": ""
                },
                {
                    "first": "R",
                    "middle": [],
                    "last": "El-Yaniv",
                    "suffix": ""
                }
            ],
            "year": 2005,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF9": {
            "ref_id": "b9",
            "title": "Adaptive deployment for UAV-aided communication networks",
            "authors": [
                {
                    "first": "Z",
                    "middle": [],
                    "last": "Wang",
                    "suffix": ""
                },
                {
                    "first": "L",
                    "middle": [],
                    "last": "Duan",
                    "suffix": ""
                },
                {
                    "first": "R",
                    "middle": [],
                    "last": "Zhang",
                    "suffix": ""
                }
            ],
            "year": 2019,
            "venue": "IEEE transactions on wireless communications",
            "volume": "18",
            "issn": "9",
            "pages": "4531--4543",
            "other_ids": {}
        },
        "BIBREF10": {
            "ref_id": "b10",
            "title": "News from the online traveling repairman",
            "authors": [
                {
                    "first": "S",
                    "middle": [
                        "O"
                    ],
                    "last": "Krumke",
                    "suffix": ""
                },
                {
                    "first": "W",
                    "middle": [
                        "E"
                    ],
                    "last": "De Paepe",
                    "suffix": ""
                },
                {
                    "first": "D",
                    "middle": [],
                    "last": "Poensgen",
                    "suffix": ""
                },
                {
                    "first": "L",
                    "middle": [],
                    "last": "Stougie",
                    "suffix": ""
                }
            ],
            "year": 2003,
            "venue": "Theoretical Computer Science",
            "volume": "295",
            "issn": "1-3",
            "pages": "279--294",
            "other_ids": {}
        },
        "BIBREF11": {
            "ref_id": "b11",
            "title": "The k-server problem",
            "authors": [
                {
                    "first": "E",
                    "middle": [],
                    "last": "Koutsoupias",
                    "suffix": ""
                }
            ],
            "year": 2009,
            "venue": "Computer Science Review",
            "volume": "3",
            "issn": "2",
            "pages": "105--118",
            "other_ids": {}
        },
        "BIBREF12": {
            "ref_id": "b12",
            "title": "On the k-server conjecture",
            "authors": [
                {
                    "first": "E",
                    "middle": [],
                    "last": "Koutsoupias",
                    "suffix": ""
                },
                {
                    "first": "C",
                    "middle": [
                        "H"
                    ],
                    "last": "Papadimitriou",
                    "suffix": ""
                }
            ],
            "year": 1995,
            "venue": "Journal of the ACM (JACM)",
            "volume": "42",
            "issn": "5",
            "pages": "971--983",
            "other_ids": {}
        },
        "BIBREF13": {
            "ref_id": "b13",
            "title": "An Improved Online Algorithm for the Traveling Repairperson Problem on a Line",
            "authors": [
                {
                    "first": "M",
                    "middle": [],
                    "last": "Bienkowski",
                    "suffix": ""
                },
                {
                    "first": "H",
                    "middle": [
                        "H"
                    ],
                    "last": "Liu",
                    "suffix": ""
                }
            ],
            "year": 2019,
            "venue": "44th International Symposium on Mathematical Foundations of Computer Science. Schloss Dagstuhl-Leibniz-Zentrum fuer Informatik",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF14": {
            "ref_id": "b14",
            "title": "The online k-taxi problem",
            "authors": [
                {
                    "first": "C",
                    "middle": [],
                    "last": "Coester",
                    "suffix": ""
                },
                {
                    "first": "E",
                    "middle": [],
                    "last": "Koutsoupias",
                    "suffix": ""
                }
            ],
            "year": 2019,
            "venue": "Proceedings of the 51st Annual ACM SIGACT Symposium on Theory of Computing",
            "volume": "",
            "issn": "",
            "pages": "1136--1147",
            "other_ids": {}
        },
        "BIBREF15": {
            "ref_id": "b15",
            "title": "Online Maximum k-Interval Coverage Problem",
            "authors": [
                {
                    "first": "S",
                    "middle": [],
                    "last": "Li",
                    "suffix": ""
                },
                {
                    "first": "M",
                    "middle": [],
                    "last": "Li",
                    "suffix": ""
                },
                {
                    "first": "L",
                    "middle": [],
                    "last": "Duan",
                    "suffix": ""
                },
                {
                    "first": "V",
                    "middle": [
                        "C"
                    ],
                    "last": "Lee",
                    "suffix": ""
                }
            ],
            "year": 2020,
            "venue": "International Conference on Combinatorial Optimization and Applications",
            "volume": "",
            "issn": "",
            "pages": "455--470",
            "other_ids": {}
        },
        "BIBREF17": {
            "ref_id": "b17",
            "title": "An exact single-agent task selection algorithm for the crowdsourced logistics",
            "authors": [
                {
                    "first": "C",
                    "middle": [
                        "K"
                    ],
                    "last": "Han",
                    "suffix": ""
                },
                {
                    "first": "S",
                    "middle": [
                        "F"
                    ],
                    "last": "Cheng",
                    "suffix": ""
                }
            ],
            "year": 2020,
            "venue": "IJCAI",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        }
    },
    "ref_entries": {
        "FIGREF1": {
            "text": "Adjacent). Given the set U \u2282 V of rides accepted by the UAV, two trips V i and V j in U are called adjacent rides if and only if V j \u2208 {arg min Vx\u2208U,ox>oi {o x \u2212 o i }, arg max Vx\u2208U,ox<oi {o x \u2212 o i }}. Specifically, V j is regarded as the prior one (resp. the following one) of the two if o j < o i (resp. o j > o i ).",
            "latex": null,
            "type": "figure"
        },
        "FIGREF2": {
            "text": "\u2206t i = t i \u2212 r i of each ride V i \u2208 V ranges in [0, T ra + T f 0 ].Lemma 1. The UAV needs to save an overall distance of at least L min = (a\u03b2\u2212a\u03b1\u2212P0v0)v v0\u03b1\u2212v\u03b1+v\u03b2 by taking rides, in order to avoid stop-and-recharge halfway. Theorem 3. For the problem with flexible \u2206t i \u2208 [0, T ra + T f 0 ], no online deterministic algorithm can achieve a competitive ratio better than \u03be(\u2205)",
            "latex": null,
            "type": "figure"
        },
        "FIGREF3": {
            "text": "Derived duration for recharging the amount of power to fly a unit distance constantly. Tmu := \u03b2 \u03b1\u00b7v 0 the time duration for moving a unit distance in the case that the UAV contains no power at the beginning. T f 0 := P 0 \u03b2\u2212\u03b1 the time duration that the UAV flies constantly from time t0 on. l f := P 0 v 0 \u03b2\u2212\u03b1 the furthest location to which the UAV can reach by flying constantly from time t0 on, note that l f = T f 0 \u00b7 v0. \u03be(\u2205) arrival time of the UAV to A when no ride is taken, by (10) with V |U | = (0, 0, 0, 0, v) and P |U | = P0. Tra := time duration of the UAV to stopand-recharge, to reach the target A without taking rides, Tra = \u03be(\u2205) \u2212 a v 0 . Lmin := (a\u03b2\u2212a\u03b1\u2212P 0 v 0 )v v 0 \u03b1\u2212v\u03b1+v\u03b2 the minimum length to be saved by rides (with velocity v) to reach the target A without stop-and-recharge, by Lemma 1. Len(T ) := max{ (a\u03b2\u2212a\u03b1\u2212P 0 v 0 \u2212v 0 T \u03b1)v v 0 \u03b1\u2212v\u03b1+v\u03b2",
            "latex": null,
            "type": "figure"
        },
        "FIGREF4": {
            "text": ": i) ride-compatible 7 : the new ride should meet(11) with V left = arg min {Vj \u2208U |oj <oi} {o i \u2212 o j } whichis the only ride in U that is sequentially-taken with V i , i.e., the following indicator should be equal to 1.",
            "latex": null,
            "type": "figure"
        },
        "FIGREF5": {
            "text": "Illustration of rides configurations in Case 2. The ALG rejects the hook ride (the left-most one in orange of",
            "latex": null,
            "type": "figure"
        },
        "FIGREF6": {
            "text": "Case 1.1. V is accepted by ALG. This implies \u03be ALG < \u03be(\u2205) as otherwise V is rejected by the arrival-ahead condition 1 aa , and o \u2265 \u2206tv0 2 +l(r) \u2265 \u2206tv02 > l f . Hence, ALG stops-and-recharge some time of \u2206t \u2212",
            "latex": null,
            "type": "figure"
        },
        "FIGREF7": {
            "text": "Case 1.2. V is accepted by OPT. This infers that the OPT has to stop-andrecharge for some time at least \u2206t 2",
            "latex": null,
            "type": "figure"
        },
        "FIGREF8": {
            "text": "A set Vn of rides, \u03b2, \u03b1, vo, P0, a; Output: A set U of accepted rides;1: Initialization. V0 \u2190 (0, 0, 0, 0, 0), i \u2190 1, N \u2190 {V0}, E \u2190 \u2205, w(V0) \u2190 P0;2: Sort rides in Vn \u2229 {V0} in increasing order of their origins, as (V0, V1, V2, \u00b7 \u00b7 \u00b7 , Vn); 3: for i \u2264 n do 4:\u03a6(i) \u2190 {Vj \u2208 N |Vj and Vi are compatible in (11)}; 5:",
            "latex": null,
            "type": "figure"
        },
        "FIGREF9": {
            "text": "\u2190 N \u222a {V * (i)}, E \u2190 E \u222a {(V * (i), Vi)}, w(Vi) \u2190 PTF(w(V * (i)), V * (i), Vi); w(V * (i), Vi) \u2190 0, i + +; 10: end if 11: end for 12: N \u2190 N \u222a {Vn+1}; 13: for Vj \u2208 N \u2212 {Vn+1} do 14: E \u2190 E \u222a {(Vj, Vn+1)}, w(Vj, Vn+1) \u2190 \u03be(Vj) by (10); 15: end for 16: Output the nodes on the minimum-weight path connecting V0 and Vn+1 in G = (N, E, w). Performance comparison in algorithms with input parameters normalized as a=100 (km), V0=100 (km/h), V = 60 (km/h), \u03b2 \u03b1 = 6, P0 = 20. Algorithm 2 MyopicHitching Input: Vn = {V1, \u00b7 \u00b7 \u00b7 , Vn}, \u03b2, \u03b1, vo, P0, OA = a; Output: U \u2286 Vn; 1: Initialization. U \u2190 \u2205, utime \u2190 t0; {%utime: real time} 2: Route by default when no ride to be taken. Before the first time using up power, UAV flies over utime with velocity v0. Afterwards, the UAV does not move until it contains enough power to fly constantly to the target A. {% the following loop shows ride-accepting procedure} 3: while utime == ri do 4: V left \u2190 arg min {V j \u2208U |o j <o i } {oi \u2212 oj}; 5: if 1rc \u00b7 1aa == 1 then 6: U \u2190 U \u222a {Vi} {% accept Vi} 7: P (Vi) = PTF(P left , V left , Vi); 8: end if 9: end while {% the following loop shows the ride-taking procedure} 10: while U = \u2205 do 11:",
            "latex": null,
            "type": "figure"
        }
    },
    "back_matter": [
        {
            "text": "Acknowledgement. We thank the anonymous referees for their helpful feedback. Part of this work was done while Songhua LI was visiting the Singapore University of Technology and Design. Minming Li is also from City University of Hong Kong Shenzhen Research Institute, Shenzhen, P.R. China. The work described in this paper was sponsored by Project 11771365 supported by NSFC.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "acknowledgement"
        },
        {
            "text": "Meanwhile at time t 1 + 1 v , ALG is also located at (l f + 1) but contains power of just P ALG = (\u03b5 + \u03c2+1 v \u2212 \u03c2 v0 )\u03b1, since ALG just runs out of its power at time T f 0 on arrival at l f . Right at time t 1 + 1 v , the adversary further releases another \u03c4 \u2212 \u03c2 \u2212 2 head-to-tail rides, i.e.,Note that OPT can just catch V \u03c2+3 by flying from l f + 1 at the time t 1 + 1 v when UAV just takes off from V \u03c2+2 with its entire power. This implies that the OPT can take all rides in {V \u03c2+4 , \u00b7 \u00b7 \u00b7 , V \u03c4 +1 } successively (see those blue rectangles/rides in Fig. 1 ). Hence, OPT can reach the target A without stopand-recharge halfway by riding {V 2 , \u00b7 \u00b7 \u00b7 , V \u03c4 +1 } (see Lemma 1) . As OPT only needs to stop-to-recharge some time of \u03b5 from the very beginning to wait for the departure of V 2 , the arrival time of OPT to the target A is \u03be OPT = \u03b5 + \u03c4 v + a\u2212\u03c4 v0 , which includes the time \u03c4 v spent on rides and the time a\u2212\u03c4 v0 while flying. In contrast, the ALG cannot even catch up V \u03c2+3 as the power constraint is violated by P ALG < P OPT , and further ALG cannot take rides in {V \u03c2+3 , \u00b7 \u00b7 \u00b7 , V \u03c4 }. In other words, ALG can only fly by itself towards A after taking V 1 . Hence, the arrival time of ALG is \u03be ALG \u2265 T f 0 + (a \u2212 1 \u2212 l f ) \u00b7 \u03b2 \u03b1v0 . When \u03b5 \u2192 1 v0 , we getCase 1.2. \u03c4 \u2264 \u03c2 + 1. After time \u03b5, the adversary releases \u03c4 rides sequentially, including head-to-tail rides. OPT can take rides in {V 2 , \u00b7 \u00b7 \u00b7 , V \u03c4 +1 } without violating compatible constraint. By a similar analysis as in subcase 1.1, we have a lower bound of this subcase as \u03c1 = \u03beALG \u03beOPT \u2265Case 2. ALG rejects V 1 at t 0 . Note that the earliest arrival time (say t a ) of ALG to l f + 1 is T f 0 + \u03b2 \u03b1v0 , which is derived by P 0 + t a \u03b1 \u2212 \u03b2(T f 0 + 1 v0 ) \u2265 0. This implies ALG should contain non-negative power at t a . Later, the adversary only releases rides with start locations larger than l f + 1 and start time earlier than time T f 0 + \u03b2 \u03b1v0 , which are compatible in OPT but not in ALG. For example, rides in Fig. 2 . By a similar idea in Case 1, one can derive a lower bound of this case as \u03c1 = \u03beALG \u03beOPT \u2265Therefore, the lower bound could be got as summarized in (12) .",
            "cite_spans": [
                {
                    "start": 668,
                    "end": 676,
                    "text": "Lemma 1)",
                    "ref_id": null
                }
            ],
            "ref_spans": [
                {
                    "start": 552,
                    "end": 558,
                    "text": "Fig. 1",
                    "ref_id": null
                },
                {
                    "start": 1995,
                    "end": 2001,
                    "text": "Fig. 2",
                    "ref_id": null
                }
            ],
            "section": "annex"
        }
    ]
}